{
    "metadata": {
        "dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json",
        "dbt_version": "1.9.1",
        "generated_at": "2025-04-14T12:53:13.306398Z",
        "invocation_id": "1013fc5c-e637-4bc7-ab28-66bd19cb50ef",
        "env": {},
        "project_name": "ccdf_xtra_ps_fokus_x",
        "project_id": "ad089320b513799e07e3d74b30094813",
        "user_id": "b7fbb751-518e-4f8f-9ec2-f9b344745df1",
        "send_anonymous_usage_stats": true,
        "adapter_type": "snowflake"
    },
    "nodes": {
        "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change": {
            "database": "NGA_DB_RAFT",
            "schema": "PARTY_ANALYTICS",
            "name": "ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "resource_type": "model",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "party_analytics/ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change.sql",
            "original_file_path": "models/party_analytics/ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change.sql",
            "unique_id": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
            ],
            "alias": "ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "checksum": {
                "name": "sha256",
                "checksum": "1f69a658d0de4c32ec21cfb92e53a9bba87fe6c3ad2adefa9b7155636ff382ed"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "PARTY_ANALYTICS",
                "database": null,
                "tags": [],
                "meta": {
                    "util_tags": {
                        "PRODUCER": "dbt"
                    }
                },
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "batch_size": null,
                "lookback": 1,
                "begin": null,
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "post-hook": [
                    {
                        "sql": "{{ telia_analytics_no.create_compatibility_view('ABT_XTRA_MAIN_PRODUCT_CHANGE', this) }}",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ telia_analytics_no.set_warehouse_size(this) }}",
                        "transaction": true,
                        "index": null
                    }
                ],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "event_time": null,
                "concurrent_batches": null,
                "access": "protected",
                "transient": false,
                "query_tag": "ccdf_xtra_ps_fokus_x"
            },
            "tags": [],
            "description": " Table that tracks changes in product agreements for Telia Mobile (FOKUS) subscribers. It compresses consecutive agreements without gaps within the same product lifetime and marks churn and gross events based on specific date conditions. The script groups agreements by subscriber and product, joins detailed product information, and flags price plan changes. It also incorporates information about porting in and out, dealer and campaign details, and various flags indicating changes and statuses. The table provides a comprehensive view of subscriber product agreement history and changes.",
            "columns": {
                "pp_seq_cnt": {
                    "name": "pp_seq_cnt",
                    "description": "Historical priceplan sequence number",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "00 - No GDPR"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "account_key": {
                    "name": "account_key",
                    "description": "Telia Mobile: ban + _FOK",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "40 - PII - Customer billing account"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "pp_duration_days_cnt": {
                    "name": "pp_duration_days_cnt",
                    "description": "Duration of priceplan in days. If priceplan ongoing - difference between valid_from and current date",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "00 - No GDPR"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "prev_campaign_key": {
                    "name": "prev_campaign_key",
                    "description": "Previuos campaign_key",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "pp_group_cd": {
                    "name": "pp_group_cd",
                    "description": "Price plan group code",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "campaign_code": {
                    "name": "campaign_code",
                    "description": "Campaign code",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "prev_account_key": {
                    "name": "prev_account_key",
                    "description": "Previous account key: Telia Mobile: ban + _FOK",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "40 - PII - Customer billing account"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "agreement_key": {
                    "name": "agreement_key",
                    "description": "Telia Mobile: soc_seq_no + _FOK",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "41 - PII - Customer Agreement"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "priceplan_cd": {
                    "name": "priceplan_cd",
                    "description": "=Product_id for MP(FOK) : Legacy Product ID. (Artificial non-recurring products are prefixed with NR_",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "port_in_dt": {
                    "name": "port_in_dt",
                    "description": "Port in date:  nvl(port_in.np_first_ext_complete_date///date_trunc('day',sys_creation_date) from first row where trx_code=115 and text_1=815///,  port_in.np_latest_conf_date//np_order_data.last_sts_date///) ",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "14 - Numberporting logs"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "pp_price_downgrade_flag": {
                    "name": "pp_price_downgrade_flag",
                    "description": "Flag for marking recurring amount change. 1 - if recurring amount was changed in degative direction, 0 - recurring amount has changed in positive direction ",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "prev_pp_group_cd": {
                    "name": "prev_pp_group_cd",
                    "description": "Previous price plan group code ",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "pp_group_desc": {
                    "name": "pp_group_desc",
                    "description": "Price plan group description (name)",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "prev_gb_included": {
                    "name": "prev_gb_included",
                    "description": "Amount of data usage in GB included in the previous product",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "dealer_cd": {
                    "name": "dealer_cd",
                    "description": "Telia Mobile: service_agreement.dealer_code The dealer / shop registering the PRODUCT_ID and gives input to any settlement to the dealer for the sales service.",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "27 - Customer sales order"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "subscriber_no": {
                    "name": "subscriber_no",
                    "description": "Telia Mobile: service_agreement.subscriber_no The main phone number of the subscriber, all allowances, buckets, charges are registered at this level even if a subservient multi SIM phone number is used",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "05 - PII - Subscription"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "dealer_desc": {
                    "name": "dealer_desc",
                    "description": "Common dealer name",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "27 - Customer sales order"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "active_port_out_flag": {
                    "name": "active_port_out_flag",
                    "description": "Flag for marking ongoing port out process. 0 - no ongoing port out processes, 1 - ongoing port out process",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "32 - Customer information"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "gross_flag": {
                    "name": "gross_flag",
                    "description": "Flag for marking gross event. 0 - no gross event, 1 - gross event",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "source_system": {
                    "name": "source_system",
                    "description": "FOK",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "00 - No GDPR"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "gb_included": {
                    "name": "gb_included",
                    "description": "Telia Mobile: Amount of data usage in GB included in the product",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "family_flag": {
                    "name": "family_flag",
                    "description": "Flag indicating if this agreement is in an family priceplan",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "sales_agent_cd": {
                    "name": "sales_agent_cd",
                    "description": "Telia Mobile: service_agreement.sales_agent The representative of the DEALER managing the sales transaction",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "27 - Customer sales order"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "prev_min_commit_period": {
                    "name": "prev_min_commit_period",
                    "description": "Previous campaign commit period",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "min_commit_period": {
                    "name": "min_commit_period",
                    "description": "Telia Mobile: The commit period for the campaign. (there might be a number here, even if subscriber does not have a commitment?) The formally required commitment period is stated in months, if 0 there are no formal commitment registered. Presumably O is to indicate a commercial definition or marker",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "subscriber_key": {
                    "name": "subscriber_key",
                    "description": "Telia Mobile: subscriber_id+ _FOK",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "05 - PII - Subscription"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "recurring_amt": {
                    "name": "recurring_amt",
                    "description": "Telia Mobile: agreement base price",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "ban": {
                    "name": "ban",
                    "description": "Telia Mobile: Billing account number",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "40 - PII - Customer billing account"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "pp_price_upgrade_flag": {
                    "name": "pp_price_upgrade_flag",
                    "description": "Flag for marking recurring amount change. 0 - if recurring amount was changed in degative direction, 1 - recurring amount has changed in positive direction ",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "subscriber_id": {
                    "name": "subscriber_id",
                    "description": "Telia Mobile: subscriber/subscriber_history.subscriber_id The identity level of a subscription where the main phone number is connected as a subservient entity. For legal reasons all phone numbers must identify a formal entity as user.",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "05 - PII - Subscription"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "channel_desc": {
                    "name": "channel_desc",
                    "description": "Telia Mobile: Extended chain name / description",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "27 - Customer sales order"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "diff_order_vs_portout_dt": {
                    "name": "diff_order_vs_portout_dt",
                    "description": "Difference between port out process order date and order execution date",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "14 - Numberporting logs"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "business_unit": {
                    "name": "business_unit",
                    "description": "FOK",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "00 - No GDPR"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "brand_desc": {
                    "name": "brand_desc",
                    "description": "Brand description",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "product_key": {
                    "name": "product_key",
                    "description": "Telia Mobile: soc + _FOK",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "port_to_oper_desc": {
                    "name": "port_to_oper_desc",
                    "description": "Port out to operator description (name)",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "14 - Numberporting logs"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "pp_start_date": {
                    "name": "pp_start_date",
                    "description": "Telia Mobile: Date of service agreement valid_from and related product valid_from.",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "00 - No GDPR"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "churn_flag": {
                    "name": "churn_flag",
                    "description": "Flag for marking churn event. 0 - no churn event, 1 - churn event",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "port_in_from_oper_cd": {
                    "name": "port_in_from_oper_cd",
                    "description": "Port-in from operator code : np_trx_detail.curr_net_oper from LATEST record where found",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "14 - Numberporting logs"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "diff_recurring_amt": {
                    "name": "diff_recurring_amt",
                    "description": "Difference in recurring amount and previous recurring amount",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "prev_product_key": {
                    "name": "prev_product_key",
                    "description": "Previous product key -  Telia Mobile - soc + _FOK",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "priceplan_desc": {
                    "name": "priceplan_desc",
                    "description": "=Product_name for MP(FOK) : Telia Mobile: Descriptive text of the product",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "prev_priceplan_cd": {
                    "name": "prev_priceplan_cd",
                    "description": "Previous price plan code: =Product_id for MP(FOK) : Legacy Product ID. (Artificial non-recurring products are prefixed with NR_",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "run_ts": {
                    "name": "run_ts",
                    "description": "Model run timestamp",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "00 - No GDPR"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "prev_campaign_code": {
                    "name": "prev_campaign_code",
                    "description": "Previous campaign code",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "product_category": {
                    "name": "product_category",
                    "description": "FOK='Mobile' ",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "product_segment": {
                    "name": "product_segment",
                    "description": "Product segment",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "offer_cd": {
                    "name": "offer_cd",
                    "description": "Telia Mobile: soc.offer_code For main services (Price Plan) products (EXTERNAL_SERVICE_TYPE=P) the formal Offering code from SAP is stated.",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "pp_end_date": {
                    "name": "pp_end_date",
                    "description": "Telia Mobile: Least date of service agreement valid_to and related product valid_to. This will overlap with nest VALID_FROM if it exists. YYYY.MM.DD like 4700.12.31 indicate in perpetuity. Can be any future date.",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "00 - No GDPR"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "port_in_from_oper_desc": {
                    "name": "port_in_from_oper_desc",
                    "description": "Port-in from operator description (name)",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "14 - Numberporting logs"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "prev_family_flag": {
                    "name": "prev_family_flag",
                    "description": "Flag indicating if previous agreement is in an family priceplan",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "port_out_dt": {
                    "name": "port_out_dt",
                    "description": "Port out date: nvl(port_in.np_first_ext_complete_date///date_trunc('day',sys_creation_date) from first row where trx_code=115 and text_1=815///,  port_in.np_latest_conf_date//np_order_data.last_sts_date///) ",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "14 - Numberporting logs"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "campaign_key": {
                    "name": "campaign_key",
                    "description": "Telia Mobile: Campaign unique ID/sequence + '_FOK",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "prev_pp_group_desc": {
                    "name": "prev_pp_group_desc",
                    "description": "Previous price plan group description",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "port_to_oper_cd": {
                    "name": "port_to_oper_cd",
                    "description": "Port out to operator code: np_trx_detail.recip_net_oper from LATEST record where found",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "14 - Numberporting logs"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "port_out_order_dt": {
                    "name": "port_out_order_dt",
                    "description": "Port out order date: date_trunc('day',sys_creation_date) from first row, by int_trx_seq",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "14 - Numberporting logs"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "prev_priceplan_desc": {
                    "name": "prev_priceplan_desc",
                    "description": "Previous prive plan description: =Product_name for MP(FOK) : Telia Mobile: Descriptive text of the product",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                }
            },
            "meta": {
                "util_tags": {
                    "PRODUCER": "dbt"
                }
            },
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "ccdf_xtra_ps_fokus_x://models/party_analytics/party_analytics_schema.yml",
            "build_path": null,
            "unrendered_config": {
                "transient": false,
                "query_tag": "ccdf_xtra_ps_fokus_x",
                "pre-hook": [
                    "{{ telia_analytics_no.set_warehouse_size(this) }}"
                ],
                "meta": {
                    "util_tags": {
                        "PRODUCER": "dbt"
                    }
                },
                "schema": "PARTY_ANALYTICS",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "materialized": "table",
                "post-hook": "{{ telia_analytics_no.create_compatibility_view('ABT_XTRA_MAIN_PRODUCT_CHANGE', this) }}"
            },
            "created_at": 1744635194.163432,
            "relation_name": "NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "raw_code": "{{\n    config(\n        materialized='table',\n        schema='PARTY_ANALYTICS',\n        post_hook=\"{{ telia_analytics_no.create_compatibility_view('ABT_XTRA_MAIN_PRODUCT_CHANGE', this) }}\"\n    )\n}}\n\n/***\nTable granularity: changes on product level. Compressed if no gaps between agreements inside one product lifetime\n***/\nWITH agreement_base AS \n    ( SELECT\n        CASE \n            WHEN subscriber_id <> LAG(subscriber_id, 1, NULL) OVER (PARTITION BY subscriber_id ORDER BY subscriber_id ASC, valid_from  ASC,                                     valid_to ASC)\n            OR valid_from > LAG(valid_to, 1, NULL) OVER (PARTITION BY subscriber_id ORDER BY subscriber_id ASC, valid_from ASC, valid_to ASC)\n            OR product_id <> LAG(product_id, 1, NULL) OVER (PARTITION BY subscriber_id ORDER BY subscriber_id ASC, valid_from ASC, valid_to ASC)\n            THEN 1 ELSE 0 END AS not_the_same_product\n        , *\n     FROM {{ source('party_base', 'ccdf_ps_fokus_x_party_base__agreement') }}\n     WHERE 1=1\n     AND source_system = 'FOK'\n     AND service_type_id = 'P'\n     AND subscriber_id IS NOT NULL )\n\n, agreement_for_grouping AS\n    ( SELECT\n        SUM(not_the_same_product) OVER (PARTITION BY subscriber_id ORDER BY subscriber_id ASC, valid_from ASC, valid_to ASC\n        ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW ) AS grouping_element\n        , *\n    FROM agreement_base ) \n    \n, grouped_agreement AS\n    ( SELECT \n        a.subscriber_id\n        , p.fin_offering_code\n        , MIN(a.valid_from) AS valid_from\n        , MAX(a.valid_to) AS valid_to\n    FROM agreement_for_grouping a\n              \n    LEFT JOIN {{ source('party_base', 'ccdf_ps_fokus_x_party_base__product_c') }} p\n    ON p.product_id = a.product_id AND a.valid_to BETWEEN p.valid_from AND p.valid_to\n    WHERE  a.service_type_id = 'P' AND p.main_product_flag = 1\n    GROUP BY \n        a.subscriber_id\n        , p.fin_offering_code\n        , a.grouping_element )\n/***\nAgreements base, grouped by granularity logic + product info\n***/        \n, agreement AS\n    (SELECT\n        grouped_agr.valid_from AS vfa\n        , grouped_agr.valid_to AS vta\n        , agr.agreement_key\n        , agr.account_id \n        , agr.subscriber_key\n        , agr.subscriber_id\n        , agr.account_key\n        , agr.subscriber_no\n        , agr.agreement_base_price\n        , agr.dealer_id\n        , agr.sales_agent_id\n        , agr.campaign_id\n        , agr.family_flag\n        , CASE \n                WHEN DATEDIFF('D', vta, NVL(LAG(vfa) OVER (PARTITION BY agr.subscriber_id ORDER BY vfa DESC), '4700-12-31')) > 0\n                THEN 1 \n                ELSE 0 \n          END churn_flag\n        , CASE\n            WHEN DATEDIFF('D', NVL(lag(vta, -1) OVER (PARTITION BY  agr.subscriber_id ORDER BY vfa DESC), '1970-01-01'), vfa) > 0\n            THEN 1 \n            ELSE 0 \n          END AS gross_flag\n        , pr.*\n    FROM grouped_agreement grouped_agr\n    LEFT JOIN ( SELECT\n                *\n                , CASE WHEN family_tier_flag = 1 AND SUM(family_tier) OVER (PARTITION BY account_key, product_key) > 2\n                    AND COUNT(*) OVER (PARTITION BY account_key, product_key) > 1 THEN 1        \n                    ELSE 0 END AS family_flag \n                FROM {{ source('party_base', 'ccdf_ps_fokus_x_party_base__agreement') }}\n                WHERE service_type_id = 'P'  AND source_system = 'FOK' and subscriber_id is not null \n                QUALIFY NVL(LEAD(valid_to) OVER (PARTITION BY subscriber_id ORDER BY valid_to DESC), '4700-01-01') != valid_to\n                ) agr\n    ON agr.subscriber_id = grouped_agr.subscriber_id AND agr.valid_to = grouped_agr.valid_to\n    \n    LEFT JOIN {{ source('party_base', 'ccdf_ps_fokus_x_party_base__product_c') }} pr\n    ON pr.fin_offering_code = grouped_agr.fin_offering_code AND  grouped_agr.valid_to BETWEEN DATEADD('D', 1, pr.valid_from) AND pr.valid_to\n    AND pr.main_product_flag = 1 AND pr.product_key = agr.product_key )\n\n, dummy as (SELECT * from {{ source( 'party_analytics', 'ccdf_abt_x__abt_main_product_change')}} limit 1) -- dummy select for dag schedule\n\n, base as \n\n(SELECT\na.subscriber_key\n, a.subscriber_id AS subscriber_id\n, a.subscriber_no AS subscriber_no\n, a.account_id AS BAN\n, a.account_key\n, CASE\n    WHEN DATEDIFF('D', LAG(a.vta, -1) OVER (PARTITION BY a.subscriber_id ORDER BY a.vfa DESC), a.vfa) < 1\n    THEN LAG(a.account_key, -1) OVER (PARTITION BY subscriber_id ORDER BY a.vfa DESC) \n  END as prev_account_key \n, a.agreement_key\n, a.product_key\n, CASE\n    WHEN DATEDIFF('D', LAG(a.vta, -1) OVER (PARTITION BY a.subscriber_id ORDER BY a.vfa DESC), a.vfa) < 1\n    THEN LAG(a.product_key, -1) OVER (PARTITION BY subscriber_id ORDER BY a.vfa DESC) \n  END AS prev_product_key \n, a.product_id AS priceplan_cd\n, CASE\n    WHEN UPPER(a.priceplan_name) = 'IKKE I BRUK' \n    THEN a.product_name \n    ELSE a.priceplan_name \n  END AS priceplan_desc\n, a.priceplan_group_code AS pp_group_cd\n, a.priceplan_group_name AS pp_group_desc\n, a.product_brand_name AS brand_desc\n, a.ts_product_name AS product_segment\n, a.product_category \n, a.fin_offering_code AS offer_cd\n, a.vfa pp_start_date\n, a.vta pp_end_date\n, DATEDIFF('D', a.vfa,  CASE\n                            WHEN a.vta > CURRENT_DATE() \n                            THEN CURRENT_DATE() \n                            ELSE a.vta \n                        END ) AS pp_duration_days_cnt\n, a.list_price recurring_amt\n, NVL(a.agreement_base_price  - CASE\n                                    WHEN DATEDIFF('D', LAG(a.vta, -1) OVER (PARTITION BY a.subscriber_id ORDER BY a.vfa DESC), a.vfa) < 1\n                                    THEN LAG(a.agreement_base_price, -1) OVER (PARTITION BY subscriber_id ORDER BY a.vfa DESC) \n                                END, 0)  AS diff_recurring_amt\n, CASE\n    WHEN DATEDIFF('D', LAG(a.vta, -1) OVER (PARTITION BY a.subscriber_id ORDER BY a.vfa DESC), a.vfa) < 1\n    THEN LAG(a.product_id, -1) OVER (PARTITION BY  subscriber_id ORDER BY a.vfa DESC) \n  END AS prev_priceplan_cd\n, CASE\n    WHEN DATEDIFF('D', lag(a.vta, -1) OVER (PARTITION BY  a.subscriber_id ORDER BY a.vfa DESC), a.vfa) < 1\n    THEN LAG(a.product_name, -1) OVER (PARTITION BY  subscriber_id ORDER BY a.vfa DESC) \n  END AS prev_priceplan_desc\n, CASE\n    WHEN DATEDIFF('D', lag(a.vta, -1) OVER (PARTITION BY  a.subscriber_id ORDER BY a.vfa DESC), a.vfa) < 1\n    THEN lag(a.priceplan_group_code, -1) OVER (PARTITION BY  subscriber_id ORDER BY a.vfa DESC) \n  END AS prev_pp_group_cd\n, CASE\n    WHEN DATEDIFF('D', lag(a.vta, -1) OVER (PARTITION BY  a.subscriber_id ORDER BY a.vfa DESC), a.vfa) < 1\n    THEN lag(a.priceplan_group_name, -1) OVER (PARTITION BY  subscriber_id ORDER BY a.vfa DESC) \n  END AS prev_pp_group_desc\n, CASE\n    WHEN NVL(a.agreement_base_price  - CASE\n                                            WHEN DATEDIFF('D', lag(a.vta, -1) OVER (PARTITION BY  a.subscriber_id ORDER BY a.vfa DESC), a.vfa) < 1\n                                            THEN lag(a.agreement_base_price, -1) OVER (PARTITION BY  subscriber_id ORDER BY a.vfa DESC) \n                                       END, 0) > 0 \n    THEN 1\n    ELSE 0\n  END AS pp_price_upgrade_flag\n, CASE\n    WHEN NVL(a.agreement_base_price  - CASE\n                                            WHEN DATEDIFF('D', lag(a.vta, -1) OVER (PARTITION BY  a.subscriber_id ORDER BY a.vfa DESC), a.vfa) < 1\n                                            THEN lag(a.agreement_base_price, -1) OVER (PARTITION BY  subscriber_id ORDER BY a.vfa DESC) \n                                        END, 0) < 0 \n    THEN 1\n    ELSE 0\n  END AS pp_price_downgrade_flag\n, a.gross_flag\n, a.churn_flag\n, CASE\n    WHEN a.vta > CURRENT_DATE() AND port_out.to_operator_id IS NOT NULL\n    THEN 1\n    ELSE 0\n  END AS  active_port_out_flag\n, port_in.from_operator_id AS port_in_from_oper_cd\n, op_in.operator_name AS port_in_from_oper_desc\n, nvl(port_in.np_first_ext_complete_date,  port_in.np_latest_conf_date) AS port_in_dt\n, port_out.to_operator_id AS port_to_oper_cd\n, op_out.operator_name AS port_to_oper_desc\n, nvl(port_out.np_first_ext_complete_date,  port_out.np_latest_conf_date) AS port_out_dt\n, port_out.np_order_date AS port_out_order_dt\n, DATEDIFF('D', port_out.np_order_date, nvl(port_out.np_first_ext_complete_date,  port_out.np_latest_conf_date)) AS diff_order_vs_portout_dt\n, a.dealer_id AS dealer_cd\n, d.dealer_name AS dealer_desc\n, d.bud_chain_name AS channel_desc \n, a.sales_agent_id AS sales_agent_cd\n, camp.campaign_key\n, LAG(camp.campaign_key, -1) OVER (PARTITION BY  subscriber_id ORDER BY a.vfa DESC) AS prev_campaign_key\n, camp.campaign_code\n, LAG(camp.campaign_code, -1) OVER (PARTITION BY  subscriber_id ORDER BY a.vfa DESC) AS prev_campaign_code\n, camp.min_commit_period\n, LAG(camp.min_commit_period, -1) OVER (PARTITION BY  subscriber_id ORDER BY a.vfa DESC) AS prev_min_commit_period\n, a.family_flag as family_flag\n, LAG(a.family_flag, -1) OVER (PARTITION BY  subscriber_id ORDER BY a.vfa DESC) AS prev_family_flag\n, a.gb_included\n, LAG(a.gb_included, -1) OVER (PARTITION BY  subscriber_id ORDER BY a.vfa DESC) AS prev_gb_included\n, a.business_unit\n, a.source_system\n\n\nFROM agreement a\n\nLEFT JOIN {{ source('party_base', 'ccdf_core_fokus_x_party_base__dealer_c') }} d\nON  d.dealer_id = a.dealer_id AND a.business_unit = d.business_unit\n\n\nLEFT JOIN  {{ source('party_base', 'ccdf_core_fokus_x_party_base__abt_porting') }} port_in\nON a.subscriber_Id = port_in.np_subscriber_id AND port_in.np_direction = 'PRTIN' and a.gross_flag = 1\nand   nvl(port_in.np_first_ext_complete_date,  port_in.np_latest_conf_date) BETWEEN dateadd('D', -30, a.vfa) AND dateadd('D', 30, a.vfa )\nAND port_in.np_trx_code in ('115', '112') \nand right(port_in.msisdn, 8) = right(a.subscriber_no, 8)\n\n/***\nJoining porting out info. If porting out is planned in the future, though agreement is still active - all port out statuses, except cancelation/error\n***/\nLEFT JOIN {{ source('party_base', 'ccdf_core_fokus_x_party_base__abt_porting') }}  port_out\nON a.subscriber_Id = port_out.np_subscriber_id AND port_out.np_direction = 'PROUT' and (a.churn_flag = 1 or active_port_out_flag = 1)\nand right(port_out.msisdn, 8) = right(a.subscriber_no, 8)\nAND \nCASE\nWHEN a.vta >= CURRENT_DATE()\nTHEN CURRENT_DATE() \nELSE a.vta \nEND  BETWEEN  DATEADD('D', -7, port_out.np_order_date)\nAND \n\nDATEADD('D', 30, CASE \n        WHEN greatest(port_out.np_order_date, port_out.np_latest_conf_date, nvl(port_out.np_status_change_date, '1970-01-01'), nvl( port_out.np_first_ext_complete_date, '1970-01-01')) >= CURRENT_DATE() \n        AND port_out.np_trx_code not in  ('141', '129', '9100')\n        THEN CURRENT_DATE()\n        WHEN greatest(port_out.np_order_date, port_out.np_latest_conf_date, nvl(port_out.np_status_change_date, '1970-01-01'), nvl( port_out.np_first_ext_complete_date, '1970-01-01')) < CURRENT_DATE()\n        AND port_out.np_trx_code in ('115', '112') \n        THEN greatest(port_out.np_order_date, port_out.np_latest_conf_date, nvl(port_out.np_status_change_date, '1970-01-01'), nvl( port_out.np_first_ext_complete_date, '1970-01-01')) \n        END)\n                                                                                                                               \n\nLEFT JOIN {{ source('party_base', 'ccdf_core_fokus_x_party_base__operator') }} op_out\nON op_out.operator_id = port_out.to_operator_id\n\nLEFT JOIN {{ source('party_base', 'ccdf_core_fokus_x_party_base__operator') }} op_in\nON op_in.operator_id = port_in.from_operator_id\n\nLEFT JOIN  {{ source('party_base', 'ccdf_ps_fokus_x_party_base__campaign_c') }} camp\nON concat(camp.campaign_id, camp.source_system) = concat(a.campaign_id, a.source_system)  AND a.vfa BETWEEN camp.valid_from AND dateadd('D', -1, camp.valid_to) \n\n\n/***\nJoining porting in and porting out by closest date to agreement start/end date\n***/\nQUALIFY RANK() OVER (PARTITION BY subscriber_id, agreement_key  ORDER BY NVL(ABS(datediff('D', case when a.vta > current_date() then current_date() else a.vta end, port_out_dt)), 0))  = 1 \nand RANK() OVER (PARTITION BY subscriber_id, agreement_key ORDER BY nvl(abs(datediff('D', a.vfa,nvl(port_in.np_first_ext_complete_date,  port_in.np_latest_conf_date))),0)) = 1 )\n\n\n\nSELECT \n  *\n, RANK() OVER (PARTITION BY  subscriber_id ORDER BY pp_start_date) as PP_SEQ_CNT\n, CURRENT_TIMESTAMP(0) AS RUN_TS \n\nFROM base",
            "language": "sql",
            "refs": [],
            "sources": [
                [
                    "party_base",
                    "ccdf_ps_fokus_x_party_base__agreement"
                ],
                [
                    "party_base",
                    "ccdf_ps_fokus_x_party_base__product_c"
                ],
                [
                    "party_base",
                    "ccdf_ps_fokus_x_party_base__agreement"
                ],
                [
                    "party_base",
                    "ccdf_ps_fokus_x_party_base__product_c"
                ],
                [
                    "party_analytics",
                    "ccdf_abt_x__abt_main_product_change"
                ],
                [
                    "party_base",
                    "ccdf_core_fokus_x_party_base__dealer_c"
                ],
                [
                    "party_base",
                    "ccdf_core_fokus_x_party_base__abt_porting"
                ],
                [
                    "party_base",
                    "ccdf_core_fokus_x_party_base__abt_porting"
                ],
                [
                    "party_base",
                    "ccdf_core_fokus_x_party_base__operator"
                ],
                [
                    "party_base",
                    "ccdf_core_fokus_x_party_base__operator"
                ],
                [
                    "party_base",
                    "ccdf_ps_fokus_x_party_base__campaign_c"
                ]
            ],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.telia_analytics_no.set_warehouse_size",
                    "macro.telia_analytics_no.create_compatibility_view"
                ],
                "nodes": [
                    "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_ps_fokus_x_party_base__agreement",
                    "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_ps_fokus_x_party_base__product_c",
                    "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_abt_x__abt_main_product_change",
                    "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__dealer_c",
                    "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__abt_porting",
                    "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__operator",
                    "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_ps_fokus_x_party_base__campaign_c"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null,
            "primary_key": [
                "AGREEMENT_KEY"
            ],
            "time_spine": null
        },
        "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber": {
            "database": "NGA_DB_RAFT",
            "schema": "PARTY_ANALYTICS",
            "name": "ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "resource_type": "model",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "party_analytics/ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber.sql",
            "original_file_path": "models/party_analytics/ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber.sql",
            "unique_id": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
            ],
            "alias": "ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "checksum": {
                "name": "sha256",
                "checksum": "b76cf843182742d766a8f546a7a1dd8e98f11103a65033d74b4d5872176c8462"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "PARTY_ANALYTICS",
                "database": null,
                "tags": [],
                "meta": {
                    "util_tags": {
                        "PRODUCER": "dbt"
                    }
                },
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "batch_size": null,
                "lookback": 1,
                "begin": null,
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "post-hook": [
                    {
                        "sql": "{{ telia_analytics_no.create_compatibility_view('ABT_XTRA_EXTENDED_SUBSCRIBER', this) }}",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ telia_analytics_no.set_warehouse_size(this) }}",
                        "transaction": true,
                        "index": null
                    }
                ],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "event_time": null,
                "concurrent_batches": null,
                "access": "protected",
                "transient": false,
                "query_tag": "ccdf_xtra_ps_fokus_x"
            },
            "tags": [],
            "description": "This table contains subscriber latests status, agreements, products, prices and contact information for Telia Mobile (Fokus)",
            "columns": {
                "from_operator_name": {
                    "name": "from_operator_name",
                    "description": "Operator name/description from which subscriber ported out",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "14 - Numberporting logs"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "prev_product_lifetime": {
                    "name": "prev_product_lifetime",
                    "description": "Previos priceplan - time in days between product agreement start date and agreement end date",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "00 - No GDPR"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "account_key": {
                    "name": "account_key",
                    "description": "Telia Mobile: ban + _FOK",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "40 - PII - Customer billing account"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "latest_family_status_change": {
                    "name": "latest_family_status_change",
                    "description": "Date, since which the defined family_lines_flag is valid",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "dealer_id": {
                    "name": "dealer_id",
                    "description": "Telia Mobile: service_agreement.dealer_code The dealer / shop registering the PRODUCT_ID and gives input to any settlement to the dealer for the sales service.",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "27 - Customer sales order"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "last_active_discount_end_date": {
                    "name": "last_active_discount_end_date",
                    "description": "End date of the last active discount",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "discount_price": {
                    "name": "discount_price",
                    "description": "Base price for the agreement - commitment (campaign) discount.",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "invoice_price": {
                    "name": "invoice_price",
                    "description": "Amount invoiced for the priceplan agreement. If subscriber churned and latest invoice for the agreement is negative (refund included), taking second to last invoice. If active subscriber - taking latest invoice. 0 amount invoices not included.",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "campaign_code": {
                    "name": "campaign_code",
                    "description": "Source system specific campaign code. FOK Only",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "subscriber_start_date": {
                    "name": "subscriber_start_date",
                    "description": "Gross / start date of subscription",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "32 - Customer information"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "last_active_discount_start_date": {
                    "name": "last_active_discount_start_date",
                    "description": "Start date of the last active discount",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "days_since_discount_ended": {
                    "name": "days_since_discount_ended",
                    "description": "Days since last discount ended. If <0 discount did not end",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "agreement_start_date": {
                    "name": "agreement_start_date",
                    "description": "Telia Mobile -  Greatest date of service agreement valid_from and related product valid_from.",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "00 - No GDPR"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "latest_invoice_date": {
                    "name": "latest_invoice_date",
                    "description": "Latest invoice date for the product associated with the agreement",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "00 - No GDPR"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "event_name": {
                    "name": "event_name",
                    "description": "A=Gross Add, C =Churn",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "00 - No GDPR"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "commit_discount_rate": {
                    "name": "commit_discount_rate",
                    "description": "Commitment discount rate",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "main_product_name": {
                    "name": "main_product_name",
                    "description": "Previous price plan product description",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "account_type_id": {
                    "name": "account_type_id",
                    "description": "Telia Mobile: BILLING_ACCOUNT.ACCOUNT_TYPEBEHIMNOPSNB: Smart value for NULL set to -1 for FOK",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "40 - PII - Customer billing account"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "base_price": {
                    "name": "base_price",
                    "description": "Base price of the product. Product may have another price depending on special conditions such as family pricing.",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "family_lines_flag": {
                    "name": "family_lines_flag",
                    "description": "Flag, indicating subscriber is in family plan",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "family_rank": {
                    "name": "family_rank",
                    "description": "Indicated the subscriber rank in family. Rank = 1 - the subscribtion is main in family",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "agreement_end_date": {
                    "name": "agreement_end_date",
                    "description": "Telia Mobile -  Least date of service agreement valid_to and related product valid_to. This will overlap with nest VALID_FROM if it exists. YYYY.MM.DD like 4700.12.31 indicate in perpetuity. Can be any future date.",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "00 - No GDPR"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "account_id": {
                    "name": "account_id",
                    "description": "Telia Mobile: billing account number",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "40 - PII - Customer billing account"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "dealer_key": {
                    "name": "dealer_key",
                    "description": "Telia Mobile: Telia Mobile: service_agreement.dealer_code The dealer / shop registering the PRODUCT_ID and gives input to any settlement to the dealer for the sales service + _FOK",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "27 - Customer sales order"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "main_agreement_id": {
                    "name": "main_agreement_id",
                    "description": "Telia Mobile: soc_seq_no for priceplan agreement",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "41 - PII - Customer Agreement"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "gender": {
                    "name": "gender",
                    "description": "Subscriber gender",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "34 - Customer gender"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "subscriber_lifetime": {
                    "name": "subscriber_lifetime",
                    "description": "TIme in days between subscriber gross date and churn date. If no churn date - curent date",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "00 - No GDPR"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "subscriber_no": {
                    "name": "subscriber_no",
                    "description": "Telia Mobile: service_agreement.subscriber_no The main phone number of the subscriber, all allowances, buckets, charges are registered at this level even if a subservient multi SIM phone number is used",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "05 - PII - Subscription"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "city": {
                    "name": "city",
                    "description": "Subscriber residential city",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "32 - Customer information"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "from_operator_id": {
                    "name": "from_operator_id",
                    "description": "Operator id, from which subscriber ported out: np_trx_detail.curr_net_oper from LATEST record where found",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "14 - Numberporting logs"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "party_id": {
                    "name": "party_id",
                    "description": "Telia Mobile: name_data.tpid",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "03 - PII - Telia Party ID"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "age": {
                    "name": "age",
                    "description": "Subscriber age",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "24 - Customers birth year"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "main_product_key": {
                    "name": "main_product_key",
                    "description": "concat(SOC, '_FOK'). Priceplan only, service_type='P'",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "latest_product_lifetime": {
                    "name": "latest_product_lifetime",
                    "description": "Time in days between product agreement start date and agreement end date",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "00 - No GDPR"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "days_left_on_discount": {
                    "name": "days_left_on_discount",
                    "description": "Days left on the latest discount",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "line_price": {
                    "name": "line_price",
                    "description": "Telia Mobile: base price for the agreement inc vat, excluding discounts, but including Family prices for BILLSHARED products for Familiepakka superusers",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "subscriber_key": {
                    "name": "subscriber_key",
                    "description": "Telia Mobile: subscriber_id+ _FOK",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "05 - PII - Subscription"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "commitment_time": {
                    "name": "commitment_time",
                    "description": "Time in days betweem commitment start and end days",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "to_operator_name": {
                    "name": "to_operator_name",
                    "description": "Operator name, description where subscriber ported out",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "14 - Numberporting logs"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "ban": {
                    "name": "ban",
                    "description": "Telia Mobile: BAN(Same as account_id)",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "40 - PII - Customer billing account"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "total_ban_price": {
                    "name": "total_ban_price",
                    "description": "Sum of invoice amount invoiced for an account for the time when the subscriber existed",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "prev_product_name": {
                    "name": "prev_product_name",
                    "description": "Previous product_name for MP(FOK) : Telia Mobile: Descriptive text of the product",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "commit_end_date": {
                    "name": "commit_end_date",
                    "description": "'Commit end date. Corresponds to the end of commitment period if matured/active or the expiration date of the last agreement in commitment period'",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "additional_discount_price": {
                    "name": "additional_discount_price",
                    "description": "Base privce for the agreement minus commitment (campaign) discount minus NGRC127 product base price (discount) minus other NGRC discounts (data discounts not included)",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "product_id": {
                    "name": "product_id",
                    "description": "Price plan id: =Product_id for MP(FOK) : Legacy Product ID.",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "subscriber_id": {
                    "name": "subscriber_id",
                    "description": "Telia Mobile: subscriber/subscriber_history.subscriber_id The identity level of a subscription where the main phone number is connected as a subservient entity. For legal reasons all phone numbers must identify a formal entity as user.",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "05 - PII - Subscription"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "prev_product_end_date": {
                    "name": "prev_product_end_date",
                    "description": "For previous priceplan agreement: least date of service agreement valid_to and related product valid_to. This will overlap with nest VALID_FROM if it exists. YYYY.MM.DD like 4700.12.31 indicate in perpetuity. Can be any future date.",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "00 - No GDPR"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "telia_xstart_50nok_discount_price": {
                    "name": "telia_xstart_50nok_discount_price",
                    "description": "Base privce for the agreement minus commitment (campaign) discount minus NGRC127 product base price (discount)",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "last_active_discount": {
                    "name": "last_active_discount",
                    "description": "Last active discount",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "request_of_port_out": {
                    "name": "request_of_port_out",
                    "description": "Date of porting out request: date_trunc('day',request_exec_date) from first row, by int_trx_seq",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "14 - Numberporting logs"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "product_payment_type": {
                    "name": "product_payment_type",
                    "description": "Prepaid, postpaid ect.",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "40 - PII - Customer billing account"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "commit_discount_desc": {
                    "name": "commit_discount_desc",
                    "description": "Description of discount, that comes with commitment",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "commitment_desc": {
                    "name": "commitment_desc",
                    "description": "Description of the commitment (category)",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "discount_period": {
                    "name": "discount_period",
                    "description": "Period in days between discount start and end date",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "prev_product_key": {
                    "name": "prev_product_key",
                    "description": "Price plan id: =Product_id for MP(FOK) : Legacy Product ID. + _FOK",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "postcode": {
                    "name": "postcode",
                    "description": "32 - Customer information",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "14 - Numberporting logs"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "event_date": {
                    "name": "event_date",
                    "description": " Date of the latest event: churn or gross",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "20 - Customers property status"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "days_since_commitment_ended": {
                    "name": "days_since_commitment_ended",
                    "description": "Amount of days since commitment period date till current date",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "to_operator_id": {
                    "name": "to_operator_id",
                    "description": "Operator id, where subscriber ported out: np_trx_detail.recip_net_oper from LATEST record where found",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "14 - Numberporting logs"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "order_of_port_out": {
                    "name": "order_of_port_out",
                    "description": "Date of porting out order: date_trunc('day',sys_creation_date) from first row, by int_trx_seq",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "14 - Numberporting logs"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "run_ts": {
                    "name": "run_ts",
                    "description": "Model run timestamp",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "00 - No GDPR"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "customer_id": {
                    "name": "customer_id",
                    "description": "Telia Mobile: BAN(Same as account_id)",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "40 - PII - Customer billing account"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "commit_start_date": {
                    "name": "commit_start_date",
                    "description": "Commitment start date",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "priceplan_group_code": {
                    "name": "priceplan_group_code",
                    "description": "Priceplan group code",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "11 - Product consumption"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "age_bucket": {
                    "name": "age_bucket",
                    "description": "Subscriber age segment",
                    "meta": {
                        "gdpr_tags": {
                            "DATA_OBJECT": "24 - Customers birth year"
                        }
                    },
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                }
            },
            "meta": {
                "util_tags": {
                    "PRODUCER": "dbt"
                }
            },
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "ccdf_xtra_ps_fokus_x://models/party_analytics/party_analytics_schema.yml",
            "build_path": null,
            "unrendered_config": {
                "transient": false,
                "query_tag": "ccdf_xtra_ps_fokus_x",
                "pre-hook": [
                    "{{ telia_analytics_no.set_warehouse_size(this) }}"
                ],
                "meta": {
                    "util_tags": {
                        "PRODUCER": "dbt"
                    }
                },
                "schema": "PARTY_ANALYTICS",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "materialized": "table",
                "post-hook": "{{ telia_analytics_no.create_compatibility_view('ABT_XTRA_EXTENDED_SUBSCRIBER', this) }}"
            },
            "created_at": 1744635194.171687,
            "relation_name": "NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "raw_code": "{{\n    config(\n        materialized='table',\n        schema='PARTY_ANALYTICS',\n        post_hook=\"{{ telia_analytics_no.create_compatibility_view('ABT_XTRA_EXTENDED_SUBSCRIBER', this) }}\"\n    )\n}}\nWITH gross_churn AS -----\n    (SELECT\n        subscriber_key\n        , subscriber_id\n        , event_name\n        , event_date\n        , from_operator_id\n        , to_operator_id\n        , ROW_NUMBER() OVER (PARTITION BY subscriber_id ORDER BY  event_date desc, event_name, account_id  ) AS row_num\n    FROM   {{ source('party_base', 'ccdf_core_fokus_x_party_base__abt_subscriber_grosschurn')}}\n    QUALIFY row_num = 1)\n\n,  subscriber AS --\n    (SELECT\n        subscriber_id\n        , customer_id\n        , party_id_user\n        , ROW_NUMBER() OVER (PARTITION BY subscriber_id ORDER BY valid_to DESC) AS row_num\n    FROM {{ source('party_base','ccdf_core_fokus_x_party_base__subscriber_c') }}\n    WHERE subscriber_id IN (SELECT subscriber_id FROM gross_churn) \n    QUALIFY row_num = 1)\n\n\n,  account as (\n    SELECT \n    account_key\n    ,ROW_NUMBER() OVER (PARTITION BY account_id ORDER BY valid_to DESC) AS row_num\n    , account_id\n    , account_type_id\n    FROM  {{ source('party_base', 'ccdf_core_fokus_x_party_base__account_c')}}\n    WHERE source_system = 'FOK'\n    QUALIFY row_num = 1\n\n)\n    \n, contact_info AS\n    (SELECT \n        last_status.*,\n        nvl(last_status.dob, dob.dob) AS birthdate\n     FROM \n        (SELECT\n            account_key\n            , customer_key\n            , subscriber_key\n            , role_type\n            , role_type_code\n            , subscriber_id\n            , account_id\n            , business_unit\n            , source_system\n            , party_id\n            , country_id\n            , city\n            , postcode\n            , street_name\n            , street_number\n            , house_number\n            , email\n            , phone_no\n            , first_name\n            , last_name\n            , full_name\n            , dob\n            , valid_from\n            , valid_to\n            ,ROW_NUMBER() OVER (PARTITION BY subscriber_id ORDER BY valid_to DESC) AS row_num\n        FROM {{ source('party_base','ccdf_core_fokus_x_party_base__contact_info_c')}}\n        WHERE source_system = 'FOK' and subscriber_id in (select subscriber_id from gross_churn)\n        QUALIFY row_num = 1) last_status\n     LEFT JOIN \n        (SELECT\n            *\n            , ROW_NUMBER() OVER (PARTITION BY subscriber_id ORDER BY valid_to DESC) rownum\n         FROM \n             (SELECT \n                 full_name,\n                 subscriber_id,\n                 dob,\n                 max(valid_to) as valid_to\n                 FROM {{ source('party_base','ccdf_core_fokus_x_party_base__contact_info_c')}}\n                 WHERE dob IS NOT NULL  and subscriber_id in (select subscriber_id from gross_churn)\n                 GROUP BY full_name, subscriber_id, dob) db\n         QUALIFY rownum = 1) dob\n     ON  dob.subscriber_id = last_status.subscriber_id AND dob.full_name = last_status.full_name\n     )\n\n\n, demography AS\n    (SELECT \n        * \n     FROM\n        (\n        SELECT \n            * \n            ,ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY valid_to DESC) AS row_num\n        FROM\n            (SELECT\n                object_id \n                , customer_id\n                , MAX(valid_to) AS valid_to\n            FROM  {{ source('party_analytics', 'ccdf_demographics_x__demography_household_link')}}\n            GROUP BY object_id , customer_id) last_link\n        QUALIFY row_num = 1 ) link\n     LEFT JOIN  \n        (SELECT\n            object_id\n            , sarepta_gender\n            , sarepta_birthyear\n            , valid_from\n            , valid_to\n            ,ROW_NUMBER() OVER (PARTITION BY object_id ORDER BY  valid_to DESC) AS row_num\n        FROM  {{ source('party_analytics', 'ccdf_demographics_x__demography')}}\n        QUALIFY row_num = 1 ) dem\n        ON dem.object_id = link.object_id )\n    \n, subscriber_dates as \n    ( SELECT \n            SUBSCRIBER_ID\n            , MIN(GROSS_ADD_DATE) as SUBSCRIBER_START_DATE\n            , MAX(CHURN_DATE) as LAST_CHURN_DATE\n    FROM\n        (SELECT\n              SUBSCRIBER_ID\n            , GROSS_ADD_DATE\n            , CHURN_DATE\n        FROM \n             (SELECT \n                    SUBSCRIBER_ID\n                    , GROSS_ADD_DATE\n                    , CHURN_DATE\n                    , DATEDIFF('D', CHURN_DATE, LAG(GROSS_ADD_DATE, -1) OVER (PARTITION BY SUBSCRIBER_ID ORDER BY GROSS_ADD_DATE)) as GAP\n                    , row_number() OVER (PARTITION BY SUBSCRIBER_ID ORDER BY GROSS_ADD_DATE DESC) rownum\n                FROM {{ source('party_base', 'ccdf_core_fokus_x_party_base__abt_subscriber_lifetime' )}}\n                WHERE subscriber_id in (select subscriber_id from gross_churn)\n                QUALIFY GAP <= 1 OR GAP IS NULL)\n        QUALIFY ROW_NUMBER() OVER (PARTITION BY SUBSCRIBER_ID ORDER BY GROSS_ADD_DATE DESC) = rownum )\n    GROUP BY SUBSCRIBER_ID)\n\n\n,  agreements as \n    ( SELECT\n        grouped_agr.AGREEMENT_ID\n        , grouped_agr.SUB_SUBSCRIBER_ID\n        , grouped_agr.VALID_FROM\n        , grouped_agr.VALID_TO\n        , full_agr.product_KEY\n        , full_agr.AGREEMENT_BASE_PRICE\n        , prod.product_id\n        , prod.product_name\n        , prod.priceplan_group_code\n        , prod.product_payment_type\n        , prod.list_price\n        , full_agr.campaign_id\n        , full_agr.subscriber_no\n        , full_agr.dealer_key\n        , full_agr.dealer_id\n        , full_agr.account_id\n        , full_agr.account_key\n        , full_agr.agreement_key\n        , full_agr.source_system\n        , full_agr.family_tier_flag\n        , full_agr.family_tier\n        , grouped_agr.family_status_from\n        , ROW_NUMBER() OVER (PARTITION BY grouped_agr.SUB_SUBSCRIBER_ID ORDER BY grouped_agr.VALID_TO DESC) rownum \n        FROM (      \n            SELECT\n            AGREEMENT_ID                                                    \n           , SUB_SUBSCRIBER_ID\n           , MIN(VALID_FROM) as VALID_FROM\n           , MAX(VALID_TO) as VALID_TO\n           , MAX(valid_from) as family_status_from\n            FROM  {{ source('party_base', 'ccdf_ps_fokus_x_party_base__agreement')}}\n            WHERE service_type_id = 'P' \n            AND sub_subscriber_id IN (SELECT subscriber_id FROM gross_churn)\n            GROUP BY   AGREEMENT_ID , SUB_SUBSCRIBER_ID ) grouped_agr\n            LEFT JOIN (SELECT\n                        agreement_key\n                        , subscriber_key\n                        , account_key\n                        , customer_key\n                        , product_key\n                        , account_id\n                        , customer_id\n                        , agreement_id\n                        , subscriber_id\n                        , subscriber_no\n                        , sub_subscriber_id\n                        , sub_subscriber_no\n                        , agreement_level\n                        , service_type_id\n                        , DEALER_KEY\n                        , dealer_id\n                        , sales_agent_id\n                        , sales_agent_key\n                        , valid_from\n                        , valid_to\n                        , product_id\n                        , campaign_id\n                        , campaign_key\n                        , family_tier_flag\n                        , family_price_rank\n                        , family_tier\n                        , agreement_base_price\n                        , business_unit\n                        , source_system\n                        FROM  {{ source('party_base','ccdf_ps_fokus_x_party_base__agreement')}}\n                        WHERE sub_subscriber_id IN (SELECT subscriber_id FROM gross_churn) AND service_type_id = 'P' \n                        ) full_agr\n        ON grouped_agr.AGREEMENT_ID = full_agr.AGREEMENT_ID AND grouped_agr.SUB_SUBSCRIBER_ID = full_agr.SUB_SUBSCRIBER_ID\n        AND grouped_agr.VALID_TO = full_agr.VALID_TO\n        LEFT JOIN {{ source('party_base', 'ccdf_ps_fokus_x_party_base__product_c')}}  prod\n        ON prod.product_key = full_agr.product_key AND full_agr.valid_to BETWEEN prod.valid_from and prod.valid_to\n        WHERE prod.main_product_flag = 1\n        QUALIFY rownum = 1\n        )\n\n\n, not_family_indication as \n(\n    SELECT \n    counted.cnt\n    , counted.ave\n    , full_rank.subscriber_no\n    , full_rank.ban\n    , full_rank.soc\n    , full_rank.rank\n    , full_rank.tier_level_code\n    , full_rank.valid_from\n    , full_rank.valid_to\n    FROM {{ source('party_base', 'ccdf_ps_fokus_x_party_base__subscriber_family_rank_c')}} full_rank\n    LEFT JOIN \n        (\n            SELECT \n            ban\n            , valid_to\n            , COUNT(DISTINCT subscriber_no) cnt\n            , AVG(rank) as ave\n            FROM {{ source('party_base', 'ccdf_ps_fokus_x_party_base__subscriber_family_rank_c')}} \n            GROUP BY\n            ban\n            , valid_to\n        ) counted\n    ON full_rank.ban = counted.ban and full_rank.valid_to = counted.valid_to\n    WHERE cnt = 1 or (cnt >1 and ave = 1)\n)\n        \n\n\n\n, porting as\n(\n    SELECT\n    *\n    , ROW_NUMBER() OVER (PARTITION BY np_subscriber_id ORDER BY nvl(np_first_ext_complete_date, np_latest_conf_date) DESC) rownum \n    FROM \n        ( SELECT \n            port.np_int_order_id\n            , port.np_ext_order_id\n            , port.np_subscriber_id\n            , port.np_customer_id\n            , port.NP_DIRECTION\n            , port.np_order_date\n            , port.np_request_date\n            , port.np_latest_conf_date\n            , port.np_trx_code\n            , port.np_order_status\n            , port.np_status_change_date\n            , port.np_first_ext_complete_date\n            , port.from_operator_id\n            , port.to_operator_id\n                       \n        FROM    {{ source('party_base', 'ccdf_core_fokus_x_party_base__abt_porting')}} port\n        left join agreements  agr\n        on port.np_subscriber_id = agr.sub_subscriber_id\n        WHERE \n            port.NP_DIRECTION = 'PROUT' \n            and port.np_trx_code in ('115', '112') \n         and dateadd('D', 30, agr.valid_to) > port.np_order_date) a \n    QUALIFY rownum = 1\n) \n\n-- latest invoice for the latest agreement. If subscriber churned and the latest invoice has negative value, taking the second to last invoice to eliminate\n-- refunds. \n, last_discount_commitment as \n    (\n    Select \n    subscriber_id\n    , discount_code\n    , discount_rate\n    , benefit_start_ts\n    , benefit_end_ts --\n    from \n    {{ source('party_base', 'ccdf_abt_fokus_x_party_base__abt_commitment_benefit')}}\n    WHERE discount_code!='none'\n    Qualify\n    ROW_NUMBER() OVER (PARTITION BY subscriber_id ORDER BY benefit_end_ts desc ) = 1\n    \n    )\n\n, invoice as\n(\n\n   SELECT \n    inv.*\n    , CASE\n            WHEN invoice_date <= CURRENT_DATE() and invoice_price <= 0\n\n            THEN 0\n            ELSE 1\n      END as enumerate\n    FROM \n        (SELECT \n            inv_det.subscriber_id\n            , inv_det.account_id\n            , inv_det.ext_invoice_id\n            , inv_det.invoice_date\n            , sum(inv_det.amount_invoiced_recurring) invoice_price\n            , max(inv_det.agreement_id) as last_agreement_id\n        FROM {{ source('party_base', 'ccdf_ip_x_party_base__fok_abt_invoice_detail')}} inv_det \n        left join  (select distinct agreement_id,service_type_id from {{ source('party_base', 'ccdf_ps_fokus_x_party_base__agreement')}} )agr\n        ON agr.agreement_id = inv_det.agreement_id --and inv_det.invoice_date between agr.valid_from and dateadd('d', -1, agr.valid_to)\n        WHERE invoice_doc_code != 'CRD' \n        and service_type_id = 'P'\n        GROUP BY  \n            inv_det.subscriber_id\n            , inv_det.ext_invoice_id\n            , inv_det.account_id\n            , inv_det.invoice_date\n\n           ) inv\n        JOIN agreements ag\n        on ag.agreement_id = inv.last_agreement_id\n        where enumerate = 1\n        qualify ROW_NUMBER() OVER (PARTITION BY inv.subscriber_id,\n                                        CASE\n                                            WHEN invoice_date <= CURRENT_DATE() and invoice_price < 0\n                                            THEN 0\n                                            ELSE 1\n                                        END\n                        ORDER BY invoice_date desc) = 1\n)\n, discount_agreement_127 AS\n(\n    SELECT\n        subscriber_id\n        , SUM(agr.agreement_base_price) as discount\n    FROM {{ source('party_base', 'ccdf_ps_fokus_x_party_base__agreement')}} agr\n    LEFT JOIN agreements last_agr\n    ON agr.subscriber_id = last_agr.sub_subscriber_id\n    WHERE \n        agr.product_id = 'NGRC127'\n        AND \n        CASE\n            WHEN last_agr.valid_to > CURRENT_DATE() \n            THEN CURRENT_DATE()\n            ELSE last_agr.valid_to\n        END BETWEEN agr.valid_from AND CASE \n                                            WHEN agr.valid_to > CURRENT_DATE() \n                                            THEN CURRENT_DATE()\n                                            ELSE agr.valid_to\n                                       END\n    GROUP BY subscriber_id\n)\n, discount_agreement AS\n(\n    SELECT\n        subscriber_id\n        , SUM(agr.agreement_base_price) as discount\n    FROM {{ source('party_base', 'ccdf_ps_fokus_x_party_base__agreement')}} agr\n    LEFT JOIN agreements last_agr\n    ON agr.subscriber_id = last_agr.sub_subscriber_id\n    WHERE \n        left(agr.product_id, 4) = 'NGRC'\n        AND agr.product_id not in (select product_id from {{ source('party_base','ccdf_ps_fokus_x_party_base__product_c')}} where product_name like '%data%' and left(product_id, 4) = 'NGRC') \n        AND agr.product_id != 'NGRC127'\n        AND \n        CASE\n            WHEN last_agr.valid_to > CURRENT_DATE() \n            THEN CURRENT_DATE()\n            ELSE last_agr.valid_to\n        END BETWEEN agr.valid_from AND CASE \n                                            WHEN agr.valid_to > CURRENT_DATE() \n                                            THEN CURRENT_DATE()\n                                            ELSE agr.valid_to\n                                       END\n    GROUP BY subscriber_id\n)\n\n, ban_price_full AS \n(\n    SELECT\n     account_inv.*\n     , inv.invoice_price \n    FROM (\n        SELECT \n        account_id\n        , invoice_date\n        , agreement_id\n        FROM {{ source('party_base', 'ccdf_ip_x_party_base__fok_abt_invoice_detail')}}\n        WHERE agreement_id IN (SELECT agreement_id FROM agreements)\n        GROUP BY \n         account_id\n         , invoice_date\n         , agreement_id\n\n         ) account_inv\n    LEFT JOIN invoice inv\n    ON inv.account_id = account_inv.account_id AND inv.last_agreement_id = account_inv.agreement_id\n)\n\n, ban_last_invoice AS\n(\n    SELECT\n     account_id\n     , agreement_id\n     , MAX(invoice_date) max_date\n    FROM ban_price_full\n    GROUP BY\n     account_id\n     , agreement_id\n)\n\n, total_ban_price AS\n(\n    SELECT\n     bli2.*\n     , grouped.total_ban_price\n    FROM \n        (\n            SELECT\n                bli.account_id\n                , max_date\n                , SUM(bpf.invoice_price)/COUNT(DISTINCT bli.agreement_id) AS total_ban_price \n            FROM ban_price_full bpf\n            JOIN ban_last_invoice bli\n            ON bpf.account_id = bli.account_id AND bpf.invoice_date = bli.max_date \n            GROUP BY\n              bli.account_id\n              , max_date\n        ) grouped\n    JOIN ban_last_invoice bli2\n    ON bli2.account_id = grouped.account_id AND bli2.max_date = grouped.max_date )\n\n, base AS (\n\nSELECT\n\n sub_gc.SUBSCRIBER_KEY\n, sub.customer_id AS CUSTOMER_ID \n, case when sub.PARTY_ID_USER is null then ci.party_id else sub.party_id_user end AS PARTY_ID \n, agr.ACCOUNT_KEY\n, agr.PRODUCT_KEY as MAIN_PRODUCT_KEY\n, agr.DEALER_KEY\n, agr.account_id as BAN\n, agr.product_payment_type\n, acc.account_type_id \n, CASE\n    WHEN sub_gc.EVENT_NAME = 'A' AND agr.VALID_TO < CURRENT_DATE()\n    THEN agr.VALID_TO\n    ELSE sub_gc.event_date\n  END AS event_date\n, CASE \n    WHEN sub_gc.EVENT_NAME = 'A' AND agr.VALID_TO < CURRENT_DATE()\n    THEN 'C'\n    ELSE sub_gc.EVENT_NAME\n  END AS event_name\n, sub_gc.SUBSCRIBER_ID\n, agr.SUBSCRIBER_NO\n, gr_ch_dates.SUBSCRIBER_START_DATE AS SUBSCRIBER_START_DATE \n,DATEDIFF('D', gr_ch_dates.SUBSCRIBER_START_DATE, NVL(gr_ch_dates.LAST_CHURN_DATE, CURRENT_DATE())) AS SUBSCRIBER_LIFETIME\n, agr.ACCOUNT_ID \n, agr.agreement_id AS MAIN_AGREEMENT_ID \n, agr.PRODUCT_ID\n, agr.PRODUCT_NAME AS MAIN_PRODUCT_NAME \n, agr.VALID_FROM AS AGREEMENT_START_DATE \n, agr.VALID_TO AS AGREEMENT_END_DATE \n, DATEDIFF('D', agr.VALID_FROM, \n    CASE WHEN agr.VALID_TO > CURRENT_DATE() THEN CURRENT_DATE() ELSE agr.valid_to END ) AS LATEST_PRODUCT_LIFETIME \n, agr.DEALER_ID\n, agr.PRICEPLAN_GROUP_CODE\n, pp_hist_full.priceplan_cd prev_product_key\n, pp_hist_full.priceplan_desc as prev_product_name\n, pp_hist_full.pp_end_date as prev_product_end_date\n, pp_hist_full.pp_duration_days_cnt as prev_product_lifetime\n, CASE\n    WHEN family.rank = 1 AND fam.cnt is not null\n    THEN 0\n    ELSE\n        CASE\n            WHEN family.rank > 0\n            THEN 1\n        ELSE 0\n        END\n END as family_lines_flag\n, CASE\n    WHEN family_lines_flag = 1 \n    THEN family.rank\n    ELSE 0\n    END as family_rank\n, agreement_not_compressed.valid_from as latest_family_status_change\n, ba.total_ban_price as total_ban_price\n, ROUND(inv.invoice_price, 2) as invoice_price\n, inv.invoice_date as latest_invoice_date\n, agr.list_price as base_price\n, agr.agreement_base_price as line_price\n, ROUND(CASE \n    WHEN di_comm.discount_rate > 0 \n    AND (abs(datediff('d', inv.invoice_date, di_comm.benefit_end_ts)) < 25\n        OR inv.invoice_date < di_comm.benefit_end_ts)  \n    THEN  (1-nvl(di_comm.discount_rate,0))*agr.agreement_base_price\n    ELSE agr.agreement_base_price\n  END, 2) as discount_price \n\n, discount_price + nvl(da.discount,0) as telia_xstart_50nok_discount_price\n, telia_xstart_50nok_discount_price + nvl(da1.discount, 0) as additional_discount_price\n, comm.commit_start_date as commit_start_date\n, comm.commit_end_date as commit_end_date\n, camp.campaign_category_name as commitment_desc\n, comm.campaign_code as campaign_code\n, datediff('d', comm.commit_start_date, comm.commit_end_date) as commitment_time\n, datediff('d', comm.commit_end_date, current_date()) as days_since_commitment_ended\n, comm.discount_code as commit_discount_desc\n, comm.discount_rate as commit_discount_rate\n, di_comm.discount_code as last_active_discount\n, di_comm.benefit_start_ts as last_active_discount_start_date\n, di_comm.benefit_end_ts as last_active_discount_end_date\n, datediff('d', di_comm.benefit_start_ts, di_comm.benefit_end_ts) as discount_period \n, datediff('d', di_comm.benefit_end_ts, current_date())  as days_since_discount_ended\n, datediff('d', current_date(), di_comm.benefit_end_ts) as days_left_on_discount\n, CASE\n    WHEN \n        CASE \n            WHEN sub_gc.EVENT_NAME = 'A' AND agr.VALID_TO < CURRENT_DATE()\n            THEN 'C'\n            ELSE sub_gc.EVENT_NAME\n        END = 'C'\n    THEN port.NP_ORDER_DATE \n  END AS ORDER_OF_PORT_OUT \n, CASE \n    WHEN         \n        CASE \n            WHEN sub_gc.EVENT_NAME = 'A' AND agr.VALID_TO < CURRENT_DATE()\n            THEN 'C'\n            ELSE sub_gc.EVENT_NAME\n        END = 'C'\n    THEN port.NP_REQUEST_DATE \n  END AS REQUEST_OF_PORT_OUT  \n, CASE \n    WHEN sub_gc.event_name = 'A' and agr.valid_to < CURRENT_DATE()\n    THEN port.from_operator_id\n    WHEN sub_gc.event_name = 'C' \n    THEN nvl(sub_gc.from_operator_id, port.from_operator_id)\n    ELSE sub_gc.from_operator_id\n  END AS from_operator_id\n, op_from.operator_name FROM_OPERATOR_NAME \n, CASE \n    WHEN sub_gc.event_name = 'A' and agr.valid_to < CURRENT_DATE()\n    THEN port.to_operator_id\n    WHEN sub_gc.event_name = 'C' \n    THEN nvl(sub_gc.to_operator_id, port.to_operator_id)\n    ELSE sub_gc.to_operator_id\n  END AS to_operator_id\n, op_to.OPERATOR_NAME TO_OPERATOR_NAME \n, ci.city\n, ci.postcode\n, FLOOR(DATEDIFF( 'D', nvl(ci.dob, ci.birthdate), CURRENT_DATE())/365.25, 0) AS AGE\n, CASE \n    WHEN FLOOR(DATEDIFF( 'D', nvl(ci.dob, ci.birthdate), CURRENT_DATE())/365.25)  BETWEEN 0 AND 17 THEN '0-17'\n     WHEN FLOOR(DATEDIFF( 'D', nvl(ci.dob, ci.birthdate), CURRENT_DATE())/365.25)  BETWEEN 18 AND 29 THEN '18-29'\n      WHEN FLOOR(DATEDIFF( 'D', nvl(ci.dob, ci.birthdate), CURRENT_DATE())/365.25)  BETWEEN 30 AND 39 THEN '30-39'\n       WHEN FLOOR(DATEDIFF( 'D', nvl(ci.dob, ci.birthdate), CURRENT_DATE())/365.25)  BETWEEN 40 AND 49 THEN '40-49'\n        WHEN FLOOR(DATEDIFF( 'D', nvl(ci.dob, ci.birthdate), CURRENT_DATE())/365.25)  BETWEEN 50 AND 59 THEN '50-59'\n         WHEN FLOOR(DATEDIFF( 'D', nvl(ci.dob, ci.birthdate), CURRENT_DATE())/365.25)  BETWEEN 60 AND 69 THEN '60-69'\n          WHEN FLOOR(DATEDIFF( 'D', nvl(ci.dob, ci.birthdate), CURRENT_DATE())/365.25)  BETWEEN 70 AND 79 THEN '70-79'\n           WHEN FLOOR(DATEDIFF( 'D', nvl(ci.dob, ci.birthdate), CURRENT_DATE())/365.25)  BETWEEN 80 AND 89 THEN '80-89'\n            WHEN FLOOR(DATEDIFF( 'D', nvl(ci.dob, ci.birthdate), CURRENT_DATE())/365.25)  BETWEEN 90 AND 99 THEN '90-99'\n             WHEN FLOOR(DATEDIFF( 'D', nvl(ci.dob, ci.birthdate), CURRENT_DATE())/365.25)  BETWEEN 100 AND 109 THEN '100-109'\nEND AS age_bucket\n, CASE\n    WHEN dem.sarepta_gender = 'M' THEN 'Male'\n    WHEN dem.sarepta_gender = 'F' THEN 'Female'\n    ELSE  dem.sarepta_gender\n  END AS gender\n, CURRENT_TIMESTAMP () as run_ts\n\nFROM gross_churn sub_gc\n\nLEFT JOIN subscriber sub\nON sub_gc.subscriber_id = sub.subscriber_id\n\nLEFT JOIN subscriber_dates gr_ch_dates\nON sub_gc.SUBSCRIBER_ID = gr_ch_dates.SUBSCRIBER_ID  \n\nLEFT JOIN agreements  agr\nON agr.SUB_SUBSCRIBER_ID = sub_gc.SUBSCRIBER_ID and agr.rownum=1\n\n\nLEFT JOIN contact_info ci\non ci.subscriber_id = sub.subscriber_id \n\nLEFT JOIN demography dem \nON dem.customer_id = sub.customer_id\n\nLEFT JOIN porting port\nON port.np_subscriber_id = sub_gc.subscriber_id \n\n\nAND CASE\n        WHEN sub_gc.EVENT_NAME = 'A' AND agr.VALID_TO < CURRENT_DATE()\n        THEN agr.VALID_TO\n        ELSE sub_gc.event_date\n    END \nBETWEEN dateadd('D', -10, port.np_order_date) \nand dateadd('D', 30, greatest(port.np_order_date, port.np_request_date, port.np_latest_conf_date, nvl(port.np_status_change_date, '1970-01-01'), nvl(port.np_first_ext_complete_date, '1970-01-01')))\n\n\nLEFT JOIN  {{ source('party_base', 'ccdf_core_fokus_x_party_base__operator')}} op_from\nON op_from.operator_id = CASE \n                            WHEN sub_gc.event_name = 'A' and agr.valid_to < CURRENT_DATE()\n                            THEN port.from_operator_id\n                            WHEN sub_gc.event_name = 'C'\n                            THEN  nvl(sub_gc.from_operator_id, port.from_operator_id)\n                            ELSE sub_gc.from_operator_id\n                          END\n\nLEFT JOIN  {{ source('party_base', 'ccdf_core_fokus_x_party_base__operator')}} op_to\nON op_to.operator_id = CASE \n                            WHEN sub_gc.event_name = 'A' and agr.valid_to < CURRENT_DATE()\n                            THEN port.to_operator_id\n                            WHEN sub_gc.event_name = 'C' \n                            THEN nvl(sub_gc.to_operator_id, port.to_operator_id)\n                            ELSE sub_gc.to_operator_id\n                          END\n                          \nLEFT JOIN {{ref('ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change')}}  pp_hist\non pp_hist.agreement_key = agr.agreement_key and pp_hist.subscriber_id = sub_gc.subscriber_id\nand pp_hist.pp_end_date = agr.valid_to\n\nLEFT JOIn {{ref('ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change')}}  pp_hist_full\non pp_hist_full.pp_seq_cnt = pp_hist.pp_seq_cnt - 1 and pp_hist_full.subscriber_id = sub_gc.subscriber_id\n\nLEFT JOIN invoice inv\non inv.last_agreement_id = agr.agreement_id \nand agr.sub_subscriber_id = inv.subscriber_id\n\n\nLEFT JOIN discount_agreement_127 da\nON da.subscriber_id = sub_gc.subscriber_id \n\nLEFT JOIN discount_agreement da1\nON da1.subscriber_id = sub_gc.subscriber_id \n\nLEFT JOIN total_ban_price ba\nON ba.account_id = agr.account_id and ba.agreement_id = agr.agreement_id\n\nLEFT JOIN account acc\nON acc.account_key = agr.account_key\n\nLEFT JOIN not_family_indication fam\n\non fam.ban = agr.account_id\nand fam.subscriber_no = agr.subscriber_no\nand fam.valid_to = AGREEMENT_END_DATE\n\nLEFT JOIN {{ source( 'party_base', 'ccdf_ps_fokus_x_party_base__subscriber_family_rank_c')}} family\non\nfamily.ban = agr.account_id and \nfamily.subscriber_no = agr.SUBSCRIBER_NO\nand family.valid_to::date = agreement_end_date::date\n\nLEFT JOIN {{ source('party_base', 'ccdf_abt_fokus_x_party_base__abt_commitment_benefit')}} comm\nON comm.subscriber_id = agr.sub_subscriber_id\nAND agr.valid_from BETWEEN comm.commit_start_date AND dateadd('d', -1, comm.commit_end_date)\n\nLEFT JOIN {{ source('party_base', 'ccdf_ps_fokus_x_party_base__campaign_c')}} camp\nON camp.campaign_code = comm.campaign_code AND comm.commit_start_date BETWEEN camp.valid_from AND dateadd('D', -1, camp.valid_to) \n\nLEFT JOIN last_discount_commitment di_comm\nON di_comm.subscriber_id = agr.sub_subscriber_id\n\nLEFT JOIN {{ source('party_base', 'ccdf_ps_fokus_x_party_base__agreement_xtra_commitment_benefit')}} agr_comm \non agr_comm.agreement_id = agr.agreement_id \n\nLEFT JOIN {{ source('party_base', 'ccdf_ps_fokus_x_party_base__agreement')}} agreement_not_compressed\non agreement_not_compressed.agreement_id = agr.agreement_id and agreement_not_compressed.valid_to = agreement_end_date\n\n) \n\nselect DISTINCT * from base",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
                    "package": null,
                    "version": null
                },
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [
                [
                    "party_base",
                    "ccdf_core_fokus_x_party_base__abt_subscriber_grosschurn"
                ],
                [
                    "party_base",
                    "ccdf_core_fokus_x_party_base__subscriber_c"
                ],
                [
                    "party_base",
                    "ccdf_core_fokus_x_party_base__account_c"
                ],
                [
                    "party_base",
                    "ccdf_core_fokus_x_party_base__contact_info_c"
                ],
                [
                    "party_base",
                    "ccdf_core_fokus_x_party_base__contact_info_c"
                ],
                [
                    "party_analytics",
                    "ccdf_demographics_x__demography_household_link"
                ],
                [
                    "party_analytics",
                    "ccdf_demographics_x__demography"
                ],
                [
                    "party_base",
                    "ccdf_core_fokus_x_party_base__abt_subscriber_lifetime"
                ],
                [
                    "party_base",
                    "ccdf_ps_fokus_x_party_base__agreement"
                ],
                [
                    "party_base",
                    "ccdf_ps_fokus_x_party_base__agreement"
                ],
                [
                    "party_base",
                    "ccdf_ps_fokus_x_party_base__product_c"
                ],
                [
                    "party_base",
                    "ccdf_ps_fokus_x_party_base__subscriber_family_rank_c"
                ],
                [
                    "party_base",
                    "ccdf_ps_fokus_x_party_base__subscriber_family_rank_c"
                ],
                [
                    "party_base",
                    "ccdf_core_fokus_x_party_base__abt_porting"
                ],
                [
                    "party_base",
                    "ccdf_abt_fokus_x_party_base__abt_commitment_benefit"
                ],
                [
                    "party_base",
                    "ccdf_ip_x_party_base__fok_abt_invoice_detail"
                ],
                [
                    "party_base",
                    "ccdf_ps_fokus_x_party_base__agreement"
                ],
                [
                    "party_base",
                    "ccdf_ps_fokus_x_party_base__agreement"
                ],
                [
                    "party_base",
                    "ccdf_ps_fokus_x_party_base__agreement"
                ],
                [
                    "party_base",
                    "ccdf_ps_fokus_x_party_base__product_c"
                ],
                [
                    "party_base",
                    "ccdf_ip_x_party_base__fok_abt_invoice_detail"
                ],
                [
                    "party_base",
                    "ccdf_core_fokus_x_party_base__operator"
                ],
                [
                    "party_base",
                    "ccdf_core_fokus_x_party_base__operator"
                ],
                [
                    "party_base",
                    "ccdf_ps_fokus_x_party_base__subscriber_family_rank_c"
                ],
                [
                    "party_base",
                    "ccdf_abt_fokus_x_party_base__abt_commitment_benefit"
                ],
                [
                    "party_base",
                    "ccdf_ps_fokus_x_party_base__campaign_c"
                ],
                [
                    "party_base",
                    "ccdf_ps_fokus_x_party_base__agreement_xtra_commitment_benefit"
                ],
                [
                    "party_base",
                    "ccdf_ps_fokus_x_party_base__agreement"
                ]
            ],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.telia_analytics_no.set_warehouse_size",
                    "macro.telia_analytics_no.create_compatibility_view"
                ],
                "nodes": [
                    "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__abt_subscriber_grosschurn",
                    "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__subscriber_c",
                    "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__account_c",
                    "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__contact_info_c",
                    "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_demographics_x__demography_household_link",
                    "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_demographics_x__demography",
                    "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__abt_subscriber_lifetime",
                    "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_ps_fokus_x_party_base__agreement",
                    "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_ps_fokus_x_party_base__product_c",
                    "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_ps_fokus_x_party_base__subscriber_family_rank_c",
                    "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__abt_porting",
                    "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_abt_fokus_x_party_base__abt_commitment_benefit",
                    "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_ip_x_party_base__fok_abt_invoice_detail",
                    "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__operator",
                    "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_ps_fokus_x_party_base__campaign_c",
                    "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_ps_fokus_x_party_base__agreement_xtra_commitment_benefit",
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null,
            "primary_key": [
                "subscriber_id",
                "subscriber_key"
            ],
            "time_spine": null
        },
        "test.ccdf_xtra_ps_fokus_x.abt_extended_subscriber_age_test": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "abt_extended_subscriber_age_test",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "abt_extended_subscriber_age_test.sql",
            "original_file_path": "tests/abt_extended_subscriber_age_test.sql",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.abt_extended_subscriber_age_test",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "abt_extended_subscriber_age_test"
            ],
            "alias": "abt_extended_subscriber_age_test",
            "checksum": {
                "name": "sha256",
                "checksum": "c39a6ca7554d1b8e8a42227d5f7f69e52e81846b797d9eacf4b63bd57c62b665"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/tests/abt_extended_subscriber_age_test.sql",
            "unrendered_config": {
                "severity": "warn"
            },
            "created_at": 1744635193.9869719,
            "relation_name": null,
            "raw_code": "SELECT\n* \nFROM {{ ref('ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber') }} abt\nLEFT JOIN \n    (SELECT\n        *\n        , ROW_NUMBER() OVER (PARTITION BY subscriber_id, account_key ORDER BY valid_to DESC) rownum\n    FROM {{ source('party_base', 'ccdf_core_fokus_x_party_base__contact_info_c') }}\n    QUALIFY rownum = 1 ) inf\nON inf.subscriber_id = abt.subscriber_id AND inf.account_key = abt.account_key\nWHERE inf.dob IS NOT NULL AND abt.age IS NULL AND inf.source_system = 'FOK'",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [
                [
                    "party_base",
                    "ccdf_core_fokus_x_party_base__contact_info_c"
                ]
            ],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__contact_info_c",
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/tests/abt_extended_subscriber_age_test.sql",
            "compiled": true,
            "compiled_code": "SELECT\n* \nFROM NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber abt\nLEFT JOIN \n    (SELECT\n        *\n        , ROW_NUMBER() OVER (PARTITION BY subscriber_id, account_key ORDER BY valid_to DESC) rownum\n    FROM NGA_DB_RAFT.party_base.ccdf_core_fokus_x_party_base__contact_info_c\n    QUALIFY rownum = 1 ) inf\nON inf.subscriber_id = abt.subscriber_id AND inf.account_key = abt.account_key\nWHERE inf.dob IS NOT NULL AND abt.age IS NULL AND inf.source_system = 'FOK'",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.abt_product_change_duplicate_test": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "abt_product_change_duplicate_test",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "abt_product_change_duplicate_test.sql",
            "original_file_path": "tests/abt_product_change_duplicate_test.sql",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.abt_product_change_duplicate_test",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "abt_product_change_duplicate_test"
            ],
            "alias": "abt_product_change_duplicate_test",
            "checksum": {
                "name": "sha256",
                "checksum": "00ab17c2b95b72e16f5c904533b58693572faf89bc8be951541ae4e03533cc68"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/tests/abt_product_change_duplicate_test.sql",
            "unrendered_config": {
                "severity": "warn"
            },
            "created_at": 1744635193.9913468,
            "relation_name": null,
            "raw_code": "select \ncount(*)\nfrom \n(select \nsubscriber_id,\npp_start_date,\npp_end_date,\ncount(*)\nfrom {{ ref('ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change') }} base\ngroup by subscriber_id,\npp_start_date,\npp_end_date\nhaving count(*) > 1)\nhaving count(*) > 1",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/tests/abt_product_change_duplicate_test.sql",
            "compiled": true,
            "compiled_code": "select \ncount(*)\nfrom \n(select \nsubscriber_id,\npp_start_date,\npp_end_date,\ncount(*)\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change base\ngroup by subscriber_id,\npp_start_date,\npp_end_date\nhaving count(*) > 1)\nhaving count(*) > 1",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.abt_product_change_scope_test.1": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "abt_product_change_scope_test.1",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "abt_product_change_scope_test.1.sql",
            "original_file_path": "tests/abt_product_change_scope_test.1.sql",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.abt_product_change_scope_test.1",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "abt_product_change_scope_test.1"
            ],
            "alias": "abt_product_change_scope_test.1",
            "checksum": {
                "name": "sha256",
                "checksum": "8bebee643eb4994851b135f53e419ef2d9baa5d54bb507f09fe31d8dc2967d03"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/tests/abt_product_change_scope_test.1.sql",
            "unrendered_config": {
                "severity": "warn"
            },
            "created_at": 1744635193.992904,
            "relation_name": null,
            "raw_code": "select *\nfrom {{ source('party_analytics', 'ccdf_abt_x__abt_main_product_change') }}  ch\nleft join {{ ref('ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change') }} pro\non pro.subscriber_key = ch.subscriber_key\nwhere pro.subscriber_id is null\nand ch.source_system = 'FOK'\nand ch.subscriber_key!='MI'",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [
                [
                    "party_analytics",
                    "ccdf_abt_x__abt_main_product_change"
                ]
            ],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_abt_x__abt_main_product_change",
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/tests/abt_product_change_scope_test.1.sql",
            "compiled": true,
            "compiled_code": "select *\nfrom NGA_DB_RAFT.party_analytics.ccdf_abt_x__abt_main_product_change  ch\nleft join NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change pro\non pro.subscriber_key = ch.subscriber_key\nwhere pro.subscriber_id is null\nand ch.source_system = 'FOK'\nand ch.subscriber_key!='MI'",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.abt_product_change_count_test3": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "abt_product_change_count_test3",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "abt_product_change_count_test3.sql",
            "original_file_path": "tests/abt_product_change_count_test3.sql",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.abt_product_change_count_test3",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "abt_product_change_count_test3"
            ],
            "alias": "abt_product_change_count_test3",
            "checksum": {
                "name": "sha256",
                "checksum": "6bfca70432ed99602f2c5f64b61fb22f5720172a4dd6d150a52db148923cb3c6"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/tests/abt_product_change_count_test3.sql",
            "unrendered_config": {
                "severity": "warn"
            },
            "created_at": 1744635193.994401,
            "relation_name": null,
            "raw_code": "select count(*) from {{ ref('ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change') }} where subscriber_id =  '1654855'  having count(*) != 10",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/tests/abt_product_change_count_test3.sql",
            "compiled": true,
            "compiled_code": "select count(*) from NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change where subscriber_id =  '1654855'  having count(*) != 10",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.abt_product_change_count_test2": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "abt_product_change_count_test2",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "abt_product_change_count_test2.sql",
            "original_file_path": "tests/abt_product_change_count_test2.sql",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.abt_product_change_count_test2",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "abt_product_change_count_test2"
            ],
            "alias": "abt_product_change_count_test2",
            "checksum": {
                "name": "sha256",
                "checksum": "5d45cd51f7052c6d576938481e8cbcc3532a6cc9e058d9e6dfc3c8b89d9be1fa"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/tests/abt_product_change_count_test2.sql",
            "unrendered_config": {
                "severity": "warn"
            },
            "created_at": 1744635193.995757,
            "relation_name": null,
            "raw_code": "select count(*) from {{ ref('ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change') }} \nwhere subscriber_id = '17893114' \nand pp_end_date <= '2024-05-31'\nhaving count(*) != 25",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/tests/abt_product_change_count_test2.sql",
            "compiled": true,
            "compiled_code": "select count(*) from NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change \nwhere subscriber_id = '17893114' \nand pp_end_date <= '2024-05-31'\nhaving count(*) != 25",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.abt_product_change_count_test1": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "abt_product_change_count_test1",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "abt_product_change_count_test1.sql",
            "original_file_path": "tests/abt_product_change_count_test1.sql",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.abt_product_change_count_test1",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "abt_product_change_count_test1"
            ],
            "alias": "abt_product_change_count_test1",
            "checksum": {
                "name": "sha256",
                "checksum": "792243c72dccfb9643a56dda6abdb63efa2863a654384785ef163db57336d947"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/tests/abt_product_change_count_test1.sql",
            "unrendered_config": {
                "severity": "warn"
            },
            "created_at": 1744635193.997836,
            "relation_name": null,
            "raw_code": "select count(*) from {{ ref('ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change') }}\nwhere subscriber_id = '11945679' \nand pp_end_date <= '2020-03-27'\nhaving count(*) != 15",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/tests/abt_product_change_count_test1.sql",
            "compiled": true,
            "compiled_code": "select count(*) from NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change\nwhere subscriber_id = '11945679' \nand pp_end_date <= '2020-03-27'\nhaving count(*) != 15",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.abt_product_change_count_test": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "abt_product_change_count_test",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "abt_product_change_count_test.sql",
            "original_file_path": "tests/abt_product_change_count_test.sql",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.abt_product_change_count_test",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "abt_product_change_count_test"
            ],
            "alias": "abt_product_change_count_test",
            "checksum": {
                "name": "sha256",
                "checksum": "eb50661b3672aa4e4bf233e7e2b621607b6126d2a804fbd613285a422da6b397"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/tests/abt_product_change_count_test.sql",
            "unrendered_config": {
                "severity": "warn"
            },
            "created_at": 1744635193.999254,
            "relation_name": null,
            "raw_code": "select count(*) from {{ ref('ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change') }} \nwhere subscriber_id = '13481218'  \nand pp_end_date <= '2023-06-01'\nhaving count(*) != 7",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/tests/abt_product_change_count_test.sql",
            "compiled": true,
            "compiled_code": "select count(*) from NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change \nwhere subscriber_id = '13481218'  \nand pp_end_date <= '2023-06-01'\nhaving count(*) != 7",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.abt_product_change_content_test1": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "abt_product_change_content_test1",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "abt_product_change_content_test1.sql",
            "original_file_path": "tests/abt_product_change_content_test1.sql",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.abt_product_change_content_test1",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "abt_product_change_content_test1"
            ],
            "alias": "abt_product_change_content_test1",
            "checksum": {
                "name": "sha256",
                "checksum": "aef942e5f55eb0e1e9bc8b766e1496df152b2a5ef1d8c6688cdb7baecaf1ef57"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/tests/abt_product_change_content_test1.sql",
            "unrendered_config": {
                "severity": "warn"
            },
            "created_at": 1744635194.0005891,
            "relation_name": null,
            "raw_code": "select ch.recurring_amt, pro.list_price, ch.*\nfrom    {{ ref('ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change') }} ch \nleft join    {{ source('party_analytics', 'ccdf_abt_x__abt_main_product_change') }} pro\non pro.subscriber_key = ch.subscriber_key and pro.account_key = ch.account_key\nand pro.agreement_key = ch.agreement_key and pro.valid_to = ch.pp_end_date\n\nwhere pro.list_price != ch.recurring_amt\nor pro.gb_included != ch.gb_included\nor pro.product_key != ch.product_key\nor pro.family_flag != ch.family_flag\nor pro.min_commit_period != ch.min_commit_period\nor pro.campaign_code != ch.campaign_code",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [
                [
                    "party_analytics",
                    "ccdf_abt_x__abt_main_product_change"
                ]
            ],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_abt_x__abt_main_product_change",
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/tests/abt_product_change_content_test1.sql",
            "compiled": true,
            "compiled_code": "select ch.recurring_amt, pro.list_price, ch.*\nfrom    NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change ch \nleft join    NGA_DB_RAFT.party_analytics.ccdf_abt_x__abt_main_product_change pro\non pro.subscriber_key = ch.subscriber_key and pro.account_key = ch.account_key\nand pro.agreement_key = ch.agreement_key and pro.valid_to = ch.pp_end_date\n\nwhere pro.list_price != ch.recurring_amt\nor pro.gb_included != ch.gb_included\nor pro.product_key != ch.product_key\nor pro.family_flag != ch.family_flag\nor pro.min_commit_period != ch.min_commit_period\nor pro.campaign_code != ch.campaign_code",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.failed_test_test": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "failed_test_test",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "failed_test_test.sql",
            "original_file_path": "tests/failed_test_test.sql",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.failed_test_test",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "failed_test_test"
            ],
            "alias": "failed_test_test",
            "checksum": {
                "name": "sha256",
                "checksum": "98319db899e8ab35c9d486bc6f76fdbac7fe6ae22095719c4feee29927442d66"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/tests/failed_test_test.sql",
            "unrendered_config": {
                "severity": "warn"
            },
            "created_at": 1744635194.0021539,
            "relation_name": null,
            "raw_code": "select ch.account_key, ch.subscriber_id\nfrom {{ ref('ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change') }}  ch\nleft join {{ ref('ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber') }} pro\non pro.subscriber_key = ch.subscriber_key\nlimit 20",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
                    "package": null,
                    "version": null
                },
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/tests/failed_test_test.sql",
            "compiled": true,
            "compiled_code": "select ch.account_key, ch.subscriber_id\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change  ch\nleft join NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber pro\non pro.subscriber_key = ch.subscriber_key\nlimit 20",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.abt_extended_subscriber_portout_test": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "abt_extended_subscriber_portout_test",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "abt_extended_subscriber_portout_test.sql",
            "original_file_path": "tests/abt_extended_subscriber_portout_test.sql",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.abt_extended_subscriber_portout_test",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "abt_extended_subscriber_portout_test"
            ],
            "alias": "abt_extended_subscriber_portout_test",
            "checksum": {
                "name": "sha256",
                "checksum": "0d96724edf3d2b3d9a2e2cee26acff249ab3824da27bd907c1d8b34fb848ff13"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/tests/abt_extended_subscriber_portout_test.sql",
            "unrendered_config": {
                "severity": "warn"
            },
            "created_at": 1744635194.0037818,
            "relation_name": null,
            "raw_code": "select \n* \nfrom {{ ref('ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber') }} base\njoin (\n    select\n        np_subscriber_id, \n        max(greatest(np_order_date, np_request_date, np_latest_conf_date, nvl(np_status_change_date, '1970-01-01'), nvl(np_first_ext_complete_date, '1970-01-01'))) max_date \n    from  {{ source('party_base', 'ccdf_core_fokus_x_party_base__abt_porting') }}  where np_direction = 'PROUT' and np_trx_code in ('115', '112')\n\n    group by np_subscriber_id ) port\non base.subscriber_id = port.np_subscriber_id\nwhere \nbase.event_name = 'C'\nand base.from_operator_id is not null\nand base.request_of_port_out is null\nand abs(datediff('D' , port.max_date, base.event_date)) < 30",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [
                [
                    "party_base",
                    "ccdf_core_fokus_x_party_base__abt_porting"
                ]
            ],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__abt_porting",
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/tests/abt_extended_subscriber_portout_test.sql",
            "compiled": true,
            "compiled_code": "select \n* \nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber base\njoin (\n    select\n        np_subscriber_id, \n        max(greatest(np_order_date, np_request_date, np_latest_conf_date, nvl(np_status_change_date, '1970-01-01'), nvl(np_first_ext_complete_date, '1970-01-01'))) max_date \n    from  NGA_DB_RAFT.party_base.ccdf_core_fokus_x_party_base__abt_porting  where np_direction = 'PROUT' and np_trx_code in ('115', '112')\n\n    group by np_subscriber_id ) port\non base.subscriber_id = port.np_subscriber_id\nwhere \nbase.event_name = 'C'\nand base.from_operator_id is not null\nand base.request_of_port_out is null\nand abs(datediff('D' , port.max_date, base.event_date)) < 30",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            }
        },
        "operation.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x-on-run-end-0": {
            "database": "NGA_DB_RAFT",
            "schema": "WORK",
            "name": "ccdf_xtra_ps_fokus_x-on-run-end-0",
            "resource_type": "operation",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "hooks/ccdf_xtra_ps_fokus_x-on-run-end-0.sql",
            "original_file_path": "./dbt_project.yml",
            "unique_id": "operation.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x-on-run-end-0",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "hooks",
                "ccdf_xtra_ps_fokus_x-on-run-end-0"
            ],
            "alias": "ccdf_xtra_ps_fokus_x-on-run-end-0",
            "checksum": {
                "name": "sha256",
                "checksum": "d2c0244a5951e9347b7056fd28999db65f10ab562ed7b342e8da8722d0167820"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {
                    "util_tags": {
                        "PRODUCER": "dbt"
                    }
                },
                "group": null,
                "materialized": "view",
                "incremental_strategy": null,
                "batch_size": null,
                "lookback": 1,
                "begin": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [
                    {
                        "sql": "{{ telia_analytics_no.set_warehouse_size(this) }}",
                        "transaction": true,
                        "index": null
                    }
                ],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "event_time": null,
                "concurrent_batches": null,
                "transient": false,
                "query_tag": "ccdf_xtra_ps_fokus_x"
            },
            "tags": [
                "on-run-end"
            ],
            "description": "",
            "columns": {},
            "meta": {
                "util_tags": {
                    "PRODUCER": "dbt"
                }
            },
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/./dbt_project.yml/hooks/ccdf_xtra_ps_fokus_x-on-run-end-0.sql",
            "unrendered_config": {
                "transient": false,
                "query_tag": "ccdf_xtra_ps_fokus_x",
                "pre-hook": [
                    "{{ telia_analytics_no.set_warehouse_size(this) }}"
                ],
                "meta": {
                    "util_tags": {
                        "PRODUCER": "dbt"
                    }
                }
            },
            "created_at": 1744635194.046419,
            "relation_name": null,
            "raw_code": "{{ telia_analytics_no.apply_meta_util_tags(results) }} {{ telia_analytics_no.apply_tests_pass(results) }}",
            "language": "sql",
            "refs": [],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.telia_analytics_no.apply_meta_util_tags",
                    "macro.telia_analytics_no.apply_tests_pass",
                    "macro.telia_analytics_no.set_warehouse_size"
                ],
                "nodes": []
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/./dbt_project.yml/hooks/ccdf_xtra_ps_fokus_x-on-run-end-0.sql",
            "compiled": true,
            "compiled_code": " \n    \n\n\n\n\n\n\n    \n\n    \n    \n        \n        \n    \n    \n    \n\n       \n    \n    \n    \n    \n    \n   \n        \n    \n    \n    \n    \n    \n    \n                \n    \n        \n            \n            \n            \n            \n                    \n                        \n                \n            \n            \n                \n                \n                \n      \n            \n                \n    \n        \n            \n            \n            \n            \n                    \n                        \n                \n            \n            \n                \n                \n                \n      \n            \n                \n    \n                \n    \n                \n    \n                \n    \n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "index": 1
        },
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_account_key.df2f022f32": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_account_key",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "not_null_ccdf_xtra_ps_fokus_x__754665ffc041559c59ddd71f492493e5.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_account_key.df2f022f32",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_account_key"
            ],
            "alias": "not_null_ccdf_xtra_ps_fokus_x__754665ffc041559c59ddd71f492493e5",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "not_null_ccdf_xtra_ps_fokus_x__754665ffc041559c59ddd71f492493e5",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__754665ffc041559c59ddd71f492493e5.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "not_null_ccdf_xtra_ps_fokus_x__754665ffc041559c59ddd71f492493e5"
            },
            "created_at": 1744635194.195005,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_ccdf_xtra_ps_fokus_x__754665ffc041559c59ddd71f492493e5\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__754665ffc041559c59ddd71f492493e5.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect account_key\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change\nwhere account_key is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "account_key",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "account_key",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_account_key__account_key__source_party_analytics_ccdf_abt_x__abt_main_product_change_.7f5c190a98": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_account_key__account_key__source_party_analytics_ccdf_abt_x__abt_main_product_change_",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "relationships_ccdf_xtra_ps_fok_f695df714b4b24c26c069ba415e8a4d0.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_account_key__account_key__source_party_analytics_ccdf_abt_x__abt_main_product_change_.7f5c190a98",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_account_key__account_key__source_party_analytics_ccdf_abt_x__abt_main_product_change_"
            ],
            "alias": "relationships_ccdf_xtra_ps_fok_f695df714b4b24c26c069ba415e8a4d0",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "relationships_ccdf_xtra_ps_fok_f695df714b4b24c26c069ba415e8a4d0",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/relationships_ccdf_xtra_ps_fok_f695df714b4b24c26c069ba415e8a4d0.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "relationships_ccdf_xtra_ps_fok_f695df714b4b24c26c069ba415e8a4d0"
            },
            "created_at": 1744635194.19577,
            "relation_name": null,
            "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_ccdf_xtra_ps_fok_f695df714b4b24c26c069ba415e8a4d0\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [
                [
                    "party_analytics",
                    "ccdf_abt_x__abt_main_product_change"
                ]
            ],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_relationships",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_abt_x__abt_main_product_change",
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/relationships_ccdf_xtra_ps_fok_f695df714b4b24c26c069ba415e8a4d0.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\nwith child as (\n    select account_key as from_field\n    from NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change\n    where account_key is not null\n),\n\nparent as (\n    select account_key as to_field\n    from NGA_DB_RAFT.party_analytics.ccdf_abt_x__abt_main_product_change\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "account_key",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "test_metadata": {
                "name": "relationships",
                "kwargs": {
                    "to": "source('party_analytics', 'ccdf_abt_x__abt_main_product_change')",
                    "field": "account_key",
                    "column_name": "account_key",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_agreement_key.3ea93ffacb": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_agreement_key",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "not_null_ccdf_xtra_ps_fokus_x__69923c9960fcde206f1a445db2e8337b.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_agreement_key.3ea93ffacb",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_agreement_key"
            ],
            "alias": "not_null_ccdf_xtra_ps_fokus_x__69923c9960fcde206f1a445db2e8337b",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "not_null_ccdf_xtra_ps_fokus_x__69923c9960fcde206f1a445db2e8337b",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__69923c9960fcde206f1a445db2e8337b.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "not_null_ccdf_xtra_ps_fokus_x__69923c9960fcde206f1a445db2e8337b"
            },
            "created_at": 1744635194.204062,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_ccdf_xtra_ps_fokus_x__69923c9960fcde206f1a445db2e8337b\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__69923c9960fcde206f1a445db2e8337b.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect agreement_key\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change\nwhere agreement_key is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "agreement_key",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "agreement_key",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_agreement_key__agreement_key__source_party_analytics_ccdf_abt_x__abt_main_product_change_.c2e2b7bd9d": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_agreement_key__agreement_key__source_party_analytics_ccdf_abt_x__abt_main_product_change_",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "relationships_ccdf_xtra_ps_fok_cb10ac225391ed1905ffd2149d336c40.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_agreement_key__agreement_key__source_party_analytics_ccdf_abt_x__abt_main_product_change_.c2e2b7bd9d",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_agreement_key__agreement_key__source_party_analytics_ccdf_abt_x__abt_main_product_change_"
            ],
            "alias": "relationships_ccdf_xtra_ps_fok_cb10ac225391ed1905ffd2149d336c40",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "relationships_ccdf_xtra_ps_fok_cb10ac225391ed1905ffd2149d336c40",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/relationships_ccdf_xtra_ps_fok_cb10ac225391ed1905ffd2149d336c40.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "relationships_ccdf_xtra_ps_fok_cb10ac225391ed1905ffd2149d336c40"
            },
            "created_at": 1744635194.204652,
            "relation_name": null,
            "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_ccdf_xtra_ps_fok_cb10ac225391ed1905ffd2149d336c40\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [
                [
                    "party_analytics",
                    "ccdf_abt_x__abt_main_product_change"
                ]
            ],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_relationships",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_abt_x__abt_main_product_change",
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/relationships_ccdf_xtra_ps_fok_cb10ac225391ed1905ffd2149d336c40.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\nwith child as (\n    select agreement_key as from_field\n    from NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change\n    where agreement_key is not null\n),\n\nparent as (\n    select agreement_key as to_field\n    from NGA_DB_RAFT.party_analytics.ccdf_abt_x__abt_main_product_change\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "agreement_key",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "test_metadata": {
                "name": "relationships",
                "kwargs": {
                    "to": "source('party_analytics', 'ccdf_abt_x__abt_main_product_change')",
                    "field": "agreement_key",
                    "column_name": "agreement_key",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_pp_price_downgrade_flag.d598c7f294": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_pp_price_downgrade_flag",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "not_null_ccdf_xtra_ps_fokus_x__6e6048b3f99ca32c3a695080c9cde495.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_pp_price_downgrade_flag.d598c7f294",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_pp_price_downgrade_flag"
            ],
            "alias": "not_null_ccdf_xtra_ps_fokus_x__6e6048b3f99ca32c3a695080c9cde495",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "not_null_ccdf_xtra_ps_fokus_x__6e6048b3f99ca32c3a695080c9cde495",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__6e6048b3f99ca32c3a695080c9cde495.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "not_null_ccdf_xtra_ps_fokus_x__6e6048b3f99ca32c3a695080c9cde495"
            },
            "created_at": 1744635194.2064772,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_ccdf_xtra_ps_fokus_x__6e6048b3f99ca32c3a695080c9cde495\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__6e6048b3f99ca32c3a695080c9cde495.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect pp_price_downgrade_flag\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change\nwhere pp_price_downgrade_flag is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "pp_price_downgrade_flag",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "pp_price_downgrade_flag",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_pp_price_downgrade_flag__1__0.07157bbdf1": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_pp_price_downgrade_flag__1__0",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "accepted_values_ccdf_xtra_ps_f_0632dfafe1e6cbfa2f2598b3ef044af2.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_pp_price_downgrade_flag__1__0.07157bbdf1",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_pp_price_downgrade_flag__1__0"
            ],
            "alias": "accepted_values_ccdf_xtra_ps_f_0632dfafe1e6cbfa2f2598b3ef044af2",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "accepted_values_ccdf_xtra_ps_f_0632dfafe1e6cbfa2f2598b3ef044af2",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/accepted_values_ccdf_xtra_ps_f_0632dfafe1e6cbfa2f2598b3ef044af2.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "accepted_values_ccdf_xtra_ps_f_0632dfafe1e6cbfa2f2598b3ef044af2"
            },
            "created_at": 1744635194.2070038,
            "relation_name": null,
            "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_ccdf_xtra_ps_f_0632dfafe1e6cbfa2f2598b3ef044af2\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_accepted_values",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/accepted_values_ccdf_xtra_ps_f_0632dfafe1e6cbfa2f2598b3ef044af2.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        pp_price_downgrade_flag as value_field,\n        count(*) as n_records\n\n    from NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change\n    group by pp_price_downgrade_flag\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '1','0'\n)\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "pp_price_downgrade_flag",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "test_metadata": {
                "name": "accepted_values",
                "kwargs": {
                    "values": [
                        "1",
                        "0"
                    ],
                    "column_name": "pp_price_downgrade_flag",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_subscriber_no.59d7071e8c": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_subscriber_no",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "not_null_ccdf_xtra_ps_fokus_x__8df6e0075d8f4885b19b821163e6f21b.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_subscriber_no.59d7071e8c",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_subscriber_no"
            ],
            "alias": "not_null_ccdf_xtra_ps_fokus_x__8df6e0075d8f4885b19b821163e6f21b",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "not_null_ccdf_xtra_ps_fokus_x__8df6e0075d8f4885b19b821163e6f21b",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__8df6e0075d8f4885b19b821163e6f21b.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "not_null_ccdf_xtra_ps_fokus_x__8df6e0075d8f4885b19b821163e6f21b"
            },
            "created_at": 1744635194.2104251,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_ccdf_xtra_ps_fokus_x__8df6e0075d8f4885b19b821163e6f21b\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__8df6e0075d8f4885b19b821163e6f21b.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect subscriber_no\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change\nwhere subscriber_no is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "subscriber_no",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "subscriber_no",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_subscriber_no__subscriber_no__source_party_analytics_ccdf_x__agreement_.961f090303": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_subscriber_no__subscriber_no__source_party_analytics_ccdf_x__agreement_",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "relationships_ccdf_xtra_ps_fok_852284c16dc3bc7a11ffebbf804249b4.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_subscriber_no__subscriber_no__source_party_analytics_ccdf_x__agreement_.961f090303",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_subscriber_no__subscriber_no__source_party_analytics_ccdf_x__agreement_"
            ],
            "alias": "relationships_ccdf_xtra_ps_fok_852284c16dc3bc7a11ffebbf804249b4",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "relationships_ccdf_xtra_ps_fok_852284c16dc3bc7a11ffebbf804249b4",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/relationships_ccdf_xtra_ps_fok_852284c16dc3bc7a11ffebbf804249b4.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "relationships_ccdf_xtra_ps_fok_852284c16dc3bc7a11ffebbf804249b4"
            },
            "created_at": 1744635194.2110379,
            "relation_name": null,
            "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_ccdf_xtra_ps_fok_852284c16dc3bc7a11ffebbf804249b4\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [
                [
                    "party_analytics",
                    "ccdf_x__agreement"
                ]
            ],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_relationships",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_x__agreement",
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/relationships_ccdf_xtra_ps_fok_852284c16dc3bc7a11ffebbf804249b4.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\nwith child as (\n    select subscriber_no as from_field\n    from NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change\n    where subscriber_no is not null\n),\n\nparent as (\n    select subscriber_no as to_field\n    from NGA_DB_RAFT.party_analytics.ccdf_x__agreement\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "subscriber_no",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "test_metadata": {
                "name": "relationships",
                "kwargs": {
                    "to": "source('party_analytics', 'ccdf_x__agreement')",
                    "field": "subscriber_no",
                    "column_name": "subscriber_no",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_active_port_out_flag.761663cbff": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_active_port_out_flag",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "not_null_ccdf_xtra_ps_fokus_x__4d9b2248541a1b6e1ba421fb73bb7cd7.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_active_port_out_flag.761663cbff",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_active_port_out_flag"
            ],
            "alias": "not_null_ccdf_xtra_ps_fokus_x__4d9b2248541a1b6e1ba421fb73bb7cd7",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "not_null_ccdf_xtra_ps_fokus_x__4d9b2248541a1b6e1ba421fb73bb7cd7",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__4d9b2248541a1b6e1ba421fb73bb7cd7.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "not_null_ccdf_xtra_ps_fokus_x__4d9b2248541a1b6e1ba421fb73bb7cd7"
            },
            "created_at": 1744635194.212756,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_ccdf_xtra_ps_fokus_x__4d9b2248541a1b6e1ba421fb73bb7cd7\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__4d9b2248541a1b6e1ba421fb73bb7cd7.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect active_port_out_flag\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change\nwhere active_port_out_flag is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "active_port_out_flag",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "active_port_out_flag",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_active_port_out_flag__1__0.26d38a1712": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_active_port_out_flag__1__0",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "accepted_values_ccdf_xtra_ps_f_d2d89c425710a4c8c90830609a066056.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_active_port_out_flag__1__0.26d38a1712",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_active_port_out_flag__1__0"
            ],
            "alias": "accepted_values_ccdf_xtra_ps_f_d2d89c425710a4c8c90830609a066056",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "accepted_values_ccdf_xtra_ps_f_d2d89c425710a4c8c90830609a066056",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/accepted_values_ccdf_xtra_ps_f_d2d89c425710a4c8c90830609a066056.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "accepted_values_ccdf_xtra_ps_f_d2d89c425710a4c8c90830609a066056"
            },
            "created_at": 1744635194.2132852,
            "relation_name": null,
            "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_ccdf_xtra_ps_f_d2d89c425710a4c8c90830609a066056\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_accepted_values",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/accepted_values_ccdf_xtra_ps_f_d2d89c425710a4c8c90830609a066056.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        active_port_out_flag as value_field,\n        count(*) as n_records\n\n    from NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change\n    group by active_port_out_flag\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '1','0'\n)\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "active_port_out_flag",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "test_metadata": {
                "name": "accepted_values",
                "kwargs": {
                    "values": [
                        "1",
                        "0"
                    ],
                    "column_name": "active_port_out_flag",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_gross_flag.11e1ff1c9b": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_gross_flag",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "not_null_ccdf_xtra_ps_fokus_x__5d2de4e57461739b4a06214b3abdb046.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_gross_flag.11e1ff1c9b",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_gross_flag"
            ],
            "alias": "not_null_ccdf_xtra_ps_fokus_x__5d2de4e57461739b4a06214b3abdb046",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "not_null_ccdf_xtra_ps_fokus_x__5d2de4e57461739b4a06214b3abdb046",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__5d2de4e57461739b4a06214b3abdb046.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "not_null_ccdf_xtra_ps_fokus_x__5d2de4e57461739b4a06214b3abdb046"
            },
            "created_at": 1744635194.214628,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_ccdf_xtra_ps_fokus_x__5d2de4e57461739b4a06214b3abdb046\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__5d2de4e57461739b4a06214b3abdb046.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect gross_flag\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change\nwhere gross_flag is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "gross_flag",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "gross_flag",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_gross_flag__1__0.1f92bfe2ff": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_gross_flag__1__0",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "accepted_values_ccdf_xtra_ps_f_15b1d9d73ffa968a8fea2d226607ef89.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_gross_flag__1__0.1f92bfe2ff",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_gross_flag__1__0"
            ],
            "alias": "accepted_values_ccdf_xtra_ps_f_15b1d9d73ffa968a8fea2d226607ef89",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "accepted_values_ccdf_xtra_ps_f_15b1d9d73ffa968a8fea2d226607ef89",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/accepted_values_ccdf_xtra_ps_f_15b1d9d73ffa968a8fea2d226607ef89.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "accepted_values_ccdf_xtra_ps_f_15b1d9d73ffa968a8fea2d226607ef89"
            },
            "created_at": 1744635194.2151659,
            "relation_name": null,
            "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_ccdf_xtra_ps_f_15b1d9d73ffa968a8fea2d226607ef89\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_accepted_values",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/accepted_values_ccdf_xtra_ps_f_15b1d9d73ffa968a8fea2d226607ef89.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        gross_flag as value_field,\n        count(*) as n_records\n\n    from NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change\n    group by gross_flag\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '1','0'\n)\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "gross_flag",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "test_metadata": {
                "name": "accepted_values",
                "kwargs": {
                    "values": [
                        "1",
                        "0"
                    ],
                    "column_name": "gross_flag",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_source_system.dd56706c0e": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_source_system",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "not_null_ccdf_xtra_ps_fokus_x__b8adf0173d0910720f9395825dce9427.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_source_system.dd56706c0e",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_source_system"
            ],
            "alias": "not_null_ccdf_xtra_ps_fokus_x__b8adf0173d0910720f9395825dce9427",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "not_null_ccdf_xtra_ps_fokus_x__b8adf0173d0910720f9395825dce9427",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__b8adf0173d0910720f9395825dce9427.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "not_null_ccdf_xtra_ps_fokus_x__b8adf0173d0910720f9395825dce9427"
            },
            "created_at": 1744635194.216523,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_ccdf_xtra_ps_fokus_x__b8adf0173d0910720f9395825dce9427\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__b8adf0173d0910720f9395825dce9427.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect source_system\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change\nwhere source_system is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "source_system",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "source_system",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_source_system__FOK.8878d42a06": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_source_system__FOK",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "accepted_values_ccdf_xtra_ps_f_a0bde3a179442e4bd59c51e3ebaa74a0.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_source_system__FOK.8878d42a06",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_source_system__FOK"
            ],
            "alias": "accepted_values_ccdf_xtra_ps_f_a0bde3a179442e4bd59c51e3ebaa74a0",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "accepted_values_ccdf_xtra_ps_f_a0bde3a179442e4bd59c51e3ebaa74a0",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/accepted_values_ccdf_xtra_ps_f_a0bde3a179442e4bd59c51e3ebaa74a0.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "accepted_values_ccdf_xtra_ps_f_a0bde3a179442e4bd59c51e3ebaa74a0"
            },
            "created_at": 1744635194.217014,
            "relation_name": null,
            "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_ccdf_xtra_ps_f_a0bde3a179442e4bd59c51e3ebaa74a0\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_accepted_values",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/accepted_values_ccdf_xtra_ps_f_a0bde3a179442e4bd59c51e3ebaa74a0.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        source_system as value_field,\n        count(*) as n_records\n\n    from NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change\n    group by source_system\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'FOK'\n)\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "source_system",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "test_metadata": {
                "name": "accepted_values",
                "kwargs": {
                    "values": [
                        "FOK"
                    ],
                    "column_name": "source_system",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_family_flag.0e31903358": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_family_flag",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "not_null_ccdf_xtra_ps_fokus_x__23e91f61f17fdfcd3d25babc230a0b42.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_family_flag.0e31903358",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_family_flag"
            ],
            "alias": "not_null_ccdf_xtra_ps_fokus_x__23e91f61f17fdfcd3d25babc230a0b42",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "not_null_ccdf_xtra_ps_fokus_x__23e91f61f17fdfcd3d25babc230a0b42",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__23e91f61f17fdfcd3d25babc230a0b42.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "not_null_ccdf_xtra_ps_fokus_x__23e91f61f17fdfcd3d25babc230a0b42"
            },
            "created_at": 1744635194.21848,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_ccdf_xtra_ps_fokus_x__23e91f61f17fdfcd3d25babc230a0b42\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__23e91f61f17fdfcd3d25babc230a0b42.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect family_flag\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change\nwhere family_flag is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "family_flag",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "family_flag",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_family_flag__1__0.ecdb9644bb": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_family_flag__1__0",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "accepted_values_ccdf_xtra_ps_f_79189c86506577081feb1f1d630ee62b.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_family_flag__1__0.ecdb9644bb",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_family_flag__1__0"
            ],
            "alias": "accepted_values_ccdf_xtra_ps_f_79189c86506577081feb1f1d630ee62b",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "accepted_values_ccdf_xtra_ps_f_79189c86506577081feb1f1d630ee62b",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/accepted_values_ccdf_xtra_ps_f_79189c86506577081feb1f1d630ee62b.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "accepted_values_ccdf_xtra_ps_f_79189c86506577081feb1f1d630ee62b"
            },
            "created_at": 1744635194.2189949,
            "relation_name": null,
            "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_ccdf_xtra_ps_f_79189c86506577081feb1f1d630ee62b\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_accepted_values",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/accepted_values_ccdf_xtra_ps_f_79189c86506577081feb1f1d630ee62b.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        family_flag as value_field,\n        count(*) as n_records\n\n    from NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change\n    group by family_flag\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '1','0'\n)\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "family_flag",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "test_metadata": {
                "name": "accepted_values",
                "kwargs": {
                    "values": [
                        "1",
                        "0"
                    ],
                    "column_name": "family_flag",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_subscriber_key.0674075c39": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_subscriber_key",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "not_null_ccdf_xtra_ps_fokus_x__3cb98a0b0db72c345a8dc7e958783a74.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_subscriber_key.0674075c39",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_subscriber_key"
            ],
            "alias": "not_null_ccdf_xtra_ps_fokus_x__3cb98a0b0db72c345a8dc7e958783a74",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "not_null_ccdf_xtra_ps_fokus_x__3cb98a0b0db72c345a8dc7e958783a74",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__3cb98a0b0db72c345a8dc7e958783a74.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "not_null_ccdf_xtra_ps_fokus_x__3cb98a0b0db72c345a8dc7e958783a74"
            },
            "created_at": 1744635194.220305,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_ccdf_xtra_ps_fokus_x__3cb98a0b0db72c345a8dc7e958783a74\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__3cb98a0b0db72c345a8dc7e958783a74.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect subscriber_key\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change\nwhere subscriber_key is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "subscriber_key",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "subscriber_key",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_subscriber_key__subscriber_key__source_party_analytics_ccdf_abt_x__abt_main_product_change_.066675be8b": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_subscriber_key__subscriber_key__source_party_analytics_ccdf_abt_x__abt_main_product_change_",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "relationships_ccdf_xtra_ps_fok_15c970f5bf64e79af739c904d45cc3aa.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_subscriber_key__subscriber_key__source_party_analytics_ccdf_abt_x__abt_main_product_change_.066675be8b",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_subscriber_key__subscriber_key__source_party_analytics_ccdf_abt_x__abt_main_product_change_"
            ],
            "alias": "relationships_ccdf_xtra_ps_fok_15c970f5bf64e79af739c904d45cc3aa",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "relationships_ccdf_xtra_ps_fok_15c970f5bf64e79af739c904d45cc3aa",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/relationships_ccdf_xtra_ps_fok_15c970f5bf64e79af739c904d45cc3aa.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "relationships_ccdf_xtra_ps_fok_15c970f5bf64e79af739c904d45cc3aa"
            },
            "created_at": 1744635194.220902,
            "relation_name": null,
            "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_ccdf_xtra_ps_fok_15c970f5bf64e79af739c904d45cc3aa\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [
                [
                    "party_analytics",
                    "ccdf_abt_x__abt_main_product_change"
                ]
            ],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_relationships",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_abt_x__abt_main_product_change",
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/relationships_ccdf_xtra_ps_fok_15c970f5bf64e79af739c904d45cc3aa.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\nwith child as (\n    select subscriber_key as from_field\n    from NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change\n    where subscriber_key is not null\n),\n\nparent as (\n    select subscriber_key as to_field\n    from NGA_DB_RAFT.party_analytics.ccdf_abt_x__abt_main_product_change\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "subscriber_key",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "test_metadata": {
                "name": "relationships",
                "kwargs": {
                    "to": "source('party_analytics', 'ccdf_abt_x__abt_main_product_change')",
                    "field": "subscriber_key",
                    "column_name": "subscriber_key",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_ban.4fc30360f5": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_ban",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_ban.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_ban.4fc30360f5",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_ban"
            ],
            "alias": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_ban",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_ban.sql",
            "unrendered_config": {
                "severity": "warn"
            },
            "created_at": 1744635194.222371,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_ban.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect ban\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change\nwhere ban is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "ban",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "ban",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_ban__account_id__source_party_analytics_ccdf_x__agreement_.02333b5ad3": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_ban__account_id__source_party_analytics_ccdf_x__agreement_",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "relationships_ccdf_xtra_ps_fok_a7958feba687422f5cea69bf5af0381f.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_ban__account_id__source_party_analytics_ccdf_x__agreement_.02333b5ad3",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_ban__account_id__source_party_analytics_ccdf_x__agreement_"
            ],
            "alias": "relationships_ccdf_xtra_ps_fok_a7958feba687422f5cea69bf5af0381f",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "relationships_ccdf_xtra_ps_fok_a7958feba687422f5cea69bf5af0381f",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/relationships_ccdf_xtra_ps_fok_a7958feba687422f5cea69bf5af0381f.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "relationships_ccdf_xtra_ps_fok_a7958feba687422f5cea69bf5af0381f"
            },
            "created_at": 1744635194.2229052,
            "relation_name": null,
            "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_ccdf_xtra_ps_fok_a7958feba687422f5cea69bf5af0381f\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [
                [
                    "party_analytics",
                    "ccdf_x__agreement"
                ]
            ],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_relationships",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_x__agreement",
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/relationships_ccdf_xtra_ps_fok_a7958feba687422f5cea69bf5af0381f.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\nwith child as (\n    select ban as from_field\n    from NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change\n    where ban is not null\n),\n\nparent as (\n    select account_id as to_field\n    from NGA_DB_RAFT.party_analytics.ccdf_x__agreement\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "ban",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "test_metadata": {
                "name": "relationships",
                "kwargs": {
                    "to": "source('party_analytics', 'ccdf_x__agreement')",
                    "field": "account_id",
                    "column_name": "ban",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_pp_price_upgrade_flag.75b58cf7d5": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_pp_price_upgrade_flag",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "not_null_ccdf_xtra_ps_fokus_x__1c038bb6298f277990b157f806c4c5c6.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_pp_price_upgrade_flag.75b58cf7d5",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_pp_price_upgrade_flag"
            ],
            "alias": "not_null_ccdf_xtra_ps_fokus_x__1c038bb6298f277990b157f806c4c5c6",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "not_null_ccdf_xtra_ps_fokus_x__1c038bb6298f277990b157f806c4c5c6",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__1c038bb6298f277990b157f806c4c5c6.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "not_null_ccdf_xtra_ps_fokus_x__1c038bb6298f277990b157f806c4c5c6"
            },
            "created_at": 1744635194.224483,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_ccdf_xtra_ps_fokus_x__1c038bb6298f277990b157f806c4c5c6\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__1c038bb6298f277990b157f806c4c5c6.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect pp_price_upgrade_flag\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change\nwhere pp_price_upgrade_flag is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "pp_price_upgrade_flag",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "pp_price_upgrade_flag",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_pp_price_upgrade_flag__1__0.d8855df709": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_pp_price_upgrade_flag__1__0",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "accepted_values_ccdf_xtra_ps_f_8168ca8351bb11cb94f010c456ab9785.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_pp_price_upgrade_flag__1__0.d8855df709",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_pp_price_upgrade_flag__1__0"
            ],
            "alias": "accepted_values_ccdf_xtra_ps_f_8168ca8351bb11cb94f010c456ab9785",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "accepted_values_ccdf_xtra_ps_f_8168ca8351bb11cb94f010c456ab9785",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/accepted_values_ccdf_xtra_ps_f_8168ca8351bb11cb94f010c456ab9785.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "accepted_values_ccdf_xtra_ps_f_8168ca8351bb11cb94f010c456ab9785"
            },
            "created_at": 1744635194.225009,
            "relation_name": null,
            "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_ccdf_xtra_ps_f_8168ca8351bb11cb94f010c456ab9785\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_accepted_values",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/accepted_values_ccdf_xtra_ps_f_8168ca8351bb11cb94f010c456ab9785.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        pp_price_upgrade_flag as value_field,\n        count(*) as n_records\n\n    from NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change\n    group by pp_price_upgrade_flag\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '1','0'\n)\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "pp_price_upgrade_flag",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "test_metadata": {
                "name": "accepted_values",
                "kwargs": {
                    "values": [
                        "1",
                        "0"
                    ],
                    "column_name": "pp_price_upgrade_flag",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_subscriber_id.03dd8d9676": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_subscriber_id",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "not_null_ccdf_xtra_ps_fokus_x__f241d5c944036fdd4a3f0b2f8f8fefd2.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_subscriber_id.03dd8d9676",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_subscriber_id"
            ],
            "alias": "not_null_ccdf_xtra_ps_fokus_x__f241d5c944036fdd4a3f0b2f8f8fefd2",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "not_null_ccdf_xtra_ps_fokus_x__f241d5c944036fdd4a3f0b2f8f8fefd2",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__f241d5c944036fdd4a3f0b2f8f8fefd2.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "not_null_ccdf_xtra_ps_fokus_x__f241d5c944036fdd4a3f0b2f8f8fefd2"
            },
            "created_at": 1744635194.226402,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_ccdf_xtra_ps_fokus_x__f241d5c944036fdd4a3f0b2f8f8fefd2\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__f241d5c944036fdd4a3f0b2f8f8fefd2.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect subscriber_id\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change\nwhere subscriber_id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "subscriber_id",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "subscriber_id",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_subscriber_id__subscriber_id__source_party_analytics_ccdf_x__agreement_.4f1b3b50c1": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_subscriber_id__subscriber_id__source_party_analytics_ccdf_x__agreement_",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "relationships_ccdf_xtra_ps_fok_ac3a703fd0d396e84e1bcab9464a4b3d.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_subscriber_id__subscriber_id__source_party_analytics_ccdf_x__agreement_.4f1b3b50c1",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_subscriber_id__subscriber_id__source_party_analytics_ccdf_x__agreement_"
            ],
            "alias": "relationships_ccdf_xtra_ps_fok_ac3a703fd0d396e84e1bcab9464a4b3d",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "relationships_ccdf_xtra_ps_fok_ac3a703fd0d396e84e1bcab9464a4b3d",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/relationships_ccdf_xtra_ps_fok_ac3a703fd0d396e84e1bcab9464a4b3d.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "relationships_ccdf_xtra_ps_fok_ac3a703fd0d396e84e1bcab9464a4b3d"
            },
            "created_at": 1744635194.2269208,
            "relation_name": null,
            "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_ccdf_xtra_ps_fok_ac3a703fd0d396e84e1bcab9464a4b3d\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [
                [
                    "party_analytics",
                    "ccdf_x__agreement"
                ]
            ],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_relationships",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_x__agreement",
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/relationships_ccdf_xtra_ps_fok_ac3a703fd0d396e84e1bcab9464a4b3d.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\nwith child as (\n    select subscriber_id as from_field\n    from NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change\n    where subscriber_id is not null\n),\n\nparent as (\n    select subscriber_id as to_field\n    from NGA_DB_RAFT.party_analytics.ccdf_x__agreement\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "subscriber_id",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "test_metadata": {
                "name": "relationships",
                "kwargs": {
                    "to": "source('party_analytics', 'ccdf_x__agreement')",
                    "field": "subscriber_id",
                    "column_name": "subscriber_id",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_business_unit.45bffd36b4": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_business_unit",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "not_null_ccdf_xtra_ps_fokus_x__57ebb6d729b4896b7134854dc0fa33f1.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_business_unit.45bffd36b4",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_business_unit"
            ],
            "alias": "not_null_ccdf_xtra_ps_fokus_x__57ebb6d729b4896b7134854dc0fa33f1",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "not_null_ccdf_xtra_ps_fokus_x__57ebb6d729b4896b7134854dc0fa33f1",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__57ebb6d729b4896b7134854dc0fa33f1.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "not_null_ccdf_xtra_ps_fokus_x__57ebb6d729b4896b7134854dc0fa33f1"
            },
            "created_at": 1744635194.228468,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_ccdf_xtra_ps_fokus_x__57ebb6d729b4896b7134854dc0fa33f1\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__57ebb6d729b4896b7134854dc0fa33f1.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect business_unit\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change\nwhere business_unit is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "business_unit",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "business_unit",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_business_unit__FOK.b72d97d483": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_business_unit__FOK",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "accepted_values_ccdf_xtra_ps_f_7e9f6e904fe439fb78e047cf383b9c74.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_business_unit__FOK.b72d97d483",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_business_unit__FOK"
            ],
            "alias": "accepted_values_ccdf_xtra_ps_f_7e9f6e904fe439fb78e047cf383b9c74",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "accepted_values_ccdf_xtra_ps_f_7e9f6e904fe439fb78e047cf383b9c74",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/accepted_values_ccdf_xtra_ps_f_7e9f6e904fe439fb78e047cf383b9c74.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "accepted_values_ccdf_xtra_ps_f_7e9f6e904fe439fb78e047cf383b9c74"
            },
            "created_at": 1744635194.228972,
            "relation_name": null,
            "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_ccdf_xtra_ps_f_7e9f6e904fe439fb78e047cf383b9c74\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_accepted_values",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/accepted_values_ccdf_xtra_ps_f_7e9f6e904fe439fb78e047cf383b9c74.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        business_unit as value_field,\n        count(*) as n_records\n\n    from NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change\n    group by business_unit\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'FOK'\n)\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "business_unit",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "test_metadata": {
                "name": "accepted_values",
                "kwargs": {
                    "values": [
                        "FOK"
                    ],
                    "column_name": "business_unit",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_pp_start_date.8dde1095e1": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_pp_start_date",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "not_null_ccdf_xtra_ps_fokus_x__1c53856677331371623b6e2703dd4afc.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_pp_start_date.8dde1095e1",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_pp_start_date"
            ],
            "alias": "not_null_ccdf_xtra_ps_fokus_x__1c53856677331371623b6e2703dd4afc",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "not_null_ccdf_xtra_ps_fokus_x__1c53856677331371623b6e2703dd4afc",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__1c53856677331371623b6e2703dd4afc.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "not_null_ccdf_xtra_ps_fokus_x__1c53856677331371623b6e2703dd4afc"
            },
            "created_at": 1744635194.230224,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_ccdf_xtra_ps_fokus_x__1c53856677331371623b6e2703dd4afc\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__1c53856677331371623b6e2703dd4afc.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect pp_start_date\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change\nwhere pp_start_date is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "pp_start_date",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "pp_start_date",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_churn_flag.e2292c474b": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_churn_flag",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "not_null_ccdf_xtra_ps_fokus_x__16568331638069e38b1547aa38f2dbbb.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_churn_flag.e2292c474b",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_churn_flag"
            ],
            "alias": "not_null_ccdf_xtra_ps_fokus_x__16568331638069e38b1547aa38f2dbbb",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "not_null_ccdf_xtra_ps_fokus_x__16568331638069e38b1547aa38f2dbbb",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__16568331638069e38b1547aa38f2dbbb.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "not_null_ccdf_xtra_ps_fokus_x__16568331638069e38b1547aa38f2dbbb"
            },
            "created_at": 1744635194.230752,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_ccdf_xtra_ps_fokus_x__16568331638069e38b1547aa38f2dbbb\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__16568331638069e38b1547aa38f2dbbb.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect churn_flag\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change\nwhere churn_flag is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "churn_flag",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "churn_flag",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_churn_flag__1__0.a650b17f64": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_churn_flag__1__0",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "accepted_values_ccdf_xtra_ps_f_7d0b7c4224946ab5c6b3a21e3d933714.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_churn_flag__1__0.a650b17f64",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_churn_flag__1__0"
            ],
            "alias": "accepted_values_ccdf_xtra_ps_f_7d0b7c4224946ab5c6b3a21e3d933714",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "accepted_values_ccdf_xtra_ps_f_7d0b7c4224946ab5c6b3a21e3d933714",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/accepted_values_ccdf_xtra_ps_f_7d0b7c4224946ab5c6b3a21e3d933714.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "accepted_values_ccdf_xtra_ps_f_7d0b7c4224946ab5c6b3a21e3d933714"
            },
            "created_at": 1744635194.231366,
            "relation_name": null,
            "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_ccdf_xtra_ps_f_7d0b7c4224946ab5c6b3a21e3d933714\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_accepted_values",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/accepted_values_ccdf_xtra_ps_f_7d0b7c4224946ab5c6b3a21e3d933714.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        churn_flag as value_field,\n        count(*) as n_records\n\n    from NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change\n    group by churn_flag\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '1','0'\n)\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "churn_flag",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "test_metadata": {
                "name": "accepted_values",
                "kwargs": {
                    "values": [
                        "1",
                        "0"
                    ],
                    "column_name": "churn_flag",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_offer_cd.47e768299c": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_offer_cd",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "not_null_ccdf_xtra_ps_fokus_x__a7b02782ab5ea43a36169760ee5abce1.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_offer_cd.47e768299c",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_offer_cd"
            ],
            "alias": "not_null_ccdf_xtra_ps_fokus_x__a7b02782ab5ea43a36169760ee5abce1",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "not_null_ccdf_xtra_ps_fokus_x__a7b02782ab5ea43a36169760ee5abce1",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__a7b02782ab5ea43a36169760ee5abce1.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "not_null_ccdf_xtra_ps_fokus_x__a7b02782ab5ea43a36169760ee5abce1"
            },
            "created_at": 1744635194.232624,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_ccdf_xtra_ps_fokus_x__a7b02782ab5ea43a36169760ee5abce1\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__a7b02782ab5ea43a36169760ee5abce1.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect offer_cd\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change\nwhere offer_cd is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "offer_cd",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "offer_cd",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_pp_end_date.40854a55d8": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_pp_end_date",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "not_null_ccdf_xtra_ps_fokus_x__2abde182089f848ffbe8a20bc5808ba3.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_pp_end_date.40854a55d8",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_pp_end_date"
            ],
            "alias": "not_null_ccdf_xtra_ps_fokus_x__2abde182089f848ffbe8a20bc5808ba3",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "not_null_ccdf_xtra_ps_fokus_x__2abde182089f848ffbe8a20bc5808ba3",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__2abde182089f848ffbe8a20bc5808ba3.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "not_null_ccdf_xtra_ps_fokus_x__2abde182089f848ffbe8a20bc5808ba3"
            },
            "created_at": 1744635194.233137,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_ccdf_xtra_ps_fokus_x__2abde182089f848ffbe8a20bc5808ba3\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__2abde182089f848ffbe8a20bc5808ba3.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect pp_end_date\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change\nwhere pp_end_date is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "pp_end_date",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "pp_end_date",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_prev_family_flag__1__0.9eb95a7abd": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_prev_family_flag__1__0",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "accepted_values_ccdf_xtra_ps_f_6a0246f4f3da00f72a983c9540cc2b57.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_prev_family_flag__1__0.9eb95a7abd",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_prev_family_flag__1__0"
            ],
            "alias": "accepted_values_ccdf_xtra_ps_f_6a0246f4f3da00f72a983c9540cc2b57",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "accepted_values_ccdf_xtra_ps_f_6a0246f4f3da00f72a983c9540cc2b57",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/accepted_values_ccdf_xtra_ps_f_6a0246f4f3da00f72a983c9540cc2b57.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "accepted_values_ccdf_xtra_ps_f_6a0246f4f3da00f72a983c9540cc2b57"
            },
            "created_at": 1744635194.2336588,
            "relation_name": null,
            "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_ccdf_xtra_ps_f_6a0246f4f3da00f72a983c9540cc2b57\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_accepted_values",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/accepted_values_ccdf_xtra_ps_f_6a0246f4f3da00f72a983c9540cc2b57.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        prev_family_flag as value_field,\n        count(*) as n_records\n\n    from NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change\n    group by prev_family_flag\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '1','0'\n)\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "prev_family_flag",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "test_metadata": {
                "name": "accepted_values",
                "kwargs": {
                    "values": [
                        "1",
                        "0"
                    ],
                    "column_name": "prev_family_flag",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.dbt_utils_unique_combination_of_columns_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_AGREEMENT_KEY.e03deecb5d": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "dbt_utils_unique_combination_of_columns_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_AGREEMENT_KEY",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "dbt_utils_unique_combination_o_754ae7112ac48feae9f212bde99ba570.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.dbt_utils_unique_combination_of_columns_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_AGREEMENT_KEY.e03deecb5d",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "dbt_utils_unique_combination_of_columns_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_AGREEMENT_KEY"
            ],
            "alias": "dbt_utils_unique_combination_o_754ae7112ac48feae9f212bde99ba570",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_unique_combination_o_754ae7112ac48feae9f212bde99ba570",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/dbt_utils_unique_combination_o_754ae7112ac48feae9f212bde99ba570.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "dbt_utils_unique_combination_o_754ae7112ac48feae9f212bde99ba570"
            },
            "created_at": 1744635194.235014,
            "relation_name": null,
            "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_754ae7112ac48feae9f212bde99ba570\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_unique_combination_of_columns",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/dbt_utils_unique_combination_o_754ae7112ac48feae9f212bde99ba570.sql",
            "compiled": true,
            "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        AGREEMENT_KEY\n    from NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change\n    group by AGREEMENT_KEY\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": null,
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "test_metadata": {
                "name": "unique_combination_of_columns",
                "kwargs": {
                    "combination_of_columns": [
                        "AGREEMENT_KEY"
                    ],
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change')) }}"
                },
                "namespace": "dbt_utils"
            }
        },
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_account_key.b3a27ca372": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_account_key",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "not_null_ccdf_xtra_ps_fokus_x__dcb51ad4bbe6baedca85bffc4af75493.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_account_key.b3a27ca372",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_account_key"
            ],
            "alias": "not_null_ccdf_xtra_ps_fokus_x__dcb51ad4bbe6baedca85bffc4af75493",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "not_null_ccdf_xtra_ps_fokus_x__dcb51ad4bbe6baedca85bffc4af75493",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__dcb51ad4bbe6baedca85bffc4af75493.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "not_null_ccdf_xtra_ps_fokus_x__dcb51ad4bbe6baedca85bffc4af75493"
            },
            "created_at": 1744635194.238951,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_ccdf_xtra_ps_fokus_x__dcb51ad4bbe6baedca85bffc4af75493\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__dcb51ad4bbe6baedca85bffc4af75493.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect account_key\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber\nwhere account_key is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "account_key",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "account_key",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_dealer_id.30d953ade1": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_dealer_id",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "not_null_ccdf_xtra_ps_fokus_x__9ce38646bc46039a7e9a20c0601e224a.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_dealer_id.30d953ade1",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_dealer_id"
            ],
            "alias": "not_null_ccdf_xtra_ps_fokus_x__9ce38646bc46039a7e9a20c0601e224a",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "not_null_ccdf_xtra_ps_fokus_x__9ce38646bc46039a7e9a20c0601e224a",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__9ce38646bc46039a7e9a20c0601e224a.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "not_null_ccdf_xtra_ps_fokus_x__9ce38646bc46039a7e9a20c0601e224a"
            },
            "created_at": 1744635194.2395132,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_ccdf_xtra_ps_fokus_x__9ce38646bc46039a7e9a20c0601e224a\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__9ce38646bc46039a7e9a20c0601e224a.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect dealer_id\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber\nwhere dealer_id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "dealer_id",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "dealer_id",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_discount_price.3471cd6473": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_discount_price",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "not_null_ccdf_xtra_ps_fokus_x__2ed46448498c127305c04c5ff269e09c.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_discount_price.3471cd6473",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_discount_price"
            ],
            "alias": "not_null_ccdf_xtra_ps_fokus_x__2ed46448498c127305c04c5ff269e09c",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "not_null_ccdf_xtra_ps_fokus_x__2ed46448498c127305c04c5ff269e09c",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__2ed46448498c127305c04c5ff269e09c.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "not_null_ccdf_xtra_ps_fokus_x__2ed46448498c127305c04c5ff269e09c"
            },
            "created_at": 1744635194.2400398,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_ccdf_xtra_ps_fokus_x__2ed46448498c127305c04c5ff269e09c\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__2ed46448498c127305c04c5ff269e09c.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect discount_price\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber\nwhere discount_price is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "discount_price",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "discount_price",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_start_date.3fadde670c": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_start_date",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "not_null_ccdf_xtra_ps_fokus_x__f08179c0cfedcc900f83dea9e81e331d.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_start_date.3fadde670c",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_start_date"
            ],
            "alias": "not_null_ccdf_xtra_ps_fokus_x__f08179c0cfedcc900f83dea9e81e331d",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "not_null_ccdf_xtra_ps_fokus_x__f08179c0cfedcc900f83dea9e81e331d",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__f08179c0cfedcc900f83dea9e81e331d.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "not_null_ccdf_xtra_ps_fokus_x__f08179c0cfedcc900f83dea9e81e331d"
            },
            "created_at": 1744635194.2406049,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_ccdf_xtra_ps_fokus_x__f08179c0cfedcc900f83dea9e81e331d\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__f08179c0cfedcc900f83dea9e81e331d.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect subscriber_start_date\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber\nwhere subscriber_start_date is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "subscriber_start_date",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "subscriber_start_date",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_agreement_start_date.fb81eab4af": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_agreement_start_date",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "not_null_ccdf_xtra_ps_fokus_x__af9d2465158d43a1c88a232ba4967200.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_agreement_start_date.fb81eab4af",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_agreement_start_date"
            ],
            "alias": "not_null_ccdf_xtra_ps_fokus_x__af9d2465158d43a1c88a232ba4967200",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "not_null_ccdf_xtra_ps_fokus_x__af9d2465158d43a1c88a232ba4967200",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__af9d2465158d43a1c88a232ba4967200.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "not_null_ccdf_xtra_ps_fokus_x__af9d2465158d43a1c88a232ba4967200"
            },
            "created_at": 1744635194.24122,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_ccdf_xtra_ps_fokus_x__af9d2465158d43a1c88a232ba4967200\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__af9d2465158d43a1c88a232ba4967200.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect agreement_start_date\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber\nwhere agreement_start_date is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "agreement_start_date",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "agreement_start_date",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_event_name.791159c1a0": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_event_name",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "not_null_ccdf_xtra_ps_fokus_x__0387803f7077c20c06e97e9364ad9208.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_event_name.791159c1a0",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_event_name"
            ],
            "alias": "not_null_ccdf_xtra_ps_fokus_x__0387803f7077c20c06e97e9364ad9208",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "not_null_ccdf_xtra_ps_fokus_x__0387803f7077c20c06e97e9364ad9208",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__0387803f7077c20c06e97e9364ad9208.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "not_null_ccdf_xtra_ps_fokus_x__0387803f7077c20c06e97e9364ad9208"
            },
            "created_at": 1744635194.28259,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_ccdf_xtra_ps_fokus_x__0387803f7077c20c06e97e9364ad9208\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__0387803f7077c20c06e97e9364ad9208.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect event_name\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber\nwhere event_name is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "event_name",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "event_name",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_event_name__A__C.f881722139": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_event_name__A__C",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "accepted_values_ccdf_xtra_ps_f_87a6b15491775f1895fa0af555c32c3c.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_event_name__A__C.f881722139",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_event_name__A__C"
            ],
            "alias": "accepted_values_ccdf_xtra_ps_f_87a6b15491775f1895fa0af555c32c3c",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "accepted_values_ccdf_xtra_ps_f_87a6b15491775f1895fa0af555c32c3c",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/accepted_values_ccdf_xtra_ps_f_87a6b15491775f1895fa0af555c32c3c.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "accepted_values_ccdf_xtra_ps_f_87a6b15491775f1895fa0af555c32c3c"
            },
            "created_at": 1744635194.28316,
            "relation_name": null,
            "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_ccdf_xtra_ps_f_87a6b15491775f1895fa0af555c32c3c\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_accepted_values",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/accepted_values_ccdf_xtra_ps_f_87a6b15491775f1895fa0af555c32c3c.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        event_name as value_field,\n        count(*) as n_records\n\n    from NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber\n    group by event_name\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'A','C'\n)\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "event_name",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "test_metadata": {
                "name": "accepted_values",
                "kwargs": {
                    "values": [
                        "A",
                        "C"
                    ],
                    "column_name": "event_name",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_main_product_name.5c16ed4ee3": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_main_product_name",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "not_null_ccdf_xtra_ps_fokus_x__89b9a296fa628a2feff890f5d1061fe3.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_main_product_name.5c16ed4ee3",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_main_product_name"
            ],
            "alias": "not_null_ccdf_xtra_ps_fokus_x__89b9a296fa628a2feff890f5d1061fe3",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "not_null_ccdf_xtra_ps_fokus_x__89b9a296fa628a2feff890f5d1061fe3",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__89b9a296fa628a2feff890f5d1061fe3.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "not_null_ccdf_xtra_ps_fokus_x__89b9a296fa628a2feff890f5d1061fe3"
            },
            "created_at": 1744635194.285137,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_ccdf_xtra_ps_fokus_x__89b9a296fa628a2feff890f5d1061fe3\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__89b9a296fa628a2feff890f5d1061fe3.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect main_product_name\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber\nwhere main_product_name is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "main_product_name",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "main_product_name",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_base_price.def39fcd11": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_base_price",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "not_null_ccdf_xtra_ps_fokus_x__ad13773cf566cbd3de4d860db41bee50.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_base_price.def39fcd11",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_base_price"
            ],
            "alias": "not_null_ccdf_xtra_ps_fokus_x__ad13773cf566cbd3de4d860db41bee50",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "not_null_ccdf_xtra_ps_fokus_x__ad13773cf566cbd3de4d860db41bee50",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__ad13773cf566cbd3de4d860db41bee50.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "not_null_ccdf_xtra_ps_fokus_x__ad13773cf566cbd3de4d860db41bee50"
            },
            "created_at": 1744635194.285655,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_ccdf_xtra_ps_fokus_x__ad13773cf566cbd3de4d860db41bee50\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__ad13773cf566cbd3de4d860db41bee50.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect base_price\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber\nwhere base_price is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "base_price",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "base_price",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_agreement_end_date.ec27bae018": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_agreement_end_date",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "not_null_ccdf_xtra_ps_fokus_x__5734441960c176dea0b4065fc94bef2f.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_agreement_end_date.ec27bae018",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_agreement_end_date"
            ],
            "alias": "not_null_ccdf_xtra_ps_fokus_x__5734441960c176dea0b4065fc94bef2f",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "not_null_ccdf_xtra_ps_fokus_x__5734441960c176dea0b4065fc94bef2f",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__5734441960c176dea0b4065fc94bef2f.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "not_null_ccdf_xtra_ps_fokus_x__5734441960c176dea0b4065fc94bef2f"
            },
            "created_at": 1744635194.2861671,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_ccdf_xtra_ps_fokus_x__5734441960c176dea0b4065fc94bef2f\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__5734441960c176dea0b4065fc94bef2f.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect agreement_end_date\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber\nwhere agreement_end_date is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "agreement_end_date",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "agreement_end_date",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_account_id.f2d5dbf488": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_account_id",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "not_null_ccdf_xtra_ps_fokus_x__63f6e13548fc93c626bb84a35d3cc9e5.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_account_id.f2d5dbf488",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_account_id"
            ],
            "alias": "not_null_ccdf_xtra_ps_fokus_x__63f6e13548fc93c626bb84a35d3cc9e5",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "not_null_ccdf_xtra_ps_fokus_x__63f6e13548fc93c626bb84a35d3cc9e5",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__63f6e13548fc93c626bb84a35d3cc9e5.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "not_null_ccdf_xtra_ps_fokus_x__63f6e13548fc93c626bb84a35d3cc9e5"
            },
            "created_at": 1744635194.2866912,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_ccdf_xtra_ps_fokus_x__63f6e13548fc93c626bb84a35d3cc9e5\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__63f6e13548fc93c626bb84a35d3cc9e5.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber\nwhere account_id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "account_id",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "account_id",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_dealer_key.666906429c": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_dealer_key",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "not_null_ccdf_xtra_ps_fokus_x__d4eae4628555dd75149463bbc0954aca.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_dealer_key.666906429c",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_dealer_key"
            ],
            "alias": "not_null_ccdf_xtra_ps_fokus_x__d4eae4628555dd75149463bbc0954aca",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "not_null_ccdf_xtra_ps_fokus_x__d4eae4628555dd75149463bbc0954aca",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__d4eae4628555dd75149463bbc0954aca.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "not_null_ccdf_xtra_ps_fokus_x__d4eae4628555dd75149463bbc0954aca"
            },
            "created_at": 1744635194.287194,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_ccdf_xtra_ps_fokus_x__d4eae4628555dd75149463bbc0954aca\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__d4eae4628555dd75149463bbc0954aca.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect dealer_key\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber\nwhere dealer_key is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "dealer_key",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "dealer_key",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_main_agreement_id.9d7a184035": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_main_agreement_id",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "not_null_ccdf_xtra_ps_fokus_x__ecd3c1e5fd534d8c232368c5a1236b11.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_main_agreement_id.9d7a184035",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_main_agreement_id"
            ],
            "alias": "not_null_ccdf_xtra_ps_fokus_x__ecd3c1e5fd534d8c232368c5a1236b11",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "not_null_ccdf_xtra_ps_fokus_x__ecd3c1e5fd534d8c232368c5a1236b11",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__ecd3c1e5fd534d8c232368c5a1236b11.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "not_null_ccdf_xtra_ps_fokus_x__ecd3c1e5fd534d8c232368c5a1236b11"
            },
            "created_at": 1744635194.2877598,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_ccdf_xtra_ps_fokus_x__ecd3c1e5fd534d8c232368c5a1236b11\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__ecd3c1e5fd534d8c232368c5a1236b11.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect main_agreement_id\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber\nwhere main_agreement_id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "main_agreement_id",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "main_agreement_id",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_lifetime.2786611a1c": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_lifetime",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "not_null_ccdf_xtra_ps_fokus_x__d4ecfed6ba70ffffdc7e4acbbb017029.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_lifetime.2786611a1c",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_lifetime"
            ],
            "alias": "not_null_ccdf_xtra_ps_fokus_x__d4ecfed6ba70ffffdc7e4acbbb017029",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "not_null_ccdf_xtra_ps_fokus_x__d4ecfed6ba70ffffdc7e4acbbb017029",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__d4ecfed6ba70ffffdc7e4acbbb017029.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "not_null_ccdf_xtra_ps_fokus_x__d4ecfed6ba70ffffdc7e4acbbb017029"
            },
            "created_at": 1744635194.288269,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_ccdf_xtra_ps_fokus_x__d4ecfed6ba70ffffdc7e4acbbb017029\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__d4ecfed6ba70ffffdc7e4acbbb017029.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect subscriber_lifetime\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber\nwhere subscriber_lifetime is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "subscriber_lifetime",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "subscriber_lifetime",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_no.273ba45fad": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_no",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "not_null_ccdf_xtra_ps_fokus_x__932bf3c7b24f3e6256bc2521b9ef4411.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_no.273ba45fad",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_no"
            ],
            "alias": "not_null_ccdf_xtra_ps_fokus_x__932bf3c7b24f3e6256bc2521b9ef4411",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "not_null_ccdf_xtra_ps_fokus_x__932bf3c7b24f3e6256bc2521b9ef4411",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__932bf3c7b24f3e6256bc2521b9ef4411.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "not_null_ccdf_xtra_ps_fokus_x__932bf3c7b24f3e6256bc2521b9ef4411"
            },
            "created_at": 1744635194.2887738,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_ccdf_xtra_ps_fokus_x__932bf3c7b24f3e6256bc2521b9ef4411\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__932bf3c7b24f3e6256bc2521b9ef4411.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect subscriber_no\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber\nwhere subscriber_no is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "subscriber_no",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "subscriber_no",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_city.bf6995a900": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_city",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "not_null_ccdf_xtra_ps_fokus_x__7592f985c9ff92be85e7eba590fca0c7.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_city.bf6995a900",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_city"
            ],
            "alias": "not_null_ccdf_xtra_ps_fokus_x__7592f985c9ff92be85e7eba590fca0c7",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "not_null_ccdf_xtra_ps_fokus_x__7592f985c9ff92be85e7eba590fca0c7",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": ">30000",
                "error_if": ">100000"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__7592f985c9ff92be85e7eba590fca0c7.sql",
            "unrendered_config": {
                "severity": "ERROR",
                "alias": "not_null_ccdf_xtra_ps_fokus_x__7592f985c9ff92be85e7eba590fca0c7",
                "warn_if": ">30000",
                "error_if": ">100000"
            },
            "created_at": 1744635194.289654,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",warn_if=\">30000\",error_if=\">100000\",alias=\"not_null_ccdf_xtra_ps_fokus_x__7592f985c9ff92be85e7eba590fca0c7\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__7592f985c9ff92be85e7eba590fca0c7.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect city\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber\nwhere city is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "city",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "city",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_main_product_key.8da940dbcc": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_main_product_key",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "not_null_ccdf_xtra_ps_fokus_x__4e1e4b76b5086273dc28ec2178fd51f7.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_main_product_key.8da940dbcc",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_main_product_key"
            ],
            "alias": "not_null_ccdf_xtra_ps_fokus_x__4e1e4b76b5086273dc28ec2178fd51f7",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "not_null_ccdf_xtra_ps_fokus_x__4e1e4b76b5086273dc28ec2178fd51f7",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__4e1e4b76b5086273dc28ec2178fd51f7.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "not_null_ccdf_xtra_ps_fokus_x__4e1e4b76b5086273dc28ec2178fd51f7"
            },
            "created_at": 1744635194.290165,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_ccdf_xtra_ps_fokus_x__4e1e4b76b5086273dc28ec2178fd51f7\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__4e1e4b76b5086273dc28ec2178fd51f7.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect main_product_key\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber\nwhere main_product_key is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "main_product_key",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "main_product_key",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_latest_product_lifetime.f7f29484fb": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_latest_product_lifetime",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "not_null_ccdf_xtra_ps_fokus_x__2d2b6e7256992671d4cce2b607c3fc53.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_latest_product_lifetime.f7f29484fb",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_latest_product_lifetime"
            ],
            "alias": "not_null_ccdf_xtra_ps_fokus_x__2d2b6e7256992671d4cce2b607c3fc53",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "not_null_ccdf_xtra_ps_fokus_x__2d2b6e7256992671d4cce2b607c3fc53",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__2d2b6e7256992671d4cce2b607c3fc53.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "not_null_ccdf_xtra_ps_fokus_x__2d2b6e7256992671d4cce2b607c3fc53"
            },
            "created_at": 1744635194.290741,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_ccdf_xtra_ps_fokus_x__2d2b6e7256992671d4cce2b607c3fc53\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__2d2b6e7256992671d4cce2b607c3fc53.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect latest_product_lifetime\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber\nwhere latest_product_lifetime is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "latest_product_lifetime",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "latest_product_lifetime",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_line_price.5a4b6e5373": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_line_price",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "not_null_ccdf_xtra_ps_fokus_x__8bf3d09ec9bf3f68575fded56809fa56.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_line_price.5a4b6e5373",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_line_price"
            ],
            "alias": "not_null_ccdf_xtra_ps_fokus_x__8bf3d09ec9bf3f68575fded56809fa56",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "not_null_ccdf_xtra_ps_fokus_x__8bf3d09ec9bf3f68575fded56809fa56",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__8bf3d09ec9bf3f68575fded56809fa56.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "not_null_ccdf_xtra_ps_fokus_x__8bf3d09ec9bf3f68575fded56809fa56"
            },
            "created_at": 1744635194.2912462,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_ccdf_xtra_ps_fokus_x__8bf3d09ec9bf3f68575fded56809fa56\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__8bf3d09ec9bf3f68575fded56809fa56.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect line_price\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber\nwhere line_price is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "line_price",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "line_price",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_key.e4a5822c3a": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_key",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "not_null_ccdf_xtra_ps_fokus_x__8e64a83a8382704a56e5162728a2a2a0.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_key.e4a5822c3a",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_key"
            ],
            "alias": "not_null_ccdf_xtra_ps_fokus_x__8e64a83a8382704a56e5162728a2a2a0",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "not_null_ccdf_xtra_ps_fokus_x__8e64a83a8382704a56e5162728a2a2a0",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__8e64a83a8382704a56e5162728a2a2a0.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "not_null_ccdf_xtra_ps_fokus_x__8e64a83a8382704a56e5162728a2a2a0"
            },
            "created_at": 1744635194.29175,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_ccdf_xtra_ps_fokus_x__8e64a83a8382704a56e5162728a2a2a0\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__8e64a83a8382704a56e5162728a2a2a0.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect subscriber_key\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber\nwhere subscriber_key is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "subscriber_key",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "subscriber_key",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_key__subscriber_key__source_party_analytics_ccdf_x__agreement_.b35a8ab6ad": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "relationships_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_key__subscriber_key__source_party_analytics_ccdf_x__agreement_",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "relationships_ccdf_xtra_ps_fok_d97e24869847888298be2a643116f6f3.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_key__subscriber_key__source_party_analytics_ccdf_x__agreement_.b35a8ab6ad",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "relationships_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_key__subscriber_key__source_party_analytics_ccdf_x__agreement_"
            ],
            "alias": "relationships_ccdf_xtra_ps_fok_d97e24869847888298be2a643116f6f3",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "relationships_ccdf_xtra_ps_fok_d97e24869847888298be2a643116f6f3",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/relationships_ccdf_xtra_ps_fok_d97e24869847888298be2a643116f6f3.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "relationships_ccdf_xtra_ps_fok_d97e24869847888298be2a643116f6f3"
            },
            "created_at": 1744635194.292264,
            "relation_name": null,
            "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_ccdf_xtra_ps_fok_d97e24869847888298be2a643116f6f3\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [
                [
                    "party_analytics",
                    "ccdf_x__agreement"
                ]
            ],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_relationships",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_x__agreement",
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/relationships_ccdf_xtra_ps_fok_d97e24869847888298be2a643116f6f3.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\nwith child as (\n    select subscriber_key as from_field\n    from NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber\n    where subscriber_key is not null\n),\n\nparent as (\n    select subscriber_key as to_field\n    from NGA_DB_RAFT.party_analytics.ccdf_x__agreement\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "subscriber_key",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "test_metadata": {
                "name": "relationships",
                "kwargs": {
                    "to": "source('party_analytics', 'ccdf_x__agreement')",
                    "field": "subscriber_key",
                    "column_name": "subscriber_key",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.unique_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_key.fbde9fa48a": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "unique_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_key",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "unique_ccdf_xtra_ps_fokus_x__a_89d2b7f09172a3b39faa624873407aa7.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.unique_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_key.fbde9fa48a",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "unique_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_key"
            ],
            "alias": "unique_ccdf_xtra_ps_fokus_x__a_89d2b7f09172a3b39faa624873407aa7",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "unique_ccdf_xtra_ps_fokus_x__a_89d2b7f09172a3b39faa624873407aa7",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/unique_ccdf_xtra_ps_fokus_x__a_89d2b7f09172a3b39faa624873407aa7.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "unique_ccdf_xtra_ps_fokus_x__a_89d2b7f09172a3b39faa624873407aa7"
            },
            "created_at": 1744635194.29391,
            "relation_name": null,
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_ccdf_xtra_ps_fokus_x__a_89d2b7f09172a3b39faa624873407aa7\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/unique_ccdf_xtra_ps_fokus_x__a_89d2b7f09172a3b39faa624873407aa7.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\nselect\n    subscriber_key as unique_field,\n    count(*) as n_records\n\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber\nwhere subscriber_key is not null\ngroup by subscriber_key\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "subscriber_key",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "subscriber_key",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_ban.6e3ffec0c2": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_ban",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_ban.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_ban.6e3ffec0c2",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_ban"
            ],
            "alias": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_ban",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_ban.sql",
            "unrendered_config": {
                "severity": "warn"
            },
            "created_at": 1744635194.294407,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_ban.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect ban\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber\nwhere ban is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "ban",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "ban",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_additional_discount_price.6639f42392": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_additional_discount_price",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "not_null_ccdf_xtra_ps_fokus_x__87e3f9faca72a6863f31873801c26066.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_additional_discount_price.6639f42392",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_additional_discount_price"
            ],
            "alias": "not_null_ccdf_xtra_ps_fokus_x__87e3f9faca72a6863f31873801c26066",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "not_null_ccdf_xtra_ps_fokus_x__87e3f9faca72a6863f31873801c26066",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__87e3f9faca72a6863f31873801c26066.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "not_null_ccdf_xtra_ps_fokus_x__87e3f9faca72a6863f31873801c26066"
            },
            "created_at": 1744635194.294898,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_ccdf_xtra_ps_fokus_x__87e3f9faca72a6863f31873801c26066\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__87e3f9faca72a6863f31873801c26066.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect additional_discount_price\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber\nwhere additional_discount_price is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "additional_discount_price",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "additional_discount_price",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_product_id.724e6155c8": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_product_id",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "not_null_ccdf_xtra_ps_fokus_x__dc9247aba8ffcb7a5afe39d51e4e4d7b.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_product_id.724e6155c8",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_product_id"
            ],
            "alias": "not_null_ccdf_xtra_ps_fokus_x__dc9247aba8ffcb7a5afe39d51e4e4d7b",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "not_null_ccdf_xtra_ps_fokus_x__dc9247aba8ffcb7a5afe39d51e4e4d7b",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__dc9247aba8ffcb7a5afe39d51e4e4d7b.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "not_null_ccdf_xtra_ps_fokus_x__dc9247aba8ffcb7a5afe39d51e4e4d7b"
            },
            "created_at": 1744635194.295409,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_ccdf_xtra_ps_fokus_x__dc9247aba8ffcb7a5afe39d51e4e4d7b\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__dc9247aba8ffcb7a5afe39d51e4e4d7b.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber\nwhere product_id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "product_id",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "product_id",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_id.163ebedd88": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_id",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "not_null_ccdf_xtra_ps_fokus_x__d998dcab806cb9e93d1e7845e5defba6.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_id.163ebedd88",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_id"
            ],
            "alias": "not_null_ccdf_xtra_ps_fokus_x__d998dcab806cb9e93d1e7845e5defba6",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "not_null_ccdf_xtra_ps_fokus_x__d998dcab806cb9e93d1e7845e5defba6",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__d998dcab806cb9e93d1e7845e5defba6.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "not_null_ccdf_xtra_ps_fokus_x__d998dcab806cb9e93d1e7845e5defba6"
            },
            "created_at": 1744635194.295918,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_ccdf_xtra_ps_fokus_x__d998dcab806cb9e93d1e7845e5defba6\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__d998dcab806cb9e93d1e7845e5defba6.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect subscriber_id\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber\nwhere subscriber_id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "subscriber_id",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "subscriber_id",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_id__subscriber_id__source_party_analytics_ccdf_x__agreement_.a2e40c734e": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "relationships_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_id__subscriber_id__source_party_analytics_ccdf_x__agreement_",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "relationships_ccdf_xtra_ps_fok_375e0ffc8c661385df88a08b36566127.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_id__subscriber_id__source_party_analytics_ccdf_x__agreement_.a2e40c734e",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "relationships_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_id__subscriber_id__source_party_analytics_ccdf_x__agreement_"
            ],
            "alias": "relationships_ccdf_xtra_ps_fok_375e0ffc8c661385df88a08b36566127",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "relationships_ccdf_xtra_ps_fok_375e0ffc8c661385df88a08b36566127",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/relationships_ccdf_xtra_ps_fok_375e0ffc8c661385df88a08b36566127.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "relationships_ccdf_xtra_ps_fok_375e0ffc8c661385df88a08b36566127"
            },
            "created_at": 1744635194.296482,
            "relation_name": null,
            "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_ccdf_xtra_ps_fok_375e0ffc8c661385df88a08b36566127\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [
                [
                    "party_analytics",
                    "ccdf_x__agreement"
                ]
            ],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_relationships",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_x__agreement",
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/relationships_ccdf_xtra_ps_fok_375e0ffc8c661385df88a08b36566127.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\nwith child as (\n    select subscriber_id as from_field\n    from NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber\n    where subscriber_id is not null\n),\n\nparent as (\n    select subscriber_id as to_field\n    from NGA_DB_RAFT.party_analytics.ccdf_x__agreement\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "subscriber_id",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "test_metadata": {
                "name": "relationships",
                "kwargs": {
                    "to": "source('party_analytics', 'ccdf_x__agreement')",
                    "field": "subscriber_id",
                    "column_name": "subscriber_id",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.unique_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_id.49a89eb6ed": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "unique_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_id",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "unique_ccdf_xtra_ps_fokus_x__a_c6c2833de96198b6d953260ad5b596b0.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.unique_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_id.49a89eb6ed",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "unique_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_id"
            ],
            "alias": "unique_ccdf_xtra_ps_fokus_x__a_c6c2833de96198b6d953260ad5b596b0",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "unique_ccdf_xtra_ps_fokus_x__a_c6c2833de96198b6d953260ad5b596b0",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/unique_ccdf_xtra_ps_fokus_x__a_c6c2833de96198b6d953260ad5b596b0.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "unique_ccdf_xtra_ps_fokus_x__a_c6c2833de96198b6d953260ad5b596b0"
            },
            "created_at": 1744635194.2980428,
            "relation_name": null,
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_ccdf_xtra_ps_fokus_x__a_c6c2833de96198b6d953260ad5b596b0\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/unique_ccdf_xtra_ps_fokus_x__a_c6c2833de96198b6d953260ad5b596b0.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\nselect\n    subscriber_id as unique_field,\n    count(*) as n_records\n\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber\nwhere subscriber_id is not null\ngroup by subscriber_id\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "subscriber_id",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "subscriber_id",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_telia_xstart_50nok_discount_price.ffaebb3203": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_telia_xstart_50nok_discount_price",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "not_null_ccdf_xtra_ps_fokus_x__59190a73ab0da3c8764999bc9ba8e97d.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_telia_xstart_50nok_discount_price.ffaebb3203",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_telia_xstart_50nok_discount_price"
            ],
            "alias": "not_null_ccdf_xtra_ps_fokus_x__59190a73ab0da3c8764999bc9ba8e97d",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "not_null_ccdf_xtra_ps_fokus_x__59190a73ab0da3c8764999bc9ba8e97d",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__59190a73ab0da3c8764999bc9ba8e97d.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "not_null_ccdf_xtra_ps_fokus_x__59190a73ab0da3c8764999bc9ba8e97d"
            },
            "created_at": 1744635194.2985458,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_ccdf_xtra_ps_fokus_x__59190a73ab0da3c8764999bc9ba8e97d\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__59190a73ab0da3c8764999bc9ba8e97d.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect telia_xstart_50nok_discount_price\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber\nwhere telia_xstart_50nok_discount_price is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "telia_xstart_50nok_discount_price",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "telia_xstart_50nok_discount_price",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_product_payment_type.913bc003a0": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_product_payment_type",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "not_null_ccdf_xtra_ps_fokus_x__2e2a0f451ce021f62ddd3d4661d78425.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_product_payment_type.913bc003a0",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_product_payment_type"
            ],
            "alias": "not_null_ccdf_xtra_ps_fokus_x__2e2a0f451ce021f62ddd3d4661d78425",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "not_null_ccdf_xtra_ps_fokus_x__2e2a0f451ce021f62ddd3d4661d78425",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__2e2a0f451ce021f62ddd3d4661d78425.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "not_null_ccdf_xtra_ps_fokus_x__2e2a0f451ce021f62ddd3d4661d78425"
            },
            "created_at": 1744635194.299137,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_ccdf_xtra_ps_fokus_x__2e2a0f451ce021f62ddd3d4661d78425\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__2e2a0f451ce021f62ddd3d4661d78425.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect product_payment_type\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber\nwhere product_payment_type is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "product_payment_type",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "product_payment_type",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_event_date.7a681099db": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_event_date",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "not_null_ccdf_xtra_ps_fokus_x__0bd4f6c5ac7a49dc8dcfc4e7e77594e0.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_event_date.7a681099db",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_event_date"
            ],
            "alias": "not_null_ccdf_xtra_ps_fokus_x__0bd4f6c5ac7a49dc8dcfc4e7e77594e0",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "not_null_ccdf_xtra_ps_fokus_x__0bd4f6c5ac7a49dc8dcfc4e7e77594e0",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__0bd4f6c5ac7a49dc8dcfc4e7e77594e0.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "not_null_ccdf_xtra_ps_fokus_x__0bd4f6c5ac7a49dc8dcfc4e7e77594e0"
            },
            "created_at": 1744635194.299642,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_ccdf_xtra_ps_fokus_x__0bd4f6c5ac7a49dc8dcfc4e7e77594e0\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__0bd4f6c5ac7a49dc8dcfc4e7e77594e0.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect event_date\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber\nwhere event_date is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "event_date",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "event_date",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_priceplan_group_code.bb2d85f3bf": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_priceplan_group_code",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "not_null_ccdf_xtra_ps_fokus_x__8cb9f63198a8e3f06db5f4091b80ae99.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_priceplan_group_code.bb2d85f3bf",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_priceplan_group_code"
            ],
            "alias": "not_null_ccdf_xtra_ps_fokus_x__8cb9f63198a8e3f06db5f4091b80ae99",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "not_null_ccdf_xtra_ps_fokus_x__8cb9f63198a8e3f06db5f4091b80ae99",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__8cb9f63198a8e3f06db5f4091b80ae99.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "not_null_ccdf_xtra_ps_fokus_x__8cb9f63198a8e3f06db5f4091b80ae99"
            },
            "created_at": 1744635194.300151,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_ccdf_xtra_ps_fokus_x__8cb9f63198a8e3f06db5f4091b80ae99\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/not_null_ccdf_xtra_ps_fokus_x__8cb9f63198a8e3f06db5f4091b80ae99.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect priceplan_group_code\nfrom NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber\nwhere priceplan_group_code is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "priceplan_group_code",
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "priceplan_group_code",
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber')) }}"
                },
                "namespace": null
            }
        },
        "test.ccdf_xtra_ps_fokus_x.dbt_utils_unique_combination_of_columns_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_SUBSCRIBER_KEY.d1053f16cb": {
            "database": "NGA_DB_RAFT",
            "schema": "dbt_test__audit",
            "name": "dbt_utils_unique_combination_of_columns_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_SUBSCRIBER_KEY",
            "resource_type": "test",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "dbt_utils_unique_combination_o_ebbc7fc002f902e251da84125966cab3.sql",
            "original_file_path": "models/party_analytics/party_analytics_schema.yml",
            "unique_id": "test.ccdf_xtra_ps_fokus_x.dbt_utils_unique_combination_of_columns_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_SUBSCRIBER_KEY.d1053f16cb",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "dbt_utils_unique_combination_of_columns_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_SUBSCRIBER_KEY"
            ],
            "alias": "dbt_utils_unique_combination_o_ebbc7fc002f902e251da84125966cab3",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_unique_combination_o_ebbc7fc002f902e251da84125966cab3",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": "target/run/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/dbt_utils_unique_combination_o_ebbc7fc002f902e251da84125966cab3.sql",
            "unrendered_config": {
                "severity": "warn",
                "alias": "dbt_utils_unique_combination_o_ebbc7fc002f902e251da84125966cab3"
            },
            "created_at": 1744635194.300659,
            "relation_name": null,
            "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_ebbc7fc002f902e251da84125966cab3\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_unique_combination_of_columns",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ],
                "nodes": [
                    "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
                ]
            },
            "compiled_path": "target/compiled/ccdf_xtra_ps_fokus_x/models/party_analytics/party_analytics_schema.yml/dbt_utils_unique_combination_o_ebbc7fc002f902e251da84125966cab3.sql",
            "compiled": true,
            "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        SUBSCRIBER_KEY\n    from NGA_DB_RAFT.PARTY_ANALYTICS.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber\n    group by SUBSCRIBER_KEY\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": null,
            "file_key_name": "models.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "attached_node": "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "test_metadata": {
                "name": "unique_combination_of_columns",
                "kwargs": {
                    "combination_of_columns": [
                        "SUBSCRIBER_KEY"
                    ],
                    "model": "{{ get_where_subquery(ref('ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber')) }}"
                },
                "namespace": "dbt_utils"
            }
        }
    },
    "sources": {
        "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_x__agreement": {
            "database": "NGA_DB_RAFT",
            "schema": "party_analytics",
            "name": "ccdf_x__agreement",
            "resource_type": "source",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "models/sources.yml",
            "original_file_path": "models/sources.yml",
            "unique_id": "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_x__agreement",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "ccdf_x__agreement"
            ],
            "source_name": "party_analytics",
            "source_description": "",
            "loader": "",
            "identifier": "ccdf_x__agreement",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true,
                "event_time": null
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "NGA_DB_RAFT.party_analytics.ccdf_x__agreement",
            "created_at": 1744635194.304359,
            "unrendered_database": "{{ target.database }}",
            "unrendered_schema": "party_analytics"
        },
        "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_x__dealer": {
            "database": "NGA_DB_RAFT",
            "schema": "party_analytics",
            "name": "ccdf_x__dealer",
            "resource_type": "source",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "models/sources.yml",
            "original_file_path": "models/sources.yml",
            "unique_id": "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_x__dealer",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "ccdf_x__dealer"
            ],
            "source_name": "party_analytics",
            "source_description": "",
            "loader": "",
            "identifier": "ccdf_x__dealer",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true,
                "event_time": null
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "NGA_DB_RAFT.party_analytics.ccdf_x__dealer",
            "created_at": 1744635194.304915,
            "unrendered_database": "{{ target.database }}",
            "unrendered_schema": "party_analytics"
        },
        "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_x__abt_porting": {
            "database": "NGA_DB_RAFT",
            "schema": "party_analytics",
            "name": "ccdf_x__abt_porting",
            "resource_type": "source",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "models/sources.yml",
            "original_file_path": "models/sources.yml",
            "unique_id": "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_x__abt_porting",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "ccdf_x__abt_porting"
            ],
            "source_name": "party_analytics",
            "source_description": "",
            "loader": "",
            "identifier": "ccdf_x__abt_porting",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true,
                "event_time": null
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "NGA_DB_RAFT.party_analytics.ccdf_x__abt_porting",
            "created_at": 1744635194.304987,
            "unrendered_database": "{{ target.database }}",
            "unrendered_schema": "party_analytics"
        },
        "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_x__campaign": {
            "database": "NGA_DB_RAFT",
            "schema": "party_analytics",
            "name": "ccdf_x__campaign",
            "resource_type": "source",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "models/sources.yml",
            "original_file_path": "models/sources.yml",
            "unique_id": "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_x__campaign",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "ccdf_x__campaign"
            ],
            "source_name": "party_analytics",
            "source_description": "",
            "loader": "",
            "identifier": "ccdf_x__campaign",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true,
                "event_time": null
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "NGA_DB_RAFT.party_analytics.ccdf_x__campaign",
            "created_at": 1744635194.305048,
            "unrendered_database": "{{ target.database }}",
            "unrendered_schema": "party_analytics"
        },
        "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_x__operator": {
            "database": "NGA_DB_RAFT",
            "schema": "party_analytics",
            "name": "ccdf_x__operator",
            "resource_type": "source",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "models/sources.yml",
            "original_file_path": "models/sources.yml",
            "unique_id": "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_x__operator",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "ccdf_x__operator"
            ],
            "source_name": "party_analytics",
            "source_description": "",
            "loader": "",
            "identifier": "ccdf_x__operator",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true,
                "event_time": null
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "NGA_DB_RAFT.party_analytics.ccdf_x__operator",
            "created_at": 1744635194.3051698,
            "unrendered_database": "{{ target.database }}",
            "unrendered_schema": "party_analytics"
        },
        "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_abt_x__abt_main_product_change": {
            "database": "NGA_DB_RAFT",
            "schema": "party_analytics",
            "name": "ccdf_abt_x__abt_main_product_change",
            "resource_type": "source",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "models/sources.yml",
            "original_file_path": "models/sources.yml",
            "unique_id": "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_abt_x__abt_main_product_change",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "ccdf_abt_x__abt_main_product_change"
            ],
            "source_name": "party_analytics",
            "source_description": "",
            "loader": "",
            "identifier": "ccdf_abt_x__abt_main_product_change",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true,
                "event_time": null
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "NGA_DB_RAFT.party_analytics.ccdf_abt_x__abt_main_product_change",
            "created_at": 1744635194.3052769,
            "unrendered_database": "{{ target.database }}",
            "unrendered_schema": "party_analytics"
        },
        "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_x__abt_subscriber_grosschurn": {
            "database": "NGA_DB_RAFT",
            "schema": "party_analytics",
            "name": "ccdf_x__abt_subscriber_grosschurn",
            "resource_type": "source",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "models/sources.yml",
            "original_file_path": "models/sources.yml",
            "unique_id": "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_x__abt_subscriber_grosschurn",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "ccdf_x__abt_subscriber_grosschurn"
            ],
            "source_name": "party_analytics",
            "source_description": "",
            "loader": "",
            "identifier": "ccdf_x__abt_subscriber_grosschurn",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true,
                "event_time": null
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "NGA_DB_RAFT.party_analytics.ccdf_x__abt_subscriber_grosschurn",
            "created_at": 1744635194.3053381,
            "unrendered_database": "{{ target.database }}",
            "unrendered_schema": "party_analytics"
        },
        "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_x__subscriber": {
            "database": "NGA_DB_RAFT",
            "schema": "party_analytics",
            "name": "ccdf_x__subscriber",
            "resource_type": "source",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "models/sources.yml",
            "original_file_path": "models/sources.yml",
            "unique_id": "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_x__subscriber",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "ccdf_x__subscriber"
            ],
            "source_name": "party_analytics",
            "source_description": "",
            "loader": "",
            "identifier": "ccdf_x__subscriber",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true,
                "event_time": null
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "NGA_DB_RAFT.party_analytics.ccdf_x__subscriber",
            "created_at": 1744635194.305418,
            "unrendered_database": "{{ target.database }}",
            "unrendered_schema": "party_analytics"
        },
        "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_demographics_x__demography_household_link": {
            "database": "NGA_DB_RAFT",
            "schema": "party_analytics",
            "name": "ccdf_demographics_x__demography_household_link",
            "resource_type": "source",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "models/sources.yml",
            "original_file_path": "models/sources.yml",
            "unique_id": "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_demographics_x__demography_household_link",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "ccdf_demographics_x__demography_household_link"
            ],
            "source_name": "party_analytics",
            "source_description": "",
            "loader": "",
            "identifier": "ccdf_demographics_x__demography_household_link",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true,
                "event_time": null
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "NGA_DB_RAFT.party_analytics.ccdf_demographics_x__demography_household_link",
            "created_at": 1744635194.3054762,
            "unrendered_database": "{{ target.database }}",
            "unrendered_schema": "party_analytics"
        },
        "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_demographics_x__demography": {
            "database": "NGA_DB_RAFT",
            "schema": "party_analytics",
            "name": "ccdf_demographics_x__demography",
            "resource_type": "source",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "models/sources.yml",
            "original_file_path": "models/sources.yml",
            "unique_id": "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_demographics_x__demography",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "ccdf_demographics_x__demography"
            ],
            "source_name": "party_analytics",
            "source_description": "",
            "loader": "",
            "identifier": "ccdf_demographics_x__demography",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true,
                "event_time": null
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "NGA_DB_RAFT.party_analytics.ccdf_demographics_x__demography",
            "created_at": 1744635194.305534,
            "unrendered_database": "{{ target.database }}",
            "unrendered_schema": "party_analytics"
        },
        "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_x__account": {
            "database": "NGA_DB_RAFT",
            "schema": "party_analytics",
            "name": "ccdf_x__account",
            "resource_type": "source",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "models/sources.yml",
            "original_file_path": "models/sources.yml",
            "unique_id": "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_x__account",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_analytics",
                "ccdf_x__account"
            ],
            "source_name": "party_analytics",
            "source_description": "",
            "loader": "",
            "identifier": "ccdf_x__account",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true,
                "event_time": null
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "NGA_DB_RAFT.party_analytics.ccdf_x__account",
            "created_at": 1744635194.305589,
            "unrendered_database": "{{ target.database }}",
            "unrendered_schema": "party_analytics"
        },
        "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__abt_subscriber_grosschurn": {
            "database": "NGA_DB_RAFT",
            "schema": "party_base",
            "name": "ccdf_core_fokus_x_party_base__abt_subscriber_grosschurn",
            "resource_type": "source",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "models/sources.yml",
            "original_file_path": "models/sources.yml",
            "unique_id": "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__abt_subscriber_grosschurn",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_base",
                "ccdf_core_fokus_x_party_base__abt_subscriber_grosschurn"
            ],
            "source_name": "party_base",
            "source_description": "",
            "loader": "",
            "identifier": "ccdf_core_fokus_x_party_base__abt_subscriber_grosschurn",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true,
                "event_time": null
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "NGA_DB_RAFT.party_base.ccdf_core_fokus_x_party_base__abt_subscriber_grosschurn",
            "created_at": 1744635194.3056462,
            "unrendered_database": "{{ target.database }}",
            "unrendered_schema": "party_base"
        },
        "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__subscriber_c": {
            "database": "NGA_DB_RAFT",
            "schema": "party_base",
            "name": "ccdf_core_fokus_x_party_base__subscriber_c",
            "resource_type": "source",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "models/sources.yml",
            "original_file_path": "models/sources.yml",
            "unique_id": "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__subscriber_c",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_base",
                "ccdf_core_fokus_x_party_base__subscriber_c"
            ],
            "source_name": "party_base",
            "source_description": "",
            "loader": "",
            "identifier": "ccdf_core_fokus_x_party_base__subscriber_c",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true,
                "event_time": null
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "NGA_DB_RAFT.party_base.ccdf_core_fokus_x_party_base__subscriber_c",
            "created_at": 1744635194.305703,
            "unrendered_database": "{{ target.database }}",
            "unrendered_schema": "party_base"
        },
        "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__account_c": {
            "database": "NGA_DB_RAFT",
            "schema": "party_base",
            "name": "ccdf_core_fokus_x_party_base__account_c",
            "resource_type": "source",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "models/sources.yml",
            "original_file_path": "models/sources.yml",
            "unique_id": "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__account_c",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_base",
                "ccdf_core_fokus_x_party_base__account_c"
            ],
            "source_name": "party_base",
            "source_description": "",
            "loader": "",
            "identifier": "ccdf_core_fokus_x_party_base__account_c",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true,
                "event_time": null
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "NGA_DB_RAFT.party_base.ccdf_core_fokus_x_party_base__account_c",
            "created_at": 1744635194.305752,
            "unrendered_database": "{{ target.database }}",
            "unrendered_schema": "party_base"
        },
        "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__contact_info_c": {
            "database": "NGA_DB_RAFT",
            "schema": "party_base",
            "name": "ccdf_core_fokus_x_party_base__contact_info_c",
            "resource_type": "source",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "models/sources.yml",
            "original_file_path": "models/sources.yml",
            "unique_id": "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__contact_info_c",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_base",
                "ccdf_core_fokus_x_party_base__contact_info_c"
            ],
            "source_name": "party_base",
            "source_description": "",
            "loader": "",
            "identifier": "ccdf_core_fokus_x_party_base__contact_info_c",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true,
                "event_time": null
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "NGA_DB_RAFT.party_base.ccdf_core_fokus_x_party_base__contact_info_c",
            "created_at": 1744635194.305799,
            "unrendered_database": "{{ target.database }}",
            "unrendered_schema": "party_base"
        },
        "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__abt_subscriber_lifetime": {
            "database": "NGA_DB_RAFT",
            "schema": "party_base",
            "name": "ccdf_core_fokus_x_party_base__abt_subscriber_lifetime",
            "resource_type": "source",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "models/sources.yml",
            "original_file_path": "models/sources.yml",
            "unique_id": "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__abt_subscriber_lifetime",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_base",
                "ccdf_core_fokus_x_party_base__abt_subscriber_lifetime"
            ],
            "source_name": "party_base",
            "source_description": "",
            "loader": "",
            "identifier": "ccdf_core_fokus_x_party_base__abt_subscriber_lifetime",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true,
                "event_time": null
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "NGA_DB_RAFT.party_base.ccdf_core_fokus_x_party_base__abt_subscriber_lifetime",
            "created_at": 1744635194.305857,
            "unrendered_database": "{{ target.database }}",
            "unrendered_schema": "party_base"
        },
        "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_ps_fokus_x_party_base__agreement": {
            "database": "NGA_DB_RAFT",
            "schema": "party_base",
            "name": "ccdf_ps_fokus_x_party_base__agreement",
            "resource_type": "source",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "models/sources.yml",
            "original_file_path": "models/sources.yml",
            "unique_id": "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_ps_fokus_x_party_base__agreement",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_base",
                "ccdf_ps_fokus_x_party_base__agreement"
            ],
            "source_name": "party_base",
            "source_description": "",
            "loader": "",
            "identifier": "ccdf_ps_fokus_x_party_base__agreement",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true,
                "event_time": null
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "NGA_DB_RAFT.party_base.ccdf_ps_fokus_x_party_base__agreement",
            "created_at": 1744635194.305911,
            "unrendered_database": "{{ target.database }}",
            "unrendered_schema": "party_base"
        },
        "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_ps_fokus_x_party_base__product_c": {
            "database": "NGA_DB_RAFT",
            "schema": "party_base",
            "name": "ccdf_ps_fokus_x_party_base__product_c",
            "resource_type": "source",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "models/sources.yml",
            "original_file_path": "models/sources.yml",
            "unique_id": "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_ps_fokus_x_party_base__product_c",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_base",
                "ccdf_ps_fokus_x_party_base__product_c"
            ],
            "source_name": "party_base",
            "source_description": "",
            "loader": "",
            "identifier": "ccdf_ps_fokus_x_party_base__product_c",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true,
                "event_time": null
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "NGA_DB_RAFT.party_base.ccdf_ps_fokus_x_party_base__product_c",
            "created_at": 1744635194.305968,
            "unrendered_database": "{{ target.database }}",
            "unrendered_schema": "party_base"
        },
        "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__abt_porting": {
            "database": "NGA_DB_RAFT",
            "schema": "party_base",
            "name": "ccdf_core_fokus_x_party_base__abt_porting",
            "resource_type": "source",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "models/sources.yml",
            "original_file_path": "models/sources.yml",
            "unique_id": "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__abt_porting",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_base",
                "ccdf_core_fokus_x_party_base__abt_porting"
            ],
            "source_name": "party_base",
            "source_description": "",
            "loader": "",
            "identifier": "ccdf_core_fokus_x_party_base__abt_porting",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true,
                "event_time": null
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "NGA_DB_RAFT.party_base.ccdf_core_fokus_x_party_base__abt_porting",
            "created_at": 1744635194.3060238,
            "unrendered_database": "{{ target.database }}",
            "unrendered_schema": "party_base"
        },
        "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_abt_fokus_x_party_base__abt_commitment_benefit": {
            "database": "NGA_DB_RAFT",
            "schema": "party_base",
            "name": "ccdf_abt_fokus_x_party_base__abt_commitment_benefit",
            "resource_type": "source",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "models/sources.yml",
            "original_file_path": "models/sources.yml",
            "unique_id": "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_abt_fokus_x_party_base__abt_commitment_benefit",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_base",
                "ccdf_abt_fokus_x_party_base__abt_commitment_benefit"
            ],
            "source_name": "party_base",
            "source_description": "",
            "loader": "",
            "identifier": "ccdf_abt_fokus_x_party_base__abt_commitment_benefit",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true,
                "event_time": null
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "NGA_DB_RAFT.party_base.ccdf_abt_fokus_x_party_base__abt_commitment_benefit",
            "created_at": 1744635194.3060749,
            "unrendered_database": "{{ target.database }}",
            "unrendered_schema": "party_base"
        },
        "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_ip_x_party_base__fok_abt_invoice_detail": {
            "database": "NGA_DB_RAFT",
            "schema": "party_base",
            "name": "ccdf_ip_x_party_base__fok_abt_invoice_detail",
            "resource_type": "source",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "models/sources.yml",
            "original_file_path": "models/sources.yml",
            "unique_id": "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_ip_x_party_base__fok_abt_invoice_detail",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_base",
                "ccdf_ip_x_party_base__fok_abt_invoice_detail"
            ],
            "source_name": "party_base",
            "source_description": "",
            "loader": "",
            "identifier": "ccdf_ip_x_party_base__fok_abt_invoice_detail",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true,
                "event_time": null
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "NGA_DB_RAFT.party_base.ccdf_ip_x_party_base__fok_abt_invoice_detail",
            "created_at": 1744635194.3061361,
            "unrendered_database": "{{ target.database }}",
            "unrendered_schema": "party_base"
        },
        "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__operator": {
            "database": "NGA_DB_RAFT",
            "schema": "party_base",
            "name": "ccdf_core_fokus_x_party_base__operator",
            "resource_type": "source",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "models/sources.yml",
            "original_file_path": "models/sources.yml",
            "unique_id": "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__operator",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_base",
                "ccdf_core_fokus_x_party_base__operator"
            ],
            "source_name": "party_base",
            "source_description": "",
            "loader": "",
            "identifier": "ccdf_core_fokus_x_party_base__operator",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true,
                "event_time": null
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "NGA_DB_RAFT.party_base.ccdf_core_fokus_x_party_base__operator",
            "created_at": 1744635194.306188,
            "unrendered_database": "{{ target.database }}",
            "unrendered_schema": "party_base"
        },
        "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_ps_fokus_x_party_base__campaign_c": {
            "database": "NGA_DB_RAFT",
            "schema": "party_base",
            "name": "ccdf_ps_fokus_x_party_base__campaign_c",
            "resource_type": "source",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "models/sources.yml",
            "original_file_path": "models/sources.yml",
            "unique_id": "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_ps_fokus_x_party_base__campaign_c",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_base",
                "ccdf_ps_fokus_x_party_base__campaign_c"
            ],
            "source_name": "party_base",
            "source_description": "",
            "loader": "",
            "identifier": "ccdf_ps_fokus_x_party_base__campaign_c",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true,
                "event_time": null
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "NGA_DB_RAFT.party_base.ccdf_ps_fokus_x_party_base__campaign_c",
            "created_at": 1744635194.306245,
            "unrendered_database": "{{ target.database }}",
            "unrendered_schema": "party_base"
        },
        "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__dealer_c": {
            "database": "NGA_DB_RAFT",
            "schema": "party_base",
            "name": "ccdf_core_fokus_x_party_base__dealer_c",
            "resource_type": "source",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "models/sources.yml",
            "original_file_path": "models/sources.yml",
            "unique_id": "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__dealer_c",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_base",
                "ccdf_core_fokus_x_party_base__dealer_c"
            ],
            "source_name": "party_base",
            "source_description": "",
            "loader": "",
            "identifier": "ccdf_core_fokus_x_party_base__dealer_c",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true,
                "event_time": null
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "NGA_DB_RAFT.party_base.ccdf_core_fokus_x_party_base__dealer_c",
            "created_at": 1744635194.306308,
            "unrendered_database": "{{ target.database }}",
            "unrendered_schema": "party_base"
        },
        "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_ps_fokus_x_party_base__agreement_xtra_commitment_benefit": {
            "database": "NGA_DB_RAFT",
            "schema": "party_base",
            "name": "ccdf_ps_fokus_x_party_base__agreement_xtra_commitment_benefit",
            "resource_type": "source",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "models/sources.yml",
            "original_file_path": "models/sources.yml",
            "unique_id": "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_ps_fokus_x_party_base__agreement_xtra_commitment_benefit",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_base",
                "ccdf_ps_fokus_x_party_base__agreement_xtra_commitment_benefit"
            ],
            "source_name": "party_base",
            "source_description": "",
            "loader": "",
            "identifier": "ccdf_ps_fokus_x_party_base__agreement_xtra_commitment_benefit",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true,
                "event_time": null
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "NGA_DB_RAFT.party_base.ccdf_ps_fokus_x_party_base__agreement_xtra_commitment_benefit",
            "created_at": 1744635194.306365,
            "unrendered_database": "{{ target.database }}",
            "unrendered_schema": "party_base"
        },
        "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_ps_fokus_x_party_base__subscriber_family_rank_c": {
            "database": "NGA_DB_RAFT",
            "schema": "party_base",
            "name": "ccdf_ps_fokus_x_party_base__subscriber_family_rank_c",
            "resource_type": "source",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "models/sources.yml",
            "original_file_path": "models/sources.yml",
            "unique_id": "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_ps_fokus_x_party_base__subscriber_family_rank_c",
            "fqn": [
                "ccdf_xtra_ps_fokus_x",
                "party_base",
                "ccdf_ps_fokus_x_party_base__subscriber_family_rank_c"
            ],
            "source_name": "party_base",
            "source_description": "",
            "loader": "",
            "identifier": "ccdf_ps_fokus_x_party_base__subscriber_family_rank_c",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true,
                "event_time": null
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "NGA_DB_RAFT.party_base.ccdf_ps_fokus_x_party_base__subscriber_family_rank_c",
            "created_at": 1744635194.306426,
            "unrendered_database": "{{ target.database }}",
            "unrendered_schema": "party_base"
        }
    },
    "macros": {
        "macro.ccdf_xtra_ps_fokus_x.generate_schema_name": {
            "name": "generate_schema_name",
            "resource_type": "macro",
            "package_name": "ccdf_xtra_ps_fokus_x",
            "path": "macros/generate_schema_name.sql",
            "original_file_path": "macros/generate_schema_name.sql",
            "unique_id": "macro.ccdf_xtra_ps_fokus_x.generate_schema_name",
            "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.403104,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__get_catalog": {
            "name": "snowflake__get_catalog",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/catalog.sql",
            "original_file_path": "macros/catalog.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__get_catalog",
            "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n\n    {% set query %}\n        with tables as (\n            {{ snowflake__get_catalog_tables_sql(information_schema) }}\n            {{ snowflake__get_catalog_schemas_where_clause_sql(schemas) }}\n        ),\n        columns as (\n            {{ snowflake__get_catalog_columns_sql(information_schema) }}\n            {{ snowflake__get_catalog_schemas_where_clause_sql(schemas) }}\n        )\n        {{ snowflake__get_catalog_results_sql() }}\n    {%- endset -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__get_catalog_tables_sql",
                    "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql",
                    "macro.dbt_snowflake.snowflake__get_catalog_columns_sql",
                    "macro.dbt_snowflake.snowflake__get_catalog_results_sql",
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4037828,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__get_catalog_relations": {
            "name": "snowflake__get_catalog_relations",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/catalog.sql",
            "original_file_path": "macros/catalog.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_relations",
            "macro_sql": "{% macro snowflake__get_catalog_relations(information_schema, relations) -%}\n\n    {% set query %}\n        with tables as (\n            {{ snowflake__get_catalog_tables_sql(information_schema) }}\n            {{ snowflake__get_catalog_relations_where_clause_sql(relations) }}\n        ),\n        columns as (\n            {{ snowflake__get_catalog_columns_sql(information_schema) }}\n            {{ snowflake__get_catalog_relations_where_clause_sql(relations) }}\n        )\n        {{ snowflake__get_catalog_results_sql() }}\n    {%- endset -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__get_catalog_tables_sql",
                    "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql",
                    "macro.dbt_snowflake.snowflake__get_catalog_columns_sql",
                    "macro.dbt_snowflake.snowflake__get_catalog_results_sql",
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.404027,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__get_catalog_tables_sql": {
            "name": "snowflake__get_catalog_tables_sql",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/catalog.sql",
            "original_file_path": "macros/catalog.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_tables_sql",
            "macro_sql": "{% macro snowflake__get_catalog_tables_sql(information_schema) -%}\n    select\n        table_catalog as \"table_database\",\n        table_schema as \"table_schema\",\n        table_name as \"table_name\",\n        case\n            when is_dynamic = 'YES' and table_type = 'BASE TABLE' THEN 'DYNAMIC TABLE'\n            else table_type\n        end as \"table_type\",\n        comment as \"table_comment\",\n\n        -- note: this is the _role_ that owns the table\n        table_owner as \"table_owner\",\n\n        'Clustering Key' as \"stats:clustering_key:label\",\n        clustering_key as \"stats:clustering_key:value\",\n        'The key used to cluster this table' as \"stats:clustering_key:description\",\n        (clustering_key is not null) as \"stats:clustering_key:include\",\n\n        'Row Count' as \"stats:row_count:label\",\n        row_count as \"stats:row_count:value\",\n        'An approximate count of rows in this table' as \"stats:row_count:description\",\n        (row_count is not null) as \"stats:row_count:include\",\n\n        'Approximate Size' as \"stats:bytes:label\",\n        bytes as \"stats:bytes:value\",\n        'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n        (bytes is not null) as \"stats:bytes:include\",\n\n        'Last Modified' as \"stats:last_modified:label\",\n        to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n        'The timestamp for last update/change' as \"stats:last_modified:description\",\n        (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n    from {{ information_schema }}.tables\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4041831,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__get_catalog_columns_sql": {
            "name": "snowflake__get_catalog_columns_sql",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/catalog.sql",
            "original_file_path": "macros/catalog.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_columns_sql",
            "macro_sql": "{% macro snowflake__get_catalog_columns_sql(information_schema) -%}\n    select\n        table_catalog as \"table_database\",\n        table_schema as \"table_schema\",\n        table_name as \"table_name\",\n\n        column_name as \"column_name\",\n        ordinal_position as \"column_index\",\n        data_type as \"column_type\",\n        comment as \"column_comment\"\n    from {{ information_schema }}.columns\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.404268,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__get_catalog_results_sql": {
            "name": "snowflake__get_catalog_results_sql",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/catalog.sql",
            "original_file_path": "macros/catalog.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_results_sql",
            "macro_sql": "{% macro snowflake__get_catalog_results_sql() -%}\n    select *\n    from tables\n    join columns using (\"table_database\", \"table_schema\", \"table_name\")\n    order by \"column_index\"\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.404324,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__catalog_equals": {
            "name": "snowflake__catalog_equals",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/catalog.sql",
            "original_file_path": "macros/catalog.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__catalog_equals",
            "macro_sql": "{% macro snowflake__catalog_equals(field, value) %}\n    \"{{ field }}\" ilike '{{ value }}' and upper(\"{{ field }}\") = upper('{{ value }}')\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4044359,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql": {
            "name": "snowflake__get_catalog_schemas_where_clause_sql",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/catalog.sql",
            "original_file_path": "macros/catalog.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql",
            "macro_sql": "{% macro snowflake__get_catalog_schemas_where_clause_sql(schemas) -%}\n    where ({%- for schema in schemas -%}\n        ({{ snowflake__catalog_equals('table_schema', schema) }}){%- if not loop.last %} or {% endif -%}\n    {%- endfor -%})\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__catalog_equals"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.404618,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql": {
            "name": "snowflake__get_catalog_relations_where_clause_sql",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/catalog.sql",
            "original_file_path": "macros/catalog.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql",
            "macro_sql": "{% macro snowflake__get_catalog_relations_where_clause_sql(relations) -%}\n    where (\n        {%- for relation in relations -%}\n            {% if relation.schema and relation.identifier %}\n                (\n                    {{ snowflake__catalog_equals('table_schema', relation.schema) }}\n                    and {{ snowflake__catalog_equals('table_name', relation.identifier) }}\n                )\n            {% elif relation.schema %}\n                (\n                    {{ snowflake__catalog_equals('table_schema', relation.schema) }}\n                )\n            {% else %}\n                {% do exceptions.raise_compiler_error(\n                    '`get_catalog_relations` requires a list of relations, each with a schema'\n                ) %}\n            {% endif %}\n\n            {%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__catalog_equals"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.404981,
            "supported_languages": null
        },
        "macro.dbt_snowflake.get_column_comment_sql": {
            "name": "get_column_comment_sql",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_snowflake.get_column_comment_sql",
            "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.406542,
            "supported_languages": null
        },
        "macro.dbt_snowflake.get_persist_docs_column_list": {
            "name": "get_persist_docs_column_list",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_snowflake.get_persist_docs_column_list",
            "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.get_column_comment_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4067042,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__get_columns_in_relation": {
            "name": "snowflake__get_columns_in_relation",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation",
            "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation.render() }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation.render() }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4071481,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__show_object_metadata": {
            "name": "snowflake__show_object_metadata",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__show_object_metadata",
            "macro_sql": "{% macro snowflake__show_object_metadata(relation) %}\n  {%- set sql -%}\n    show objects in {{ relation.include(identifier=False) }} starts with '{{ relation.identifier }}' limit 1\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {{ return(result) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.407338,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__list_schemas": {
            "name": "snowflake__list_schemas",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__list_schemas",
            "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.407669,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__get_paginated_relations_array": {
            "name": "snowflake__get_paginated_relations_array",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__get_paginated_relations_array",
            "macro_sql": "{% macro snowflake__get_paginated_relations_array(max_iter, max_results_per_iter, max_total_results, schema_relation, watermark) %}\n\n  {% set paginated_relations = [] %}\n\n  {% for _ in range(0, max_iter) %}\n\n      {% if schema_relation is string %}\n        {%- set paginated_sql -%}\n          show objects in {{ schema_relation }} limit {{ max_results_per_iter }} from '{{ watermark.table_name }}'\n        {%- endset -%}\n      {% else %}\n        {%- set paginated_sql -%}\n          show objects in {{ schema_relation.include(identifier=False) }} limit {{ max_results_per_iter }} from '{{ watermark.table_name }}'\n        {%- endset -%}\n      {% endif -%}\n\n      {%- set paginated_result = run_query(paginated_sql) %}\n      {%- set paginated_n = (paginated_result | length) -%}\n\n      {#\n        terminating condition: if there are 0 records in the result we reached\n        the end exactly on the previous iteration\n      #}\n      {%- if paginated_n == 0 -%}\n        {%- break -%}\n      {%- endif -%}\n\n      {#\n        terminating condition: At some point the user needs to be reasonable with how\n        many objects are contained in their schemas. Since there was already\n        one iteration before attempting pagination, loop.index == max_iter means\n        the limit has been surpassed.\n      #}\n\n      {%- if loop.index == max_iter -%}\n        {%- set msg -%}\n            dbt is currently configured to list a maximum of {{ max_total_results }} objects per schema.\n            {{ schema_relation }} exceeds this limit. If this is expected, you may configure this limit\n            by setting list_relations_per_page and list_relations_page_limit in your project flags.\n            It is recommended to start by increasing list_relations_page_limit to something more than the default of 10.\n        {%- endset -%}\n\n        {% do exceptions.raise_compiler_error(msg) %}\n      {%- endif -%}\n\n      {%- do paginated_relations.append(paginated_result) -%}\n      {% set watermark.table_name = paginated_result.columns[1].values()[-1] %}\n\n      {#\n        terminating condition: paginated_n < max_results_per_iter means we reached the end\n      #}\n      {%- if paginated_n < max_results_per_iter -%}\n         {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n\n  {{ return(paginated_relations) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.408499,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__list_relations_without_caching": {
            "name": "snowflake__list_relations_without_caching",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching",
            "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation, max_iter=10, max_results_per_iter=10000) %}\n\n  {%- set max_results_per_iter = adapter.config.flags.get('list_relations_per_page', max_results_per_iter) -%}\n  {%- set max_iter = adapter.config.flags.get('list_relations_page_limit', max_iter) -%}\n  {%- set max_total_results = max_results_per_iter * max_iter -%}\n  {%- set sql -%}\n    {% if schema_relation is string %}\n      show objects in {{ schema_relation }} limit {{ max_results_per_iter }};\n    {% else %}\n      show objects in {{ schema_relation.include(identifier=False) }} limit {{ max_results_per_iter }};\n    {% endif -%}\n\n    {# -- Gated for performance reason. If you don't want Iceberg, you shouldn't pay the\n       -- latency penalty. #}\n    {% if adapter.behavior.enable_iceberg_materializations.no_warn %}\n      select all_objects.*, is_iceberg\n      from table(result_scan(last_query_id(-1))) all_objects\n      left join INFORMATION_SCHEMA.tables as all_tables\n        on all_tables.table_name = all_objects.\"name\"\n        and all_tables.table_schema = all_objects.\"schema_name\"\n        and all_tables.table_catalog = all_objects.\"database_name\"\n    {% endif -%}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n\n  {%- set n = (result | length) -%}\n  {%- set watermark = namespace(table_name=result.columns[1].values()[-1]) -%}\n  {%- set paginated = namespace(result=[]) -%}\n\n  {% if n >= max_results_per_iter %}\n\n    {% set paginated.result = snowflake__get_paginated_relations_array(\n         max_iter,\n         max_results_per_iter,\n         max_total_results,\n         schema_relation,\n         watermark\n       )\n    %}\n\n  {% endif %}\n\n  {%- set all_results_array = [result] + paginated.result -%}\n  {%- set result = result.merge(all_results_array) -%}\n  {%- do return(result) -%}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query",
                    "macro.dbt_snowflake.snowflake__get_paginated_relations_array"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.409271,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__check_schema_exists": {
            "name": "snowflake__check_schema_exists",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists",
            "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4094741,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__alter_column_type": {
            "name": "snowflake__alter_column_type",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__alter_column_type",
            "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter {{ relation.get_ddl_prefix_for_alter() }} table {{ relation.render() }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.409659,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__alter_relation_comment": {
            "name": "snowflake__alter_relation_comment",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment",
            "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n    {%- if relation.is_dynamic_table -%}\n        {%- set relation_type = 'dynamic table' -%}\n    {%- else -%}\n        {%- set relation_type = relation.type -%}\n    {%- endif -%}\n    comment on {{ relation_type }} {{ relation.render() }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.409866,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__alter_column_comment": {
            "name": "snowflake__alter_column_comment",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment",
            "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    {% if relation.is_dynamic_table -%}\n        {% set relation_type = \"table\" %}\n    {% else -%}\n        {% set relation_type = relation.type %}\n    {% endif %}\n    alter {{ relation.get_ddl_prefix_for_alter() }} {{ relation_type }} {{ relation.render() }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.get_column_comment_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.410271,
            "supported_languages": null
        },
        "macro.dbt_snowflake.get_current_query_tag": {
            "name": "get_current_query_tag",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_snowflake.get_current_query_tag",
            "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.410384,
            "supported_languages": null
        },
        "macro.dbt_snowflake.set_query_tag": {
            "name": "set_query_tag",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_snowflake.set_query_tag",
            "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__set_query_tag"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.41048,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__set_query_tag": {
            "name": "snowflake__set_query_tag",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__set_query_tag",
            "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.get_current_query_tag",
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.410762,
            "supported_languages": null
        },
        "macro.dbt_snowflake.unset_query_tag": {
            "name": "unset_query_tag",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_snowflake.unset_query_tag",
            "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__unset_query_tag"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4108758,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__unset_query_tag": {
            "name": "snowflake__unset_query_tag",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag",
            "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.411158,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {
            "name": "snowflake__alter_relation_add_remove_columns",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns",
            "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n    {% if relation.is_dynamic_table -%}\n        {% set relation_type = \"dynamic table\" %}\n    {% else -%}\n        {% set relation_type = relation.type %}\n    {% endif %}\n\n    {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.get_ddl_prefix_for_alter() }} {{ relation_type }} {{ relation.render() }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n    {% endif %}\n\n    {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.get_ddl_prefix_for_alter() }} {{ relation_type }} {{ relation.render() }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n    {% endif %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.411731,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {
            "name": "snowflake_dml_explicit_transaction",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction",
            "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4118662,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__truncate_relation": {
            "name": "snowflake__truncate_relation",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__truncate_relation",
            "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation.render() }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt_snowflake.snowflake_dml_explicit_transaction"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.412024,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__copy_grants": {
            "name": "snowflake__copy_grants",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/apply_grants.sql",
            "original_file_path": "macros/apply_grants.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__copy_grants",
            "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.412205,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {
            "name": "snowflake__support_multiple_grantees_per_dcl_statement",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/apply_grants.sql",
            "original_file_path": "macros/apply_grants.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement",
            "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4122748,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__get_relation_last_modified": {
            "name": "snowflake__get_relation_last_modified",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/metadata.sql",
            "original_file_path": "macros/metadata.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__get_relation_last_modified",
            "macro_sql": "{% macro snowflake__get_relation_last_modified(information_schema, relations) -%}\n\n  {%- call statement('last_modified', fetch_result=True) -%}\n        select table_schema as schema,\n               table_name as identifier,\n               last_altered as last_modified,\n               {{ current_timestamp() }} as snapshotted_at\n        from {{ information_schema }}.tables\n        where (\n          {%- for relation in relations -%}\n            (upper(table_schema) = upper('{{ relation.schema }}') and\n             upper(table_name) = upper('{{ relation.identifier }}')){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n  {%- endcall -%}\n\n  {{ return(load_result('last_modified')) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt.current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4126358,
            "supported_languages": null
        },
        "macro.dbt_snowflake.materialization_test_snowflake": {
            "name": "materialization_test_snowflake",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/materializations/test.sql",
            "original_file_path": "macros/materializations/test.sql",
            "unique_id": "macro.dbt_snowflake.materialization_test_snowflake",
            "macro_sql": "{%- materialization test, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_test_default() %}\n    {% do unset_query_tag(original_query_tag) %}\n    {{ return(relations) }}\n\n{%- endmaterialization -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_test_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4128551,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt_snowflake.snowflake__get_merge_sql": {
            "name": "snowflake__get_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/materializations/merge.sql",
            "original_file_path": "macros/materializations/merge.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql",
            "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv",
                    "macro.dbt.default__get_merge_sql",
                    "macro.dbt_snowflake.snowflake_dml_explicit_transaction"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.413562,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {
            "name": "snowflake__get_delete_insert_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/materializations/merge.sql",
            "original_file_path": "macros/materializations/merge.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql",
            "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_delete_insert_merge_sql",
                    "macro.dbt_snowflake.snowflake_dml_explicit_transaction"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4137442,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {
            "name": "snowflake__snapshot_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/materializations/merge.sql",
            "original_file_path": "macros/materializations/merge.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql",
            "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__snapshot_merge_sql",
                    "macro.dbt_snowflake.snowflake_dml_explicit_transaction"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.413894,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__get_incremental_append_sql": {
            "name": "snowflake__get_incremental_append_sql",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/materializations/merge.sql",
            "original_file_path": "macros/materializations/merge.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_append_sql",
            "macro_sql": "{% macro snowflake__get_incremental_append_sql(get_incremental_append_sql) %}\n    {% set dml = default__get_incremental_append_sql(get_incremental_append_sql) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_incremental_append_sql",
                    "macro.dbt_snowflake.snowflake_dml_explicit_transaction"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4140139,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__get_incremental_microbatch_sql": {
            "name": "snowflake__get_incremental_microbatch_sql",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/materializations/merge.sql",
            "original_file_path": "macros/materializations/merge.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_microbatch_sql",
            "macro_sql": "{% macro snowflake__get_incremental_microbatch_sql(arg_dict) %}\n    {%- set target = arg_dict[\"target_relation\"] -%}\n    {%- set source = arg_dict[\"temp_relation\"] -%}\n    {%- set dest_columns = arg_dict[\"dest_columns\"] -%}\n    {%- set incremental_predicates = [] if arg_dict.get('incremental_predicates') is none else arg_dict.get('incremental_predicates') -%}\n\n    {#-- Add additional incremental_predicates to filter for batch --#}\n    {% if model.batch and model.batch.event_time_start -%}\n        {% do incremental_predicates.append(\"DBT_INTERNAL_TARGET.\" ~ model.config.event_time ~ \" >= to_timestamp_tz('\" ~ model.config.__dbt_internal_microbatch_event_time_start ~ \"')\") %}\n    {% endif %}\n    {% if model.batch and model.batch.event_time_end -%}\n        {% do incremental_predicates.append(\"DBT_INTERNAL_TARGET.\" ~ model.config.event_time ~ \" < to_timestamp_tz('\" ~ model.config.__dbt_internal_microbatch_event_time_end ~ \"')\") %}\n    {% endif %}\n    {% do arg_dict.update({'incremental_predicates': incremental_predicates}) %}\n\n    delete from {{ target }} DBT_INTERNAL_TARGET\n    where (\n    {% for predicate in incremental_predicates %}\n        {%- if not loop.first %}and {% endif -%} {{ predicate }}\n    {% endfor %}\n    );\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4147022,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__load_csv_rows": {
            "name": "snowflake__load_csv_rows",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/materializations/seed.sql",
            "original_file_path": "macros/materializations/seed.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows",
            "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_batch_size",
                    "macro.dbt.get_seed_column_quoted_csv"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.415648,
            "supported_languages": null
        },
        "macro.dbt_snowflake.materialization_seed_snowflake": {
            "name": "materialization_seed_snowflake",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/materializations/seed.sql",
            "original_file_path": "macros/materializations/seed.sql",
            "unique_id": "macro.dbt_snowflake.materialization_seed_snowflake",
            "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_seed_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.41605,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt_snowflake.materialization_view_snowflake": {
            "name": "materialization_view_snowflake",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/materializations/view.sql",
            "original_file_path": "macros/materializations/view.sql",
            "unique_id": "macro.dbt_snowflake.materialization_view_snowflake",
            "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = snowflake__create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt_snowflake.snowflake__create_or_replace_view",
                    "macro.dbt.persist_docs",
                    "macro.dbt_snowflake.unset_query_tag"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4163709,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt_snowflake.materialization_table_snowflake": {
            "name": "materialization_table_snowflake",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/materializations/table.sql",
            "original_file_path": "macros/materializations/table.sql",
            "unique_id": "macro.dbt_snowflake.materialization_table_snowflake",
            "macro_sql": "{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set language = model['language'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set existing_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(\n\tidentifier=identifier,\n\tschema=schema,\n\tdatabase=database,\n\ttype='table',\n\ttable_format=config.get('table_format', 'default')\n    ) -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if target_relation.needs_to_drop(existing_relation) %}\n    {{ drop_relation_if_exists(existing_relation) }}\n  {% endif %}\n\n  {% call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.run_hooks",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs",
                    "macro.dbt_snowflake.unset_query_tag"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.417377,
            "supported_languages": [
                "sql",
                "python"
            ]
        },
        "macro.dbt_snowflake.py_write_table": {
            "name": "py_write_table",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/materializations/table.sql",
            "original_file_path": "macros/materializations/table.sql",
            "unique_id": "macro.dbt_snowflake.py_write_table",
            "macro_sql": "{% macro py_write_table(compiled_code, target_relation, temporary=False, table_type=none) %}\n{#- The following logic is only for backwards-compatiblity with deprecated `temporary` parameter -#}\n{% if table_type is not none %}\n    {#- Just use the table_type as-is -#}\n{% elif temporary -%}\n    {#- Case 1 when the deprecated `temporary` parameter is used without the replacement `table_type` parameter -#}\n    {%- set table_type = \"temporary\" -%}\n{% else %}\n    {#- Case 2 when the deprecated `temporary` parameter is used without the replacement `table_type` parameter -#}\n    {#- Snowflake treats \"\" as meaning \"permanent\" -#}\n    {%- set table_type = \"\" -%}\n{%- endif %}\n{{ compiled_code }}\ndef materialize(session, df, target_relation):\n    # make sure pandas exists\n    import importlib.util\n    package_name = 'pandas'\n    if importlib.util.find_spec(package_name):\n        import pandas\n        if isinstance(df, pandas.core.frame.DataFrame):\n          session.use_database(target_relation.database)\n          session.use_schema(target_relation.schema)\n          # session.write_pandas does not have overwrite function\n          df = session.createDataFrame(df)\n    {% set target_relation_name = resolve_model_name(target_relation) %}\n    df.write.mode(\"overwrite\").save_as_table('{{ target_relation_name }}', table_type='{{table_type}}')\n\ndef main(session):\n    dbt = dbtObj(session.table)\n    df = model(dbt, session)\n    materialize(session, df, dbt.this)\n    return \"OK\"\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.resolve_model_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.417689,
            "supported_languages": null
        },
        "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type": {
            "name": "dbt_snowflake_get_tmp_relation_type",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/materializations/incremental.sql",
            "original_file_path": "macros/materializations/incremental.sql",
            "unique_id": "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type",
            "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n{%- set tmp_relation_type = config.get('tmp_relation_type') -%}\n  /* {#\n       High-level principles:\n       If we are running multiple statements (DELETE + INSERT),\n       and we want to guarantee identical inputs to both statements,\n       then we must first save the model query results as a temporary table\n       (which presumably comes with a performance cost).\n       If we are running a single statement (MERGE or INSERT alone),\n       we _may_ save the model query definition as a view instead,\n       for (presumably) faster overall incremental processing.\n\n       Low-level specifics:\n       If an invalid option is specified, then we will raise an\n       excpetion with corresponding message.\n\n       Languages other than SQL (like Python) will use a temporary table.\n       With the default strategy of merge, the user may choose between a temporary\n       table and view (defaulting to view).\n\n       The append strategy can use a view because it will run a single INSERT statement.\n\n       When unique_key is none, the delete+insert and microbatch strategies can use a view beacuse a\n       single INSERT statement is run with no DELETES as part of the statement.\n       Otherwise, play it safe by using a temporary table.\n  #} */\n\n  {% if language == \"python\" and tmp_relation_type is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models currently only support 'table' for tmp_relation_type but \"\n       ~ tmp_relation_type ~ \" was specified.\"\n    ) %}\n  {% endif %}\n\n  {% if strategy in [\"delete+insert\", \"microbatch\"] and tmp_relation_type is not none and tmp_relation_type != \"table\" and unique_key is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"In order to maintain consistent results when `unique_key` is not none,\n      the `\" ~ strategy ~ \"` strategy only supports `table` for `tmp_relation_type` but \"\n      ~ tmp_relation_type ~ \" was specified.\"\n      )\n  %}\n  {% endif %}\n\n  {% if language != \"sql\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"table\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"view\" %}\n    {{ return(\"view\") }}\n  {% elif strategy in (\"default\", \"merge\", \"append\") %}\n    {{ return(\"view\") }}\n  {% elif strategy in [\"delete+insert\", \"microbatch\"] and unique_key is none %}\n    {{ return(\"view\") }}\n  {% else %}\n    {{ return(\"table\") }}\n  {% endif %}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.419014,
            "supported_languages": null
        },
        "macro.dbt_snowflake.materialization_incremental_snowflake": {
            "name": "materialization_incremental_snowflake",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/materializations/incremental.sql",
            "original_file_path": "macros/materializations/incremental.sql",
            "unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake",
            "macro_sql": "{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {#-- Set vars --#}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] -%}\n\n  {%- set identifier = this.name -%}\n\n  {%- set target_relation = api.Relation.create(\n\tidentifier=identifier,\n\tschema=schema,\n\tdatabase=database,\n\ttype='table',\n\ttable_format=config.get('table_format', 'default')\n    ) -%}\n\n  {% set existing_relation = load_relation(this) %}\n\n  {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n  {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n    {% if target_relation.needs_to_drop(existing_relation) %}\n      {{ drop_relation_if_exists(existing_relation) }}\n    {% endif %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif target_relation.table_format != existing_relation.table_format %}\n    {% do exceptions.raise_compiler_error(\n        \"Unable to alter incremental model `\" ~ target_relation.identifier  ~ \"` to '\" ~ target_relation.table_format ~ \" table format due to Snowflake limitation. Please execute with --full-refresh to drop the table and recreate in new table format.'\"\n      )\n    %}\n\n  {% else %}\n    {#-- Create the temp relation, either as a view or as a temp table --#}\n    {% if tmp_relation_type == 'view' %}\n        {%- call statement('create_tmp_relation') -%}\n          {{ snowflake__create_view_as_with_temp_flag(tmp_relation, compiled_code, True) }}\n        {%- endcall -%}\n    {% else %}\n        {%- call statement('create_tmp_relation', language=language) -%}\n          {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n        {%- endcall -%}\n    {% endif %}\n\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n  {% endif %}\n\n  {% do drop_relation_if_exists(tmp_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.load_relation",
                    "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type",
                    "macro.dbt.make_temp_relation",
                    "macro.dbt.incremental_validate_on_schema_change",
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag",
                    "macro.dbt.process_schema_changes",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs",
                    "macro.dbt_snowflake.unset_query_tag"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4563148,
            "supported_languages": [
                "sql",
                "python"
            ]
        },
        "macro.dbt_snowflake.snowflake__get_incremental_default_sql": {
            "name": "snowflake__get_incremental_default_sql",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/materializations/incremental.sql",
            "original_file_path": "macros/materializations/incremental.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_default_sql",
            "macro_sql": "{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_incremental_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.45646,
            "supported_languages": null
        },
        "macro.dbt_snowflake.materialization_snapshot_snowflake": {
            "name": "materialization_snapshot_snowflake",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/materializations/snapshot.sql",
            "original_file_path": "macros/materializations/snapshot.sql",
            "unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake",
            "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.materialization_snapshot_default",
                    "macro.dbt_snowflake.unset_query_tag"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.456714,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt_snowflake.materialization_dynamic_table_snowflake": {
            "name": "materialization_dynamic_table_snowflake",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/materializations/dynamic_table.sql",
            "original_file_path": "macros/materializations/dynamic_table.sql",
            "unique_id": "macro.dbt_snowflake.materialization_dynamic_table_snowflake",
            "macro_sql": "{% materialization dynamic_table, adapter='snowflake' %}\n\n    {% set query_tag = set_query_tag() %}\n\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.DynamicTable) %}\n\n    {{ run_hooks(pre_hooks) }}\n\n    {% set build_sql = dynamic_table_get_build_sql(existing_relation, target_relation) %}\n\n    {% if build_sql == '' %}\n        {{ dynamic_table_execute_no_op(target_relation) }}\n    {% else %}\n        {{ dynamic_table_execute_build_sql(build_sql, existing_relation, target_relation) }}\n    {% endif %}\n\n    {{ run_hooks(post_hooks) }}\n\n    {% do unset_query_tag(query_tag) %}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.run_hooks",
                    "macro.dbt_snowflake.dynamic_table_get_build_sql",
                    "macro.dbt_snowflake.dynamic_table_execute_no_op",
                    "macro.dbt_snowflake.dynamic_table_execute_build_sql",
                    "macro.dbt_snowflake.unset_query_tag"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.45755,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt_snowflake.dynamic_table_get_build_sql": {
            "name": "dynamic_table_get_build_sql",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/materializations/dynamic_table.sql",
            "original_file_path": "macros/materializations/dynamic_table.sql",
            "unique_id": "macro.dbt_snowflake.dynamic_table_get_build_sql",
            "macro_sql": "{% macro dynamic_table_get_build_sql(existing_relation, target_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_dynamic_table %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = snowflake__get_dynamic_table_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"No configuration changes were identified on: `\" ~ target_relation ~ \"`. Continuing.\") }}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = snowflake__get_alter_dynamic_table_as_sql(existing_relation, configuration_changes, target_relation, sql) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'continue', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario: `\" ~ on_configuration_change ~ \"`\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.get_create_sql",
                    "macro.dbt.get_replace_sql",
                    "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes",
                    "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.458343,
            "supported_languages": null
        },
        "macro.dbt_snowflake.dynamic_table_execute_no_op": {
            "name": "dynamic_table_execute_no_op",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/materializations/dynamic_table.sql",
            "original_file_path": "macros/materializations/dynamic_table.sql",
            "unique_id": "macro.dbt_snowflake.dynamic_table_execute_no_op",
            "macro_sql": "{% macro dynamic_table_execute_no_op(relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.458501,
            "supported_languages": null
        },
        "macro.dbt_snowflake.dynamic_table_execute_build_sql": {
            "name": "dynamic_table_execute_build_sql",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/materializations/dynamic_table.sql",
            "original_file_path": "macros/materializations/dynamic_table.sql",
            "unique_id": "macro.dbt_snowflake.dynamic_table_execute_build_sql",
            "macro_sql": "{% macro dynamic_table_execute_build_sql(build_sql, existing_relation, target_relation) %}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4588008,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes": {
            "name": "snowflake__get_dynamic_table_configuration_changes",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/materializations/dynamic_table.sql",
            "original_file_path": "macros/materializations/dynamic_table.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes",
            "macro_sql": "{% macro snowflake__get_dynamic_table_configuration_changes(existing_relation, new_config) -%}\n    {% set _existing_dynamic_table = snowflake__describe_dynamic_table(existing_relation) %}\n    {% set _configuration_changes = existing_relation.dynamic_table_config_changeset(_existing_dynamic_table, new_config.model) %}\n    {% do return(_configuration_changes) %}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__describe_dynamic_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.458988,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__can_clone_table": {
            "name": "snowflake__can_clone_table",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/materializations/clone.sql",
            "original_file_path": "macros/materializations/clone.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__can_clone_table",
            "macro_sql": "{% macro snowflake__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.45914,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__create_or_replace_clone": {
            "name": "snowflake__create_or_replace_clone",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/materializations/clone.sql",
            "original_file_path": "macros/materializations/clone.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__create_or_replace_clone",
            "macro_sql": "{% macro snowflake__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n      {{ \"transient\" if config.get(\"transient\", true) }}\n      table {{ this_relation }}\n      clone {{ defer_relation }}\n      {{ \"copy grants\" if config.get(\"copy_grants\", false) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.459324,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__get_drop_sql": {
            "name": "snowflake__get_drop_sql",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/relations/drop.sql",
            "original_file_path": "macros/relations/drop.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__get_drop_sql",
            "macro_sql": "{% macro snowflake__get_drop_sql(relation) %}\n\n    {% if relation.is_dynamic_table %}\n        {{ snowflake__get_drop_dynamic_table_sql(relation) }}\n\n    {% else %}\n        {{ default__get_drop_sql(relation) }}\n\n    {% endif %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql",
                    "macro.dbt.default__get_drop_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.459521,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__get_replace_sql": {
            "name": "snowflake__get_replace_sql",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/relations/replace.sql",
            "original_file_path": "macros/relations/replace.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__get_replace_sql",
            "macro_sql": "{% macro snowflake__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {% if existing_relation.is_dynamic_table and target_relation.is_dynamic_table %}\n        {{ snowflake__get_replace_dynamic_table_sql(target_relation, sql) }}\n\n    {% else %}\n        {{ default__get_replace_sql(existing_relation, target_relation, sql) }}\n\n    {% endif %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql",
                    "macro.dbt.default__get_replace_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.459768,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__rename_relation": {
            "name": "snowflake__rename_relation",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/relations/rename.sql",
            "original_file_path": "macros/relations/rename.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__rename_relation",
            "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4599319,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__get_create_backup_sql": {
            "name": "snowflake__get_create_backup_sql",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/relations/create_backup.sql",
            "original_file_path": "macros/relations/create_backup.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__get_create_backup_sql",
            "macro_sql": "{%- macro snowflake__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    -- use `render` to ensure that the fully qualified name is used\n    {{ get_rename_sql(relation, backup_relation.render()) }}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.make_backup_relation",
                    "macro.dbt.get_drop_sql",
                    "macro.dbt.get_rename_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.460147,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__get_create_sql": {
            "name": "snowflake__get_create_sql",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/relations/create.sql",
            "original_file_path": "macros/relations/create.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__get_create_sql",
            "macro_sql": "{% macro snowflake__get_create_sql(relation, sql) %}\n\n    {% if relation.is_dynamic_table %}\n        {{ snowflake__get_create_dynamic_table_as_sql(relation, sql) }}\n\n    {% else %}\n        {{ default__get_create_sql(relation, sql) }}\n\n    {% endif %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql",
                    "macro.dbt.default__get_create_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.460362,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__get_rename_intermediate_sql": {
            "name": "snowflake__get_rename_intermediate_sql",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/relations/rename_intermediate.sql",
            "original_file_path": "macros/relations/rename_intermediate.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__get_rename_intermediate_sql",
            "macro_sql": "{%- macro snowflake__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- use `render` to ensure that the fully qualified name is used\n    {{ get_rename_sql(intermediate_relation, relation.render()) }}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.get_rename_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.460542,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__get_drop_table_sql": {
            "name": "snowflake__get_drop_table_sql",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/relations/table/drop.sql",
            "original_file_path": "macros/relations/table/drop.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__get_drop_table_sql",
            "macro_sql": "{% macro snowflake__get_drop_table_sql(relation) %}\n    drop table if exists {{ relation }} cascade\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.460641,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__get_replace_table_sql": {
            "name": "snowflake__get_replace_table_sql",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/relations/table/replace.sql",
            "original_file_path": "macros/relations/table/replace.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__get_replace_table_sql",
            "macro_sql": "{% macro snowflake__get_replace_table_sql(relation, sql) %}\n    {{ snowflake__create_table_as(False, relation, sql) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__create_table_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.460769,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__get_rename_table_sql": {
            "name": "snowflake__get_rename_table_sql",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/relations/table/rename.sql",
            "original_file_path": "macros/relations/table/rename.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__get_rename_table_sql",
            "macro_sql": "{%- macro snowflake__get_rename_table_sql(relation, new_name) -%}\n    /*\n    Rename or move a table to the new name.\n\n    Args:\n        relation: SnowflakeRelation - relation to be renamed\n        new_name: Union[str, SnowflakeRelation] - new name for `relation`\n            if providing a string, the default database/schema will be used if that string is just an identifier\n            if providing a SnowflakeRelation, `render` will be used to produce a fully qualified name\n    Returns: templated string\n    */\n    alter table {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4609249,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__create_table_as": {
            "name": "snowflake__create_table_as",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/relations/table/create.sql",
            "original_file_path": "macros/relations/table/create.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__create_table_as",
            "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n\n  {%- if relation.is_iceberg_format and not adapter.behavior.enable_iceberg_materializations.no_warn %}\n    {% do exceptions.raise_compiler_error('Was unable to create model as Iceberg Table Format. Please set the `enable_iceberg_materializations` behavior flag to True in your dbt_project.yml. For more information, go to https://docs.getdbt.com/reference/resource-configs/snowflake-configs#iceberg-table-format') %}\n  {%- endif %}\n\n  {%- set materialization_prefix = relation.get_ddl_prefix_for_create(config.model.config, temporary) -%}\n  {%- set alter_prefix = relation.get_ddl_prefix_for_alter() -%}\n\n  {# Generate DDL/DML #}\n  {%- if language == 'sql' -%}\n    {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n    {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n    {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n    {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n      {%- set cluster_by_keys = [cluster_by_keys] -%}\n    {%- endif -%}\n    {%- if cluster_by_keys is not none -%}\n      {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n    {% else %}\n      {%- set cluster_by_string = none -%}\n    {%- endif -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n        create or replace {{ materialization_prefix }} table {{ relation }}\n        {%- if relation.is_iceberg_format %}\n          {#\n            Valid DDL in CTAS statements. Plain create statements have a different order.\n            https://docs.snowflake.com/en/sql-reference/sql/create-iceberg-table\n          #}\n          {{ relation.get_iceberg_ddl_options(config.model.config) }}\n        {%- endif -%}\n\n        {%- set contract_config = config.get('contract') -%}\n        {%- if contract_config.enforced -%}\n          {{ get_assert_columns_equivalent(sql) }}\n          {{ get_table_columns_and_constraints() }}\n          {% set compiled_code = get_select_subquery(compiled_code) %}\n        {% endif %}\n        {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n        (\n          {%- if cluster_by_string is not none -%}\n            select * from (\n              {{ compiled_code }}\n              ) order by ({{ cluster_by_string }})\n          {%- else -%}\n            {{ compiled_code }}\n          {%- endif %}\n        );\n      {% if cluster_by_string is not none and not temporary -%}\n        alter {{ alter_prefix }} table {{relation}} cluster by ({{cluster_by_string}});\n      {%- endif -%}\n      {% if enable_automatic_clustering and cluster_by_string is not none and not temporary %}\n        alter {{ alter_prefix }} table {{relation}} resume recluster;\n      {%- endif -%}\n\n  {%- elif language == 'python' -%}\n    {%- if relation.is_iceberg_format %}\n      {% do exceptions.raise_compiler_error('Iceberg is incompatible with Python models. Please use a SQL model for the iceberg format.') %}\n    {%- endif %}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation, table_type=relation.get_ddl_prefix_for_create(config.model.config, temporary)) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_assert_columns_equivalent",
                    "macro.dbt.get_table_columns_and_constraints",
                    "macro.dbt.get_select_subquery",
                    "macro.dbt_snowflake.py_write_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.462763,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__get_drop_view_sql": {
            "name": "snowflake__get_drop_view_sql",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/relations/view/drop.sql",
            "original_file_path": "macros/relations/view/drop.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__get_drop_view_sql",
            "macro_sql": "{% macro snowflake__get_drop_view_sql(relation) %}\n    drop view if exists {{ relation }} cascade\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4628742,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__get_replace_view_sql": {
            "name": "snowflake__get_replace_view_sql",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/relations/view/replace.sql",
            "original_file_path": "macros/relations/view/replace.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__get_replace_view_sql",
            "macro_sql": "{% macro snowflake__get_replace_view_sql(relation, sql) %}\n    {{ snowflake__create_view_as(relation, sql) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__create_view_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.462993,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__get_rename_view_sql": {
            "name": "snowflake__get_rename_view_sql",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/relations/view/rename.sql",
            "original_file_path": "macros/relations/view/rename.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__get_rename_view_sql",
            "macro_sql": "{%- macro snowflake__get_rename_view_sql(relation, new_name) -%}\n    /*\n    Rename or move a view to the new name.\n\n    Args:\n        relation: SnowflakeRelation - relation to be renamed\n        new_name: Union[str, SnowflakeRelation] - new name for `relation`\n            if providing a string, the default database/schema will be used if that string is just an identifier\n            if providing a SnowflakeRelation, `render` will be used to produce a fully qualified name\n    Returns: templated string\n    */\n    alter view {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.463148,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag": {
            "name": "snowflake__create_view_as_with_temp_flag",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/relations/view/create.sql",
            "original_file_path": "macros/relations/view/create.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag",
            "macro_sql": "{% macro snowflake__create_view_as_with_temp_flag(relation, sql, is_temporary=False) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} {% if is_temporary -%}\n    temporary\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_columns_in_query",
                    "macro.dbt_snowflake.get_persist_docs_column_list",
                    "macro.dbt.get_assert_columns_equivalent"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.463972,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__create_view_as": {
            "name": "snowflake__create_view_as",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/relations/view/create.sql",
            "original_file_path": "macros/relations/view/create.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__create_view_as",
            "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {{ snowflake__create_view_as_with_temp_flag(relation, sql) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.464072,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__create_or_replace_view": {
            "name": "snowflake__create_or_replace_view",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/relations/view/create.sql",
            "original_file_path": "macros/relations/view/create.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__create_or_replace_view",
            "macro_sql": "{% macro snowflake__create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and not old_relation.is_view -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.handle_existing_table",
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.statement",
                    "macro.dbt.get_create_view_as_sql",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4647481,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql": {
            "name": "snowflake__get_drop_dynamic_table_sql",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/relations/dynamic_table/drop.sql",
            "original_file_path": "macros/relations/dynamic_table/drop.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql",
            "macro_sql": "{% macro snowflake__get_drop_dynamic_table_sql(relation) %}\n    drop dynamic table if exists {{ relation }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.464851,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql": {
            "name": "snowflake__get_replace_dynamic_table_sql",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/relations/dynamic_table/replace.sql",
            "original_file_path": "macros/relations/dynamic_table/replace.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql",
            "macro_sql": "{% macro snowflake__get_replace_dynamic_table_sql(relation, sql) -%}\n{#-\n--  Produce DDL that replaces a dynamic table with a new dynamic table\n--\n--  Args:\n--  - relation: Union[SnowflakeRelation, str]\n--      - SnowflakeRelation - required for relation.render()\n--      - str - is already the rendered relation name\n--  - sql: str - the code defining the model\n--  Globals:\n--  - config: NodeConfig - contains the attribution required to produce a SnowflakeDynamicTableConfig\n--  Returns:\n--      A valid DDL statement which will result in a new dynamic table.\n-#}\n\n    {%- set dynamic_table = relation.from_config(config.model) -%}\n\n    {%- if dynamic_table.catalog.table_format == 'iceberg' -%}\n        {{ _get_replace_dynamic_iceberg_table_as_sql(dynamic_table, relation, sql) }}\n    {%- else -%}\n        {{ _get_replace_dynamic_standard_table_as_sql(dynamic_table, relation, sql) }}\n    {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake._get_replace_dynamic_iceberg_table_as_sql",
                    "macro.dbt_snowflake._get_replace_dynamic_standard_table_as_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4653351,
            "supported_languages": null
        },
        "macro.dbt_snowflake._get_replace_dynamic_standard_table_as_sql": {
            "name": "_get_replace_dynamic_standard_table_as_sql",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/relations/dynamic_table/replace.sql",
            "original_file_path": "macros/relations/dynamic_table/replace.sql",
            "unique_id": "macro.dbt_snowflake._get_replace_dynamic_standard_table_as_sql",
            "macro_sql": "{% macro _get_replace_dynamic_standard_table_as_sql(dynamic_table, relation, sql) -%}\n{#-\n--  Produce DDL that replaces a standard dynamic table with a new standard dynamic table\n--\n--  This follows the syntax outlined here:\n--  https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#syntax\n--\n--  Args:\n--  - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n--  - relation: Union[SnowflakeRelation, str]\n--      - SnowflakeRelation - required for relation.render()\n--      - str - is already the rendered relation name\n--  - sql: str - the code defining the model\n--  Returns:\n--      A valid DDL statement which will result in a new dynamic standard table.\n-#}\n\n    create or replace dynamic table {{ relation }}\n        target_lag = '{{ dynamic_table.target_lag }}'\n        warehouse = {{ dynamic_table.snowflake_warehouse }}\n        {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n        {{ optional('initialize', dynamic_table.initialize) }}\n        as (\n            {{ sql }}\n        )\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.optional"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.465558,
            "supported_languages": null
        },
        "macro.dbt_snowflake._get_replace_dynamic_iceberg_table_as_sql": {
            "name": "_get_replace_dynamic_iceberg_table_as_sql",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/relations/dynamic_table/replace.sql",
            "original_file_path": "macros/relations/dynamic_table/replace.sql",
            "unique_id": "macro.dbt_snowflake._get_replace_dynamic_iceberg_table_as_sql",
            "macro_sql": "{% macro _get_replace_dynamic_iceberg_table_as_sql(dynamic_table, relation, sql) -%}\n{#-\n--  Produce DDL that replaces a dynamic iceberg table with a new dynamic iceberg table\n--\n--  This follows the syntax outlined here:\n--  https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#create-dynamic-iceberg-table\n--\n--  Args:\n--  - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n--  - relation: Union[SnowflakeRelation, str]\n--      - SnowflakeRelation - required for relation.render()\n--      - str - is already the rendered relation name\n--  - sql: str - the code defining the model\n--  Returns:\n--      A valid DDL statement which will result in a new dynamic iceberg table.\n-#}\n\n    create or replace dynamic iceberg table {{ relation }}\n        target_lag = '{{ dynamic_table.target_lag }}'\n        warehouse = {{ dynamic_table.snowflake_warehouse }}\n        {{ optional('external_volume', dynamic_table.catalog.external_volume) }}\n        {{ optional('catalog', dynamic_table.catalog.name) }}\n        base_location = '{{ dynamic_table.catalog.base_location }}'\n        {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n        {{ optional('initialize', dynamic_table.initialize) }}\n        as (\n            {{ sql }}\n        )\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.optional"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.465874,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__describe_dynamic_table": {
            "name": "snowflake__describe_dynamic_table",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/relations/dynamic_table/describe.sql",
            "original_file_path": "macros/relations/dynamic_table/describe.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__describe_dynamic_table",
            "macro_sql": "{% macro snowflake__describe_dynamic_table(relation) %}\n{#-\n--  Get all relevant metadata about a dynamic table\n--\n--  Args:\n--  - relation: SnowflakeRelation - the relation to describe\n--  Returns:\n--      A dictionary with one or two entries depending on whether iceberg is enabled:\n--      - dynamic_table: the metadata associated with a standard dynamic table\n--      - catalog: the metadata associated with the iceberg catalog\n-#}\n    {%- set _dynamic_table_sql -%}\n        show dynamic tables\n            like '{{ relation.identifier }}'\n            in schema {{ relation.database }}.{{ relation.schema }}\n        ;\n        select\n            \"name\",\n            \"schema_name\",\n            \"database_name\",\n            \"text\",\n            \"target_lag\",\n            \"warehouse\",\n            \"refresh_mode\"\n        from table(result_scan(last_query_id()))\n    {%- endset %}\n    {% set results = {'dynamic_table': run_query(_dynamic_table_sql)} %}\n\n    {% if adapter.behavior.enable_iceberg_materializations.no_warn %}\n        {% set _ = results.update({'catalog': run_query(_get_describe_iceberg_catalog_sql(relation))}) %}\n    {% endif %}\n\n    {% do return(results) %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query",
                    "macro.dbt_snowflake._get_describe_iceberg_catalog_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4663832,
            "supported_languages": null
        },
        "macro.dbt_snowflake._get_describe_iceberg_catalog_sql": {
            "name": "_get_describe_iceberg_catalog_sql",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/relations/dynamic_table/describe.sql",
            "original_file_path": "macros/relations/dynamic_table/describe.sql",
            "unique_id": "macro.dbt_snowflake._get_describe_iceberg_catalog_sql",
            "macro_sql": "{% macro _get_describe_iceberg_catalog_sql(relation) %}\n{#-\n--  Produce DQL that returns all relevant metadata about an iceberg catalog\n--\n--  Args:\n--  - relation: SnowflakeRelation - the relation to describe\n--  Returns:\n--      A valid DQL statement that will return metadata associated with an iceberg catalog\n-#}\n    show iceberg tables\n        like '{{ relation.identifier }}'\n        in schema {{ relation.database }}.{{ relation.schema }}\n    ;\n    select\n        \"catalog_name\",\n        \"external_volume_name\",\n        \"base_location\"\n    from table(result_scan(last_query_id()))\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4665139,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__refresh_dynamic_table": {
            "name": "snowflake__refresh_dynamic_table",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/relations/dynamic_table/refresh.sql",
            "original_file_path": "macros/relations/dynamic_table/refresh.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__refresh_dynamic_table",
            "macro_sql": "{% macro snowflake__refresh_dynamic_table(relation) -%}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n\n    alter dynamic table {{ relation }} refresh\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.466648,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql": {
            "name": "snowflake__get_alter_dynamic_table_as_sql",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/relations/dynamic_table/alter.sql",
            "original_file_path": "macros/relations/dynamic_table/alter.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql",
            "macro_sql": "{% macro snowflake__get_alter_dynamic_table_as_sql(\n    existing_relation,\n    configuration_changes,\n    target_relation,\n    sql\n) -%}\n    {{- log('Applying ALTER to: ' ~ existing_relation) -}}\n\n    {% if configuration_changes.requires_full_refresh %}\n        {{- get_replace_sql(existing_relation, target_relation, sql) -}}\n\n    {% else %}\n\n        {%- set target_lag = configuration_changes.target_lag -%}\n        {%- if target_lag -%}{{- log('Applying UPDATE TARGET_LAG to: ' ~ existing_relation) -}}{%- endif -%}\n        {%- set snowflake_warehouse = configuration_changes.snowflake_warehouse -%}\n        {%- if snowflake_warehouse -%}{{- log('Applying UPDATE WAREHOUSE to: ' ~ existing_relation) -}}{%- endif -%}\n\n        alter dynamic table {{ existing_relation }} set\n            {% if target_lag %}target_lag = '{{ target_lag.context }}'{% endif %}\n            {% if snowflake_warehouse %}warehouse = {{ snowflake_warehouse.context }}{% endif %}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_replace_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.467202,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql": {
            "name": "snowflake__get_create_dynamic_table_as_sql",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/relations/dynamic_table/create.sql",
            "original_file_path": "macros/relations/dynamic_table/create.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql",
            "macro_sql": "{% macro snowflake__get_create_dynamic_table_as_sql(relation, sql) -%}\n{#-\n--  Produce DDL that creates a dynamic table\n--\n--  Args:\n--  - relation: Union[SnowflakeRelation, str]\n--      - SnowflakeRelation - required for relation.render()\n--      - str - is already the rendered relation name\n--  - sql: str - the code defining the model\n--  Globals:\n--  - config: NodeConfig - contains the attribution required to produce a SnowflakeDynamicTableConfig\n--  Returns:\n--      A valid DDL statement which will result in a new dynamic table.\n-#}\n\n    {%- set dynamic_table = relation.from_config(config.model) -%}\n\n    {%- if dynamic_table.catalog.table_format == 'iceberg' -%}\n        {{ _get_create_dynamic_iceberg_table_as_sql(dynamic_table, relation, sql) }}\n    {%- else -%}\n        {{ _get_create_dynamic_standard_table_as_sql(dynamic_table, relation, sql) }}\n    {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake._get_create_dynamic_iceberg_table_as_sql",
                    "macro.dbt_snowflake._get_create_dynamic_standard_table_as_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.467684,
            "supported_languages": null
        },
        "macro.dbt_snowflake._get_create_dynamic_standard_table_as_sql": {
            "name": "_get_create_dynamic_standard_table_as_sql",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/relations/dynamic_table/create.sql",
            "original_file_path": "macros/relations/dynamic_table/create.sql",
            "unique_id": "macro.dbt_snowflake._get_create_dynamic_standard_table_as_sql",
            "macro_sql": "{% macro _get_create_dynamic_standard_table_as_sql(dynamic_table, relation, sql) -%}\n{#-\n--  Produce DDL that creates a standard dynamic table\n--\n--  This follows the syntax outlined here:\n--  https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#syntax\n--\n--  Args:\n--  - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n--  - relation: Union[SnowflakeRelation, str]\n--      - SnowflakeRelation - required for relation.render()\n--      - str - is already the rendered relation name\n--  - sql: str - the code defining the model\n--  Returns:\n--      A valid DDL statement which will result in a new dynamic standard table.\n-#}\n\n    create dynamic table {{ relation }}\n        target_lag = '{{ dynamic_table.target_lag }}'\n        warehouse = {{ dynamic_table.snowflake_warehouse }}\n        {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n        {{ optional('initialize', dynamic_table.initialize) }}\n        as (\n            {{ sql }}\n        )\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.optional"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.467901,
            "supported_languages": null
        },
        "macro.dbt_snowflake._get_create_dynamic_iceberg_table_as_sql": {
            "name": "_get_create_dynamic_iceberg_table_as_sql",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/relations/dynamic_table/create.sql",
            "original_file_path": "macros/relations/dynamic_table/create.sql",
            "unique_id": "macro.dbt_snowflake._get_create_dynamic_iceberg_table_as_sql",
            "macro_sql": "{% macro _get_create_dynamic_iceberg_table_as_sql(dynamic_table, relation, sql) -%}\n{#-\n--  Produce DDL that creates a dynamic iceberg table\n--\n--  This follows the syntax outlined here:\n--  https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#create-dynamic-iceberg-table\n--\n--  Args:\n--  - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n--  - relation: Union[SnowflakeRelation, str]\n--      - SnowflakeRelation - required for relation.render()\n--      - str - is already the rendered relation name\n--  - sql: str - the code defining the model\n--  Returns:\n--      A valid DDL statement which will result in a new dynamic iceberg table.\n-#}\n\n    create dynamic iceberg table {{ relation }}\n        target_lag = '{{ dynamic_table.target_lag }}'\n        warehouse = {{ dynamic_table.snowflake_warehouse }}\n        {{ optional('external_volume', dynamic_table.catalog.external_volume) }}\n        {{ optional('catalog', dynamic_table.catalog.name) }}\n        base_location = '{{ dynamic_table.catalog.base_location }}'\n        {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n        {{ optional('initialize', dynamic_table.initialize) }}\n        as (\n            {{ sql }}\n        )\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.optional"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4682162,
            "supported_languages": null
        },
        "macro.dbt_snowflake.optional": {
            "name": "optional",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/utils/optional.sql",
            "original_file_path": "macros/utils/optional.sql",
            "unique_id": "macro.dbt_snowflake.optional",
            "macro_sql": "{% macro optional(name, value, quote_char = '') %}\n{#-\n--  Insert optional DDL parameters only when their value is provided; makes DDL statements more readable\n--\n--  Args:\n--  - name: the name of the DDL option\n--  - value: the value of the DDL option, may be None\n--  - quote_char: the quote character to use (e.g. string), leave blank if unnecessary (e.g. integer or bool)\n--  Returns:\n--      If the value is not None (e.g. provided by the user), return the option setting DDL\n--      If the value is None, return an empty string\n-#}\n{% if value is not none %}{{ name }} = {{ quote_char }}{{ value }}{{ quote_char }}{% endif %}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.468448,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__current_timestamp": {
            "name": "snowflake__current_timestamp",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/utils/timestamps.sql",
            "original_file_path": "macros/utils/timestamps.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp",
            "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.46859,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {
            "name": "snowflake__snapshot_string_as_time",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/utils/timestamps.sql",
            "original_file_path": "macros/utils/timestamps.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time",
            "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4687061,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__snapshot_get_time": {
            "name": "snowflake__snapshot_get_time",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/utils/timestamps.sql",
            "original_file_path": "macros/utils/timestamps.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time",
            "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4687748,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__current_timestamp_backcompat": {
            "name": "snowflake__current_timestamp_backcompat",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/utils/timestamps.sql",
            "original_file_path": "macros/utils/timestamps.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_backcompat",
            "macro_sql": "{% macro snowflake__current_timestamp_backcompat() %}\n  current_timestamp::{{ type_timestamp() }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.468847,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat": {
            "name": "snowflake__current_timestamp_in_utc_backcompat",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/utils/timestamps.sql",
            "original_file_path": "macros/utils/timestamps.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat",
            "macro_sql": "{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n  convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__current_timestamp_backcompat",
                    "macro.dbt.type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.468931,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__escape_single_quotes": {
            "name": "snowflake__escape_single_quotes",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/utils/escape_single_quotes.sql",
            "original_file_path": "macros/utils/escape_single_quotes.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes",
            "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4690602,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__right": {
            "name": "snowflake__right",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/utils/right.sql",
            "original_file_path": "macros/utils/right.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__right",
            "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.469204,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__safe_cast": {
            "name": "snowflake__safe_cast",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/utils/safe_cast.sql",
            "original_file_path": "macros/utils/safe_cast.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__safe_cast",
            "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    {% if type|upper == \"GEOMETRY\" -%}\n        try_to_geometry({{field}})\n    {% elif type|upper == \"GEOGRAPHY\" -%}\n        try_to_geography({{field}})\n    {% elif type|upper != \"VARIANT\" -%}\n        {#-- Snowflake try_cast does not support casting to variant, and expects the field as a string --#}\n        {% set field_as_string =  dbt.string_literal(field) if field is number else field %}\n        try_cast({{field_as_string}} as {{type}})\n    {% else -%}\n        {{ adapter.dispatch('cast', 'dbt')(field, type) }}\n    {% endif -%}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.string_literal",
                    "macro.dbt.cast",
                    "macro.dbt_snowflake.snowflake__cast"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.469713,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__cast": {
            "name": "snowflake__cast",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/utils/cast.sql",
            "original_file_path": "macros/utils/cast.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__cast",
            "macro_sql": "{% macro snowflake__cast(field, type) %}\n    {% if (type|upper == \"GEOGRAPHY\") -%}\n        to_geography({{field}})\n    {% elif (type|upper == \"GEOMETRY\") -%}\n        to_geometry({{field}})\n    {% else -%}\n        cast({{field}} as {{type}})\n    {% endif -%}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.469975,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__bool_or": {
            "name": "snowflake__bool_or",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/utils/bool_or.sql",
            "original_file_path": "macros/utils/bool_or.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__bool_or",
            "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.470071,
            "supported_languages": null
        },
        "macro.dbt_snowflake.snowflake__array_construct": {
            "name": "snowflake__array_construct",
            "resource_type": "macro",
            "package_name": "dbt_snowflake",
            "path": "macros/utils/array_construct.sql",
            "original_file_path": "macros/utils/array_construct.sql",
            "unique_id": "macro.dbt_snowflake.snowflake__array_construct",
            "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.47019,
            "supported_languages": null
        },
        "macro.dbt.run_hooks": {
            "name": "run_hooks",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/hooks.sql",
            "original_file_path": "macros/materializations/hooks.sql",
            "unique_id": "macro.dbt.run_hooks",
            "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.470728,
            "supported_languages": null
        },
        "macro.dbt.make_hook_config": {
            "name": "make_hook_config",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/hooks.sql",
            "original_file_path": "macros/materializations/hooks.sql",
            "unique_id": "macro.dbt.make_hook_config",
            "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.470855,
            "supported_languages": null
        },
        "macro.dbt.before_begin": {
            "name": "before_begin",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/hooks.sql",
            "original_file_path": "macros/materializations/hooks.sql",
            "unique_id": "macro.dbt.before_begin",
            "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.make_hook_config"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4709492,
            "supported_languages": null
        },
        "macro.dbt.in_transaction": {
            "name": "in_transaction",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/hooks.sql",
            "original_file_path": "macros/materializations/hooks.sql",
            "unique_id": "macro.dbt.in_transaction",
            "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.make_hook_config"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.47104,
            "supported_languages": null
        },
        "macro.dbt.after_commit": {
            "name": "after_commit",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/hooks.sql",
            "original_file_path": "macros/materializations/hooks.sql",
            "unique_id": "macro.dbt.after_commit",
            "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.make_hook_config"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4711301,
            "supported_languages": null
        },
        "macro.dbt.set_sql_header": {
            "name": "set_sql_header",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/configs.sql",
            "original_file_path": "macros/materializations/configs.sql",
            "unique_id": "macro.dbt.set_sql_header",
            "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.471322,
            "supported_languages": null
        },
        "macro.dbt.should_full_refresh": {
            "name": "should_full_refresh",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/configs.sql",
            "original_file_path": "macros/materializations/configs.sql",
            "unique_id": "macro.dbt.should_full_refresh",
            "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4715111,
            "supported_languages": null
        },
        "macro.dbt.should_store_failures": {
            "name": "should_store_failures",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/configs.sql",
            "original_file_path": "macros/materializations/configs.sql",
            "unique_id": "macro.dbt.should_store_failures",
            "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4716969,
            "supported_languages": null
        },
        "macro.dbt.snapshot_merge_sql": {
            "name": "snapshot_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/snapshot_merge.sql",
            "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql",
            "unique_id": "macro.dbt.snapshot_merge_sql",
            "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__snapshot_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.471964,
            "supported_languages": null
        },
        "macro.dbt.default__snapshot_merge_sql": {
            "name": "default__snapshot_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/snapshot_merge.sql",
            "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql",
            "unique_id": "macro.dbt.default__snapshot_merge_sql",
            "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\n\n    when matched\n     {% if config.get(\"dbt_valid_to_current\") %}\n       and (DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} = {{ config.get('dbt_valid_to_current') }} or\n            DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null)\n     {% else %}\n       and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\n     {% endif %}\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_snapshot_table_column_names"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4723918,
            "supported_languages": null
        },
        "macro.dbt.strategy_dispatch": {
            "name": "strategy_dispatch",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "unique_id": "macro.dbt.strategy_dispatch",
            "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.473705,
            "supported_languages": null
        },
        "macro.dbt.snapshot_hash_arguments": {
            "name": "snapshot_hash_arguments",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "unique_id": "macro.dbt.snapshot_hash_arguments",
            "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__snapshot_hash_arguments"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.473817,
            "supported_languages": null
        },
        "macro.dbt.default__snapshot_hash_arguments": {
            "name": "default__snapshot_hash_arguments",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "unique_id": "macro.dbt.default__snapshot_hash_arguments",
            "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.47396,
            "supported_languages": null
        },
        "macro.dbt.snapshot_timestamp_strategy": {
            "name": "snapshot_timestamp_strategy",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "unique_id": "macro.dbt.snapshot_timestamp_strategy",
            "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set primary_key = config.get('unique_key') %}\n    {% set updated_at = config.get('updated_at') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ columns.dbt_valid_from }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_snapshot_table_column_names",
                    "macro.dbt.snapshot_hash_arguments"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.474547,
            "supported_languages": null
        },
        "macro.dbt.snapshot_string_as_time": {
            "name": "snapshot_string_as_time",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "unique_id": "macro.dbt.snapshot_string_as_time",
            "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__snapshot_string_as_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.474657,
            "supported_languages": null
        },
        "macro.dbt.default__snapshot_string_as_time": {
            "name": "default__snapshot_string_as_time",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "unique_id": "macro.dbt.default__snapshot_string_as_time",
            "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.474771,
            "supported_languages": null
        },
        "macro.dbt.snapshot_check_all_get_existing_columns": {
            "name": "snapshot_check_all_get_existing_columns",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns",
            "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_columns_in_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4756212,
            "supported_languages": null
        },
        "macro.dbt.snapshot_check_strategy": {
            "name": "snapshot_check_strategy",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "unique_id": "macro.dbt.snapshot_check_strategy",
            "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set check_cols_config = config.get('check_cols') %}\n    {% set primary_key = config.get('unique_key') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set updated_at = config.get('updated_at') or snapshot_get_time() %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.snapshot_get_time",
                    "macro.dbt.snapshot_check_all_get_existing_columns",
                    "macro.dbt.get_true_sql",
                    "macro.dbt.snapshot_hash_arguments"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4765701,
            "supported_languages": null
        },
        "macro.dbt.create_columns": {
            "name": "create_columns",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "unique_id": "macro.dbt.create_columns",
            "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__create_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.477835,
            "supported_languages": null
        },
        "macro.dbt.default__create_columns": {
            "name": "default__create_columns",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "unique_id": "macro.dbt.default__create_columns",
            "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.478024,
            "supported_languages": null
        },
        "macro.dbt.post_snapshot": {
            "name": "post_snapshot",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "unique_id": "macro.dbt.post_snapshot",
            "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__post_snapshot"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.478134,
            "supported_languages": null
        },
        "macro.dbt.default__post_snapshot": {
            "name": "default__post_snapshot",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "unique_id": "macro.dbt.default__post_snapshot",
            "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4781928,
            "supported_languages": null
        },
        "macro.dbt.get_true_sql": {
            "name": "get_true_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "unique_id": "macro.dbt.get_true_sql",
            "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_true_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.478288,
            "supported_languages": null
        },
        "macro.dbt.default__get_true_sql": {
            "name": "default__get_true_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "unique_id": "macro.dbt.default__get_true_sql",
            "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.478362,
            "supported_languages": null
        },
        "macro.dbt.snapshot_staging_table": {
            "name": "snapshot_staging_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "unique_id": "macro.dbt.snapshot_staging_table",
            "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__snapshot_staging_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.478492,
            "supported_languages": null
        },
        "macro.dbt.get_snapshot_table_column_names": {
            "name": "get_snapshot_table_column_names",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "unique_id": "macro.dbt.get_snapshot_table_column_names",
            "macro_sql": "{% macro get_snapshot_table_column_names() %}\n    {{ return({'dbt_valid_to': 'dbt_valid_to', 'dbt_valid_from': 'dbt_valid_from', 'dbt_scd_id': 'dbt_scd_id', 'dbt_updated_at': 'dbt_updated_at', 'dbt_is_deleted': 'dbt_is_deleted'}) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.478645,
            "supported_languages": null
        },
        "macro.dbt.default__snapshot_staging_table": {
            "name": "default__snapshot_staging_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "unique_id": "macro.dbt.default__snapshot_staging_table",
            "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from {{ target_relation }}\n        where\n            {% if config.get('dbt_valid_to_current') %}\n               {# Check for either dbt_valid_to_current OR null, in order to correctly update records with nulls #}\n               ( {{ columns.dbt_valid_to }} = {{ config.get('dbt_valid_to_current') }} or {{ columns.dbt_valid_to }} is null)\n            {% else %}\n                {{ columns.dbt_valid_to }} is null\n            {% endif %}\n\n    ),\n\n    insertions_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ get_dbt_valid_to_current(strategy, columns) }},\n            {{ strategy.scd_id }} as {{ columns.dbt_scd_id }}\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_to }}\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n\n    deletes_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            ,'False' as {{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"snapshotted_data\") }}\n            or ({{ unique_key_is_not_null(strategy.unique_key, \"snapshotted_data\") }} and ({{ strategy.row_changed }})\n\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from updates_source_data as source_data\n        join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    ,\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n    )\n    {%- endif %}\n\n    {%- if strategy.hard_deletes == 'new_record' %}\n        {% set source_sql_cols = get_column_schema_from_query(source_sql) %}\n    ,\n    deletion_records as (\n\n        select\n            'insert' as dbt_change_type,\n            {%- for col in source_sql_cols -%}\n            snapshotted_data.{{ adapter.quote(col.column) }},\n            {% endfor -%}\n            {%- if strategy.unique_key | is_list -%}\n                {%- for key in strategy.unique_key -%}\n            snapshotted_data.{{ key }} as dbt_unique_key_{{ loop.index }},\n                {% endfor -%}\n            {%- else -%}\n            snapshotted_data.dbt_unique_key as dbt_unique_key,\n            {% endif -%}\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            snapshotted_data.{{ columns.dbt_valid_to }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }},\n            'True' as {{ columns.dbt_is_deleted }}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletes\n    {%- endif %}\n    {%- if strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletion_records\n    {%- endif %}\n\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_snapshot_table_column_names",
                    "macro.dbt.unique_key_fields",
                    "macro.dbt.get_dbt_valid_to_current",
                    "macro.dbt.unique_key_join_on",
                    "macro.dbt.unique_key_is_null",
                    "macro.dbt.unique_key_is_not_null",
                    "macro.dbt.snapshot_get_time",
                    "macro.dbt.get_column_schema_from_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4805472,
            "supported_languages": null
        },
        "macro.dbt.build_snapshot_table": {
            "name": "build_snapshot_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "unique_id": "macro.dbt.build_snapshot_table",
            "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__build_snapshot_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.480682,
            "supported_languages": null
        },
        "macro.dbt.default__build_snapshot_table": {
            "name": "default__build_snapshot_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "unique_id": "macro.dbt.default__build_snapshot_table",
            "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    select *,\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        {{ get_dbt_valid_to_current(strategy, columns) }}\n      {%- if strategy.hard_deletes == 'new_record' -%}\n        , 'False' as {{ columns.dbt_is_deleted }}\n      {% endif -%}\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_snapshot_table_column_names",
                    "macro.dbt.get_dbt_valid_to_current"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.480997,
            "supported_languages": null
        },
        "macro.dbt.build_snapshot_staging_table": {
            "name": "build_snapshot_staging_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "unique_id": "macro.dbt.build_snapshot_staging_table",
            "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.make_temp_relation",
                    "macro.dbt.snapshot_staging_table",
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.481258,
            "supported_languages": null
        },
        "macro.dbt.get_updated_at_column_data_type": {
            "name": "get_updated_at_column_data_type",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "unique_id": "macro.dbt.get_updated_at_column_data_type",
            "macro_sql": "{% macro get_updated_at_column_data_type(snapshot_sql) %}\n    {% set snapshot_sql_column_schema = get_column_schema_from_query(snapshot_sql) %}\n    {% set dbt_updated_at_data_type = null %}\n    {% set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {% set ns.dbt_updated_at_data_type = null -%}\n    {% for column in snapshot_sql_column_schema %}\n    {%   if ((column.column == 'dbt_updated_at') or (column.column == 'DBT_UPDATED_AT')) %}\n    {%     set ns.dbt_updated_at_data_type = column.dtype %}\n    {%   endif %}\n    {% endfor %}\n    {{ return(ns.dbt_updated_at_data_type or none)  }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_column_schema_from_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.481621,
            "supported_languages": null
        },
        "macro.dbt.check_time_data_types": {
            "name": "check_time_data_types",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "unique_id": "macro.dbt.check_time_data_types",
            "macro_sql": "{% macro check_time_data_types(sql) %}\n  {% set dbt_updated_at_data_type = get_updated_at_column_data_type(sql) %}\n  {% set snapshot_get_time_data_type = get_snapshot_get_time_data_type() %}\n  {% if snapshot_get_time_data_type is not none and dbt_updated_at_data_type is not none and snapshot_get_time_data_type != dbt_updated_at_data_type %}\n  {%   if exceptions.warn_snapshot_timestamp_data_types %}\n  {{     exceptions.warn_snapshot_timestamp_data_types(snapshot_get_time_data_type, dbt_updated_at_data_type) }}\n  {%   endif %}\n  {% endif %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_updated_at_column_data_type",
                    "macro.dbt.get_snapshot_get_time_data_type"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4818869,
            "supported_languages": null
        },
        "macro.dbt.get_dbt_valid_to_current": {
            "name": "get_dbt_valid_to_current",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "unique_id": "macro.dbt.get_dbt_valid_to_current",
            "macro_sql": "{% macro get_dbt_valid_to_current(strategy, columns) %}\n  {% set dbt_valid_to_current = config.get('dbt_valid_to_current') or \"null\" %}\n  coalesce(nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}), {{dbt_valid_to_current}})\n  as {{ columns.dbt_valid_to }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.482065,
            "supported_languages": null
        },
        "macro.dbt.unique_key_fields": {
            "name": "unique_key_fields",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "unique_id": "macro.dbt.unique_key_fields",
            "macro_sql": "{% macro unique_key_fields(unique_key) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n            {{ key }} as dbt_unique_key_{{ loop.index }}\n            {%- if not loop.last %} , {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ unique_key }} as dbt_unique_key\n    {% endif %}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4822762,
            "supported_languages": null
        },
        "macro.dbt.unique_key_join_on": {
            "name": "unique_key_join_on",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "unique_id": "macro.dbt.unique_key_join_on",
            "macro_sql": "{% macro unique_key_join_on(unique_key, identifier, from_identifier) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n            {{ identifier }}.dbt_unique_key_{{ loop.index }} = {{ from_identifier }}.dbt_unique_key_{{ loop.index }}\n            {%- if not loop.last %} and {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ identifier }}.dbt_unique_key = {{ from_identifier }}.dbt_unique_key\n    {% endif %}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.482538,
            "supported_languages": null
        },
        "macro.dbt.unique_key_is_null": {
            "name": "unique_key_is_null",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "unique_id": "macro.dbt.unique_key_is_null",
            "macro_sql": "{% macro unique_key_is_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is null\n    {% endif %}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4826748,
            "supported_languages": null
        },
        "macro.dbt.unique_key_is_not_null": {
            "name": "unique_key_is_not_null",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "unique_id": "macro.dbt.unique_key_is_not_null",
            "macro_sql": "{% macro unique_key_is_not_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is not null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is not null\n    {% endif %}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.482808,
            "supported_languages": null
        },
        "macro.dbt.materialization_snapshot_default": {
            "name": "materialization_snapshot_default",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/snapshot.sql",
            "original_file_path": "macros/materializations/snapshots/snapshot.sql",
            "unique_id": "macro.dbt.materialization_snapshot_default",
            "macro_sql": "{% materialization snapshot, default %}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {# The model['config'] parameter below is no longer used, but passing anyway for compatibility #}\n  {# It was a dictionary of config, instead of the config object from the context #}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", model['config'], target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set build_or_select_sql = build_sql %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n      {{ adapter.assert_valid_snapshot_target_given_strategy(target_relation, columns, strategy) }}\n\n      {% set build_or_select_sql = snapshot_staging_table(strategy, sql, target_relation) %}\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set remove_columns = ['dbt_change_type', 'DBT_CHANGE_TYPE', 'dbt_unique_key', 'DBT_UNIQUE_KEY'] %}\n      {% if unique_key | is_list %}\n          {% for key in strategy.unique_key %}\n              {{ remove_columns.append('dbt_unique_key_' + loop.index|string) }}\n              {{ remove_columns.append('DBT_UNIQUE_KEY_' + loop.index|string) }}\n          {% endfor %}\n      {% endif %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n\n  {{ check_time_data_types(build_or_select_sql) }}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_or_create_relation",
                    "macro.dbt.run_hooks",
                    "macro.dbt.strategy_dispatch",
                    "macro.dbt.build_snapshot_table",
                    "macro.dbt.create_table_as",
                    "macro.dbt.get_snapshot_table_column_names",
                    "macro.dbt.snapshot_staging_table",
                    "macro.dbt.build_snapshot_staging_table",
                    "macro.dbt.create_columns",
                    "macro.dbt.snapshot_merge_sql",
                    "macro.dbt.check_time_data_types",
                    "macro.dbt.statement",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs",
                    "macro.dbt.create_indexes",
                    "macro.dbt.post_snapshot"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.485315,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.materialization_test_default": {
            "name": "materialization_test_default",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/tests/test.sql",
            "original_file_path": "macros/materializations/tests/test.sql",
            "unique_id": "macro.dbt.materialization_test_default",
            "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.should_store_failures",
                    "macro.dbt.statement",
                    "macro.dbt.get_create_sql",
                    "macro.dbt.get_test_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.486619,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.get_test_sql": {
            "name": "get_test_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/tests/helpers.sql",
            "original_file_path": "macros/materializations/tests/helpers.sql",
            "unique_id": "macro.dbt.get_test_sql",
            "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_test_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.486974,
            "supported_languages": null
        },
        "macro.dbt.default__get_test_sql": {
            "name": "default__get_test_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/tests/helpers.sql",
            "original_file_path": "macros/materializations/tests/helpers.sql",
            "unique_id": "macro.dbt.default__get_test_sql",
            "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4871628,
            "supported_languages": null
        },
        "macro.dbt.get_unit_test_sql": {
            "name": "get_unit_test_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/tests/helpers.sql",
            "original_file_path": "macros/materializations/tests/helpers.sql",
            "unique_id": "macro.dbt.get_unit_test_sql",
            "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_unit_test_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.487294,
            "supported_languages": null
        },
        "macro.dbt.default__get_unit_test_sql": {
            "name": "default__get_unit_test_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/tests/helpers.sql",
            "original_file_path": "macros/materializations/tests/helpers.sql",
            "unique_id": "macro.dbt.default__get_unit_test_sql",
            "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.string_literal"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4876769,
            "supported_languages": null
        },
        "macro.dbt.get_where_subquery": {
            "name": "get_where_subquery",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/tests/where_subquery.sql",
            "original_file_path": "macros/materializations/tests/where_subquery.sql",
            "unique_id": "macro.dbt.get_where_subquery",
            "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_where_subquery"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.487884,
            "supported_languages": null
        },
        "macro.dbt.default__get_where_subquery": {
            "name": "default__get_where_subquery",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/tests/where_subquery.sql",
            "original_file_path": "macros/materializations/tests/where_subquery.sql",
            "unique_id": "macro.dbt.default__get_where_subquery",
            "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.48812,
            "supported_languages": null
        },
        "macro.dbt.materialization_unit_default": {
            "name": "materialization_unit_default",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/tests/unit.sql",
            "original_file_path": "macros/materializations/tests/unit.sql",
            "unique_id": "macro.dbt.materialization_unit_default",
            "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_columns_in_query",
                    "macro.dbt.make_temp_relation",
                    "macro.dbt.run_query",
                    "macro.dbt.get_create_table_as_sql",
                    "macro.dbt.get_empty_subquery_sql",
                    "macro.dbt.get_expected_sql",
                    "macro.dbt.get_unit_test_sql",
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.489035,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.materialization_materialized_view_default": {
            "name": "materialization_materialized_view_default",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/materialized_view.sql",
            "original_file_path": "macros/materializations/models/materialized_view.sql",
            "unique_id": "macro.dbt.materialization_materialized_view_default",
            "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.make_backup_relation",
                    "macro.dbt.materialized_view_setup",
                    "macro.dbt.materialized_view_get_build_sql",
                    "macro.dbt.materialized_view_execute_no_op",
                    "macro.dbt.materialized_view_execute_build_sql",
                    "macro.dbt.materialized_view_teardown"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4900239,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.materialized_view_setup": {
            "name": "materialized_view_setup",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/materialized_view.sql",
            "original_file_path": "macros/materializations/models/materialized_view.sql",
            "unique_id": "macro.dbt.materialized_view_setup",
            "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.run_hooks"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.490262,
            "supported_languages": null
        },
        "macro.dbt.materialized_view_teardown": {
            "name": "materialized_view_teardown",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/materialized_view.sql",
            "original_file_path": "macros/materializations/models/materialized_view.sql",
            "unique_id": "macro.dbt.materialized_view_teardown",
            "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.run_hooks"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4904141,
            "supported_languages": null
        },
        "macro.dbt.materialized_view_get_build_sql": {
            "name": "materialized_view_get_build_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/materialized_view.sql",
            "original_file_path": "macros/materializations/models/materialized_view.sql",
            "unique_id": "macro.dbt.materialized_view_get_build_sql",
            "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation.render() ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation.render() ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.get_create_materialized_view_as_sql",
                    "macro.dbt.get_replace_sql",
                    "macro.dbt.get_materialized_view_configuration_changes",
                    "macro.dbt.refresh_materialized_view",
                    "macro.dbt.get_alter_materialized_view_as_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.491193,
            "supported_languages": null
        },
        "macro.dbt.materialized_view_execute_no_op": {
            "name": "materialized_view_execute_no_op",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/materialized_view.sql",
            "original_file_path": "macros/materializations/models/materialized_view.sql",
            "unique_id": "macro.dbt.materialized_view_execute_no_op",
            "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.49134,
            "supported_languages": null
        },
        "macro.dbt.materialized_view_execute_build_sql": {
            "name": "materialized_view_execute_build_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/materialized_view.sql",
            "original_file_path": "macros/materializations/models/materialized_view.sql",
            "unique_id": "macro.dbt.materialized_view_execute_build_sql",
            "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.491733,
            "supported_languages": null
        },
        "macro.dbt.materialization_view_default": {
            "name": "materialization_view_default",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/view.sql",
            "original_file_path": "macros/materializations/models/view.sql",
            "unique_id": "macro.dbt.materialization_view_default",
            "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.make_backup_relation",
                    "macro.dbt.run_hooks",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.statement",
                    "macro.dbt.get_create_view_as_sql",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.493031,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.materialization_table_default": {
            "name": "materialization_table_default",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/table.sql",
            "original_file_path": "macros/materializations/models/table.sql",
            "unique_id": "macro.dbt.materialization_table_default",
            "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.make_backup_relation",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.get_create_table_as_sql",
                    "macro.dbt.create_indexes",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.494323,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.get_quoted_csv": {
            "name": "get_quoted_csv",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/column_helpers.sql",
            "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
            "unique_id": "macro.dbt.get_quoted_csv",
            "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.494849,
            "supported_languages": null
        },
        "macro.dbt.diff_columns": {
            "name": "diff_columns",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/column_helpers.sql",
            "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
            "unique_id": "macro.dbt.diff_columns",
            "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.495177,
            "supported_languages": null
        },
        "macro.dbt.diff_column_data_types": {
            "name": "diff_column_data_types",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/column_helpers.sql",
            "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
            "unique_id": "macro.dbt.diff_column_data_types",
            "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4955719,
            "supported_languages": null
        },
        "macro.dbt.get_merge_update_columns": {
            "name": "get_merge_update_columns",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/column_helpers.sql",
            "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
            "unique_id": "macro.dbt.get_merge_update_columns",
            "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_merge_update_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.495716,
            "supported_languages": null
        },
        "macro.dbt.default__get_merge_update_columns": {
            "name": "default__get_merge_update_columns",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/column_helpers.sql",
            "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
            "unique_id": "macro.dbt.default__get_merge_update_columns",
            "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.496153,
            "supported_languages": null
        },
        "macro.dbt.get_merge_sql": {
            "name": "get_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/merge.sql",
            "original_file_path": "macros/materializations/models/incremental/merge.sql",
            "unique_id": "macro.dbt.get_merge_sql",
            "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__get_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.496923,
            "supported_languages": null
        },
        "macro.dbt.default__get_merge_sql": {
            "name": "default__get_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/merge.sql",
            "original_file_path": "macros/materializations/models/incremental/merge.sql",
            "unique_id": "macro.dbt.default__get_merge_sql",
            "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv",
                    "macro.dbt.get_merge_update_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4979682,
            "supported_languages": null
        },
        "macro.dbt.get_delete_insert_merge_sql": {
            "name": "get_delete_insert_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/merge.sql",
            "original_file_path": "macros/materializations/models/incremental/merge.sql",
            "unique_id": "macro.dbt.get_delete_insert_merge_sql",
            "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4981382,
            "supported_languages": null
        },
        "macro.dbt.default__get_delete_insert_merge_sql": {
            "name": "default__get_delete_insert_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/merge.sql",
            "original_file_path": "macros/materializations/models/incremental/merge.sql",
            "unique_id": "macro.dbt.default__get_delete_insert_merge_sql",
            "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.498751,
            "supported_languages": null
        },
        "macro.dbt.get_insert_overwrite_merge_sql": {
            "name": "get_insert_overwrite_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/merge.sql",
            "original_file_path": "macros/materializations/models/incremental/merge.sql",
            "unique_id": "macro.dbt.get_insert_overwrite_merge_sql",
            "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_insert_overwrite_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.498925,
            "supported_languages": null
        },
        "macro.dbt.default__get_insert_overwrite_merge_sql": {
            "name": "default__get_insert_overwrite_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/merge.sql",
            "original_file_path": "macros/materializations/models/incremental/merge.sql",
            "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql",
            "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4993222,
            "supported_languages": null
        },
        "macro.dbt.is_incremental": {
            "name": "is_incremental",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/is_incremental.sql",
            "original_file_path": "macros/materializations/models/incremental/is_incremental.sql",
            "unique_id": "macro.dbt.is_incremental",
            "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.should_full_refresh"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.4996932,
            "supported_languages": null
        },
        "macro.dbt.get_incremental_append_sql": {
            "name": "get_incremental_append_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "unique_id": "macro.dbt.get_incremental_append_sql",
            "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__get_incremental_append_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.500108,
            "supported_languages": null
        },
        "macro.dbt.default__get_incremental_append_sql": {
            "name": "default__get_incremental_append_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "unique_id": "macro.dbt.default__get_incremental_append_sql",
            "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_insert_into_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5002508,
            "supported_languages": null
        },
        "macro.dbt.get_incremental_delete_insert_sql": {
            "name": "get_incremental_delete_insert_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "unique_id": "macro.dbt.get_incremental_delete_insert_sql",
            "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_incremental_delete_insert_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5003688,
            "supported_languages": null
        },
        "macro.dbt.default__get_incremental_delete_insert_sql": {
            "name": "default__get_incremental_delete_insert_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql",
            "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_delete_insert_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.500551,
            "supported_languages": null
        },
        "macro.dbt.get_incremental_merge_sql": {
            "name": "get_incremental_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "unique_id": "macro.dbt.get_incremental_merge_sql",
            "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_incremental_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5006669,
            "supported_languages": null
        },
        "macro.dbt.default__get_incremental_merge_sql": {
            "name": "default__get_incremental_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "unique_id": "macro.dbt.default__get_incremental_merge_sql",
            "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.500843,
            "supported_languages": null
        },
        "macro.dbt.get_incremental_insert_overwrite_sql": {
            "name": "get_incremental_insert_overwrite_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql",
            "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_incremental_insert_overwrite_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.50096,
            "supported_languages": null
        },
        "macro.dbt.default__get_incremental_insert_overwrite_sql": {
            "name": "default__get_incremental_insert_overwrite_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql",
            "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_insert_overwrite_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.50112,
            "supported_languages": null
        },
        "macro.dbt.get_incremental_default_sql": {
            "name": "get_incremental_default_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "unique_id": "macro.dbt.get_incremental_default_sql",
            "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__get_incremental_default_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.501236,
            "supported_languages": null
        },
        "macro.dbt.default__get_incremental_default_sql": {
            "name": "default__get_incremental_default_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "unique_id": "macro.dbt.default__get_incremental_default_sql",
            "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_incremental_append_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5013309,
            "supported_languages": null
        },
        "macro.dbt.get_incremental_microbatch_sql": {
            "name": "get_incremental_microbatch_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "unique_id": "macro.dbt.get_incremental_microbatch_sql",
            "macro_sql": "{% macro get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_microbatch_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__get_incremental_microbatch_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5014431,
            "supported_languages": null
        },
        "macro.dbt.default__get_incremental_microbatch_sql": {
            "name": "default__get_incremental_microbatch_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "unique_id": "macro.dbt.default__get_incremental_microbatch_sql",
            "macro_sql": "{% macro default__get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ exceptions.raise_not_implemented('microbatch materialization strategy not implemented for adapter ' + adapter.type()) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.501547,
            "supported_languages": null
        },
        "macro.dbt.get_insert_into_sql": {
            "name": "get_insert_into_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "unique_id": "macro.dbt.get_insert_into_sql",
            "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5017211,
            "supported_languages": null
        },
        "macro.dbt.materialization_incremental_default": {
            "name": "materialization_incremental_default",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/incremental.sql",
            "original_file_path": "macros/materializations/models/incremental/incremental.sql",
            "unique_id": "macro.dbt.materialization_incremental_default",
            "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.make_temp_relation",
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.make_backup_relation",
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.incremental_validate_on_schema_change",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.run_hooks",
                    "macro.dbt.get_create_table_as_sql",
                    "macro.dbt.run_query",
                    "macro.dbt.process_schema_changes",
                    "macro.dbt.statement",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs",
                    "macro.dbt.create_indexes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.504272,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.incremental_validate_on_schema_change": {
            "name": "incremental_validate_on_schema_change",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/on_schema_change.sql",
            "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
            "unique_id": "macro.dbt.incremental_validate_on_schema_change",
            "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.505064,
            "supported_languages": null
        },
        "macro.dbt.check_for_schema_changes": {
            "name": "check_for_schema_changes",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/on_schema_change.sql",
            "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
            "unique_id": "macro.dbt.check_for_schema_changes",
            "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.diff_columns",
                    "macro.dbt.diff_column_data_types"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.505769,
            "supported_languages": null
        },
        "macro.dbt.sync_column_schemas": {
            "name": "sync_column_schemas",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/on_schema_change.sql",
            "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
            "unique_id": "macro.dbt.sync_column_schemas",
            "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.alter_relation_add_remove_columns",
                    "macro.dbt.alter_column_type"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.506853,
            "supported_languages": null
        },
        "macro.dbt.process_schema_changes": {
            "name": "process_schema_changes",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/on_schema_change.sql",
            "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
            "unique_id": "macro.dbt.process_schema_changes",
            "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.check_for_schema_changes",
                    "macro.dbt.sync_column_schemas"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.507371,
            "supported_languages": null
        },
        "macro.dbt.can_clone_table": {
            "name": "can_clone_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/clone/can_clone_table.sql",
            "original_file_path": "macros/materializations/models/clone/can_clone_table.sql",
            "unique_id": "macro.dbt.can_clone_table",
            "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__can_clone_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.507835,
            "supported_languages": null
        },
        "macro.dbt.default__can_clone_table": {
            "name": "default__can_clone_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/clone/can_clone_table.sql",
            "original_file_path": "macros/materializations/models/clone/can_clone_table.sql",
            "unique_id": "macro.dbt.default__can_clone_table",
            "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.507931,
            "supported_languages": null
        },
        "macro.dbt.create_or_replace_clone": {
            "name": "create_or_replace_clone",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/clone/create_or_replace_clone.sql",
            "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql",
            "unique_id": "macro.dbt.create_or_replace_clone",
            "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__create_or_replace_clone"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5081348,
            "supported_languages": null
        },
        "macro.dbt.default__create_or_replace_clone": {
            "name": "default__create_or_replace_clone",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/clone/create_or_replace_clone.sql",
            "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql",
            "unique_id": "macro.dbt.default__create_or_replace_clone",
            "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation.render() }} clone {{ defer_relation.render() }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5082471,
            "supported_languages": null
        },
        "macro.dbt.materialization_clone_default": {
            "name": "materialization_clone_default",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/clone/clone.sql",
            "original_file_path": "macros/materializations/models/clone/clone.sql",
            "unique_id": "macro.dbt.materialization_clone_default",
            "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation.render() ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation.render()) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.can_clone_table",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.statement",
                    "macro.dbt.create_or_replace_clone",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5097501,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.materialization_seed_default": {
            "name": "materialization_seed_default",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/seeds/seed.sql",
            "original_file_path": "macros/materializations/seeds/seed.sql",
            "unique_id": "macro.dbt.materialization_seed_default",
            "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation.render())) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.run_hooks",
                    "macro.dbt.reset_csv_table",
                    "macro.dbt.create_csv_table",
                    "macro.dbt.load_csv_rows",
                    "macro.dbt.noop_statement",
                    "macro.dbt.get_csv_sql",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs",
                    "macro.dbt.create_indexes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5112672,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.create_csv_table": {
            "name": "create_csv_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "unique_id": "macro.dbt.create_csv_table",
            "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__create_csv_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5118878,
            "supported_languages": null
        },
        "macro.dbt.default__create_csv_table": {
            "name": "default__create_csv_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "unique_id": "macro.dbt.default__create_csv_table",
            "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5124302,
            "supported_languages": null
        },
        "macro.dbt.reset_csv_table": {
            "name": "reset_csv_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "unique_id": "macro.dbt.reset_csv_table",
            "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__reset_csv_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.512581,
            "supported_languages": null
        },
        "macro.dbt.default__reset_csv_table": {
            "name": "default__reset_csv_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "unique_id": "macro.dbt.default__reset_csv_table",
            "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.create_csv_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.51288,
            "supported_languages": null
        },
        "macro.dbt.get_csv_sql": {
            "name": "get_csv_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "unique_id": "macro.dbt.get_csv_sql",
            "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_csv_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.513002,
            "supported_languages": null
        },
        "macro.dbt.default__get_csv_sql": {
            "name": "default__get_csv_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "unique_id": "macro.dbt.default__get_csv_sql",
            "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.513088,
            "supported_languages": null
        },
        "macro.dbt.get_binding_char": {
            "name": "get_binding_char",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "unique_id": "macro.dbt.get_binding_char",
            "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_binding_char"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.513178,
            "supported_languages": null
        },
        "macro.dbt.default__get_binding_char": {
            "name": "default__get_binding_char",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "unique_id": "macro.dbt.default__get_binding_char",
            "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.513252,
            "supported_languages": null
        },
        "macro.dbt.get_batch_size": {
            "name": "get_batch_size",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "unique_id": "macro.dbt.get_batch_size",
            "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_batch_size"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.513354,
            "supported_languages": null
        },
        "macro.dbt.default__get_batch_size": {
            "name": "default__get_batch_size",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "unique_id": "macro.dbt.default__get_batch_size",
            "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.513432,
            "supported_languages": null
        },
        "macro.dbt.get_seed_column_quoted_csv": {
            "name": "get_seed_column_quoted_csv",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "unique_id": "macro.dbt.get_seed_column_quoted_csv",
            "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.51372,
            "supported_languages": null
        },
        "macro.dbt.load_csv_rows": {
            "name": "load_csv_rows",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "unique_id": "macro.dbt.load_csv_rows",
            "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__load_csv_rows"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5138402,
            "supported_languages": null
        },
        "macro.dbt.default__load_csv_rows": {
            "name": "default__load_csv_rows",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "unique_id": "macro.dbt.default__load_csv_rows",
            "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_batch_size",
                    "macro.dbt.get_seed_column_quoted_csv",
                    "macro.dbt.get_binding_char"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.514677,
            "supported_languages": null
        },
        "macro.dbt.generate_alias_name": {
            "name": "generate_alias_name",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/get_custom_name/get_custom_alias.sql",
            "original_file_path": "macros/get_custom_name/get_custom_alias.sql",
            "unique_id": "macro.dbt.generate_alias_name",
            "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__generate_alias_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.514928,
            "supported_languages": null
        },
        "macro.dbt.default__generate_alias_name": {
            "name": "default__generate_alias_name",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/get_custom_name/get_custom_alias.sql",
            "original_file_path": "macros/get_custom_name/get_custom_alias.sql",
            "unique_id": "macro.dbt.default__generate_alias_name",
            "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5151622,
            "supported_languages": null
        },
        "macro.dbt.generate_schema_name": {
            "name": "generate_schema_name",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/get_custom_name/get_custom_schema.sql",
            "original_file_path": "macros/get_custom_name/get_custom_schema.sql",
            "unique_id": "macro.dbt.generate_schema_name",
            "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__generate_schema_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.515454,
            "supported_languages": null
        },
        "macro.dbt.default__generate_schema_name": {
            "name": "default__generate_schema_name",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/get_custom_name/get_custom_schema.sql",
            "original_file_path": "macros/get_custom_name/get_custom_schema.sql",
            "unique_id": "macro.dbt.default__generate_schema_name",
            "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.51562,
            "supported_languages": null
        },
        "macro.dbt.generate_schema_name_for_env": {
            "name": "generate_schema_name_for_env",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/get_custom_name/get_custom_schema.sql",
            "original_file_path": "macros/get_custom_name/get_custom_schema.sql",
            "unique_id": "macro.dbt.generate_schema_name_for_env",
            "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.515798,
            "supported_languages": null
        },
        "macro.dbt.generate_database_name": {
            "name": "generate_database_name",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/get_custom_name/get_custom_database.sql",
            "original_file_path": "macros/get_custom_name/get_custom_database.sql",
            "unique_id": "macro.dbt.generate_database_name",
            "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__generate_database_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.516031,
            "supported_languages": null
        },
        "macro.dbt.default__generate_database_name": {
            "name": "default__generate_database_name",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/get_custom_name/get_custom_database.sql",
            "original_file_path": "macros/get_custom_name/get_custom_database.sql",
            "unique_id": "macro.dbt.default__generate_database_name",
            "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5161889,
            "supported_languages": null
        },
        "macro.dbt.get_drop_sql": {
            "name": "get_drop_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/drop.sql",
            "original_file_path": "macros/relations/drop.sql",
            "unique_id": "macro.dbt.get_drop_sql",
            "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__get_drop_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.51648,
            "supported_languages": null
        },
        "macro.dbt.default__get_drop_sql": {
            "name": "default__get_drop_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/drop.sql",
            "original_file_path": "macros/relations/drop.sql",
            "unique_id": "macro.dbt.default__get_drop_sql",
            "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.drop_view",
                    "macro.dbt.drop_table",
                    "macro.dbt.drop_materialized_view"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.516715,
            "supported_languages": null
        },
        "macro.dbt.drop_relation": {
            "name": "drop_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/drop.sql",
            "original_file_path": "macros/relations/drop.sql",
            "unique_id": "macro.dbt.drop_relation",
            "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__drop_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.516829,
            "supported_languages": null
        },
        "macro.dbt.default__drop_relation": {
            "name": "default__drop_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/drop.sql",
            "original_file_path": "macros/relations/drop.sql",
            "unique_id": "macro.dbt.default__drop_relation",
            "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt.get_drop_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5169542,
            "supported_languages": null
        },
        "macro.dbt.drop_relation_if_exists": {
            "name": "drop_relation_if_exists",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/drop.sql",
            "original_file_path": "macros/relations/drop.sql",
            "unique_id": "macro.dbt.drop_relation_if_exists",
            "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.517075,
            "supported_languages": null
        },
        "macro.dbt.get_replace_sql": {
            "name": "get_replace_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/replace.sql",
            "original_file_path": "macros/relations/replace.sql",
            "unique_id": "macro.dbt.get_replace_sql",
            "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__get_replace_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.51744,
            "supported_languages": null
        },
        "macro.dbt.default__get_replace_sql": {
            "name": "default__get_replace_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/replace.sql",
            "original_file_path": "macros/relations/replace.sql",
            "unique_id": "macro.dbt.default__get_replace_sql",
            "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation_type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_replace_view_sql",
                    "macro.dbt.get_replace_table_sql",
                    "macro.dbt.get_replace_materialized_view_sql",
                    "macro.dbt.get_create_intermediate_sql",
                    "macro.dbt.get_create_backup_sql",
                    "macro.dbt.get_rename_intermediate_sql",
                    "macro.dbt.get_drop_backup_sql",
                    "macro.dbt.get_drop_sql",
                    "macro.dbt.get_create_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.518143,
            "supported_languages": null
        },
        "macro.dbt.get_create_intermediate_sql": {
            "name": "get_create_intermediate_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/create_intermediate.sql",
            "original_file_path": "macros/relations/create_intermediate.sql",
            "unique_id": "macro.dbt.get_create_intermediate_sql",
            "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_create_intermediate_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5183659,
            "supported_languages": null
        },
        "macro.dbt.default__get_create_intermediate_sql": {
            "name": "default__get_create_intermediate_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/create_intermediate.sql",
            "original_file_path": "macros/relations/create_intermediate.sql",
            "unique_id": "macro.dbt.default__get_create_intermediate_sql",
            "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.get_drop_sql",
                    "macro.dbt.get_create_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.518523,
            "supported_languages": null
        },
        "macro.dbt.drop_schema_named": {
            "name": "drop_schema_named",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/schema.sql",
            "original_file_path": "macros/relations/schema.sql",
            "unique_id": "macro.dbt.drop_schema_named",
            "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__drop_schema_named"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5186949,
            "supported_languages": null
        },
        "macro.dbt.default__drop_schema_named": {
            "name": "default__drop_schema_named",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/schema.sql",
            "original_file_path": "macros/relations/schema.sql",
            "unique_id": "macro.dbt.default__drop_schema_named",
            "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.518827,
            "supported_languages": null
        },
        "macro.dbt.get_drop_backup_sql": {
            "name": "get_drop_backup_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/drop_backup.sql",
            "original_file_path": "macros/relations/drop_backup.sql",
            "unique_id": "macro.dbt.get_drop_backup_sql",
            "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_drop_backup_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.51902,
            "supported_languages": null
        },
        "macro.dbt.default__get_drop_backup_sql": {
            "name": "default__get_drop_backup_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/drop_backup.sql",
            "original_file_path": "macros/relations/drop_backup.sql",
            "unique_id": "macro.dbt.default__get_drop_backup_sql",
            "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.make_backup_relation",
                    "macro.dbt.get_drop_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5191512,
            "supported_languages": null
        },
        "macro.dbt.get_rename_sql": {
            "name": "get_rename_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/rename.sql",
            "original_file_path": "macros/relations/rename.sql",
            "unique_id": "macro.dbt.get_rename_sql",
            "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_rename_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5194461,
            "supported_languages": null
        },
        "macro.dbt.default__get_rename_sql": {
            "name": "default__get_rename_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/rename.sql",
            "original_file_path": "macros/relations/rename.sql",
            "unique_id": "macro.dbt.default__get_rename_sql",
            "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_rename_view_sql",
                    "macro.dbt.get_rename_table_sql",
                    "macro.dbt.get_rename_materialized_view_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.51971,
            "supported_languages": null
        },
        "macro.dbt.rename_relation": {
            "name": "rename_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/rename.sql",
            "original_file_path": "macros/relations/rename.sql",
            "unique_id": "macro.dbt.rename_relation",
            "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__rename_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.519843,
            "supported_languages": null
        },
        "macro.dbt.default__rename_relation": {
            "name": "default__rename_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/rename.sql",
            "original_file_path": "macros/relations/rename.sql",
            "unique_id": "macro.dbt.default__rename_relation",
            "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5200331,
            "supported_languages": null
        },
        "macro.dbt.get_create_backup_sql": {
            "name": "get_create_backup_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/create_backup.sql",
            "original_file_path": "macros/relations/create_backup.sql",
            "unique_id": "macro.dbt.get_create_backup_sql",
            "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__get_create_backup_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.520239,
            "supported_languages": null
        },
        "macro.dbt.default__get_create_backup_sql": {
            "name": "default__get_create_backup_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/create_backup.sql",
            "original_file_path": "macros/relations/create_backup.sql",
            "unique_id": "macro.dbt.default__get_create_backup_sql",
            "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.make_backup_relation",
                    "macro.dbt.get_drop_sql",
                    "macro.dbt.get_rename_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.520482,
            "supported_languages": null
        },
        "macro.dbt.get_create_sql": {
            "name": "get_create_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/create.sql",
            "original_file_path": "macros/relations/create.sql",
            "unique_id": "macro.dbt.get_create_sql",
            "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__get_create_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.520722,
            "supported_languages": null
        },
        "macro.dbt.default__get_create_sql": {
            "name": "default__get_create_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/create.sql",
            "original_file_path": "macros/relations/create.sql",
            "unique_id": "macro.dbt.default__get_create_sql",
            "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_create_view_as_sql",
                    "macro.dbt.get_create_table_as_sql",
                    "macro.dbt.get_create_materialized_view_as_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.520994,
            "supported_languages": null
        },
        "macro.dbt.get_rename_intermediate_sql": {
            "name": "get_rename_intermediate_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/rename_intermediate.sql",
            "original_file_path": "macros/relations/rename_intermediate.sql",
            "unique_id": "macro.dbt.get_rename_intermediate_sql",
            "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__get_rename_intermediate_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.521184,
            "supported_languages": null
        },
        "macro.dbt.default__get_rename_intermediate_sql": {
            "name": "default__get_rename_intermediate_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/rename_intermediate.sql",
            "original_file_path": "macros/relations/rename_intermediate.sql",
            "unique_id": "macro.dbt.default__get_rename_intermediate_sql",
            "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.get_rename_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5213141,
            "supported_languages": null
        },
        "macro.dbt.drop_materialized_view": {
            "name": "drop_materialized_view",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/materialized_view/drop.sql",
            "original_file_path": "macros/relations/materialized_view/drop.sql",
            "unique_id": "macro.dbt.drop_materialized_view",
            "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__drop_materialized_view"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5214772,
            "supported_languages": null
        },
        "macro.dbt.default__drop_materialized_view": {
            "name": "default__drop_materialized_view",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/materialized_view/drop.sql",
            "original_file_path": "macros/relations/materialized_view/drop.sql",
            "unique_id": "macro.dbt.default__drop_materialized_view",
            "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }} cascade\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.521556,
            "supported_languages": null
        },
        "macro.dbt.get_replace_materialized_view_sql": {
            "name": "get_replace_materialized_view_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/materialized_view/replace.sql",
            "original_file_path": "macros/relations/materialized_view/replace.sql",
            "unique_id": "macro.dbt.get_replace_materialized_view_sql",
            "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_replace_materialized_view_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.521727,
            "supported_languages": null
        },
        "macro.dbt.default__get_replace_materialized_view_sql": {
            "name": "default__get_replace_materialized_view_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/materialized_view/replace.sql",
            "original_file_path": "macros/relations/materialized_view/replace.sql",
            "unique_id": "macro.dbt.default__get_replace_materialized_view_sql",
            "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.521823,
            "supported_languages": null
        },
        "macro.dbt.refresh_materialized_view": {
            "name": "refresh_materialized_view",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/materialized_view/refresh.sql",
            "original_file_path": "macros/relations/materialized_view/refresh.sql",
            "unique_id": "macro.dbt.refresh_materialized_view",
            "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__refresh_materialized_view"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.522016,
            "supported_languages": null
        },
        "macro.dbt.default__refresh_materialized_view": {
            "name": "default__refresh_materialized_view",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/materialized_view/refresh.sql",
            "original_file_path": "macros/relations/materialized_view/refresh.sql",
            "unique_id": "macro.dbt.default__refresh_materialized_view",
            "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.522102,
            "supported_languages": null
        },
        "macro.dbt.get_rename_materialized_view_sql": {
            "name": "get_rename_materialized_view_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/materialized_view/rename.sql",
            "original_file_path": "macros/relations/materialized_view/rename.sql",
            "unique_id": "macro.dbt.get_rename_materialized_view_sql",
            "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_rename_materialized_view_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.52227,
            "supported_languages": null
        },
        "macro.dbt.default__get_rename_materialized_view_sql": {
            "name": "default__get_rename_materialized_view_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/materialized_view/rename.sql",
            "original_file_path": "macros/relations/materialized_view/rename.sql",
            "unique_id": "macro.dbt.default__get_rename_materialized_view_sql",
            "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.522364,
            "supported_languages": null
        },
        "macro.dbt.get_alter_materialized_view_as_sql": {
            "name": "get_alter_materialized_view_as_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/materialized_view/alter.sql",
            "original_file_path": "macros/relations/materialized_view/alter.sql",
            "unique_id": "macro.dbt.get_alter_materialized_view_as_sql",
            "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_alter_materialized_view_as_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.52272,
            "supported_languages": null
        },
        "macro.dbt.default__get_alter_materialized_view_as_sql": {
            "name": "default__get_alter_materialized_view_as_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/materialized_view/alter.sql",
            "original_file_path": "macros/relations/materialized_view/alter.sql",
            "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql",
            "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.522843,
            "supported_languages": null
        },
        "macro.dbt.get_materialized_view_configuration_changes": {
            "name": "get_materialized_view_configuration_changes",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/materialized_view/alter.sql",
            "original_file_path": "macros/relations/materialized_view/alter.sql",
            "unique_id": "macro.dbt.get_materialized_view_configuration_changes",
            "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_materialized_view_configuration_changes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5230231,
            "supported_languages": null
        },
        "macro.dbt.default__get_materialized_view_configuration_changes": {
            "name": "default__get_materialized_view_configuration_changes",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/materialized_view/alter.sql",
            "original_file_path": "macros/relations/materialized_view/alter.sql",
            "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes",
            "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.523118,
            "supported_languages": null
        },
        "macro.dbt.get_create_materialized_view_as_sql": {
            "name": "get_create_materialized_view_as_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/materialized_view/create.sql",
            "original_file_path": "macros/relations/materialized_view/create.sql",
            "unique_id": "macro.dbt.get_create_materialized_view_as_sql",
            "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_create_materialized_view_as_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5232918,
            "supported_languages": null
        },
        "macro.dbt.default__get_create_materialized_view_as_sql": {
            "name": "default__get_create_materialized_view_as_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/materialized_view/create.sql",
            "original_file_path": "macros/relations/materialized_view/create.sql",
            "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql",
            "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.523386,
            "supported_languages": null
        },
        "macro.dbt.get_table_columns_and_constraints": {
            "name": "get_table_columns_and_constraints",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/column/columns_spec_ddl.sql",
            "original_file_path": "macros/relations/column/columns_spec_ddl.sql",
            "unique_id": "macro.dbt.get_table_columns_and_constraints",
            "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_table_columns_and_constraints"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5238678,
            "supported_languages": null
        },
        "macro.dbt.default__get_table_columns_and_constraints": {
            "name": "default__get_table_columns_and_constraints",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/column/columns_spec_ddl.sql",
            "original_file_path": "macros/relations/column/columns_spec_ddl.sql",
            "unique_id": "macro.dbt.default__get_table_columns_and_constraints",
            "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.table_columns_and_constraints"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.523947,
            "supported_languages": null
        },
        "macro.dbt.table_columns_and_constraints": {
            "name": "table_columns_and_constraints",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/column/columns_spec_ddl.sql",
            "original_file_path": "macros/relations/column/columns_spec_ddl.sql",
            "unique_id": "macro.dbt.table_columns_and_constraints",
            "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.524278,
            "supported_languages": null
        },
        "macro.dbt.get_assert_columns_equivalent": {
            "name": "get_assert_columns_equivalent",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/column/columns_spec_ddl.sql",
            "original_file_path": "macros/relations/column/columns_spec_ddl.sql",
            "unique_id": "macro.dbt.get_assert_columns_equivalent",
            "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_assert_columns_equivalent"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5243871,
            "supported_languages": null
        },
        "macro.dbt.default__get_assert_columns_equivalent": {
            "name": "default__get_assert_columns_equivalent",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/column/columns_spec_ddl.sql",
            "original_file_path": "macros/relations/column/columns_spec_ddl.sql",
            "unique_id": "macro.dbt.default__get_assert_columns_equivalent",
            "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.assert_columns_equivalent"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5244732,
            "supported_languages": null
        },
        "macro.dbt.assert_columns_equivalent": {
            "name": "assert_columns_equivalent",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/column/columns_spec_ddl.sql",
            "original_file_path": "macros/relations/column/columns_spec_ddl.sql",
            "unique_id": "macro.dbt.assert_columns_equivalent",
            "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_column_schema_from_query",
                    "macro.dbt.get_empty_schema_sql",
                    "macro.dbt.format_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.525321,
            "supported_languages": null
        },
        "macro.dbt.format_columns": {
            "name": "format_columns",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/column/columns_spec_ddl.sql",
            "original_file_path": "macros/relations/column/columns_spec_ddl.sql",
            "unique_id": "macro.dbt.format_columns",
            "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__format_column"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.525558,
            "supported_languages": null
        },
        "macro.dbt.default__format_column": {
            "name": "default__format_column",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/column/columns_spec_ddl.sql",
            "original_file_path": "macros/relations/column/columns_spec_ddl.sql",
            "unique_id": "macro.dbt.default__format_column",
            "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.525769,
            "supported_languages": null
        },
        "macro.dbt.drop_table": {
            "name": "drop_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/table/drop.sql",
            "original_file_path": "macros/relations/table/drop.sql",
            "unique_id": "macro.dbt.drop_table",
            "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__drop_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.525932,
            "supported_languages": null
        },
        "macro.dbt.default__drop_table": {
            "name": "default__drop_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/table/drop.sql",
            "original_file_path": "macros/relations/table/drop.sql",
            "unique_id": "macro.dbt.default__drop_table",
            "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }} cascade\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.526012,
            "supported_languages": null
        },
        "macro.dbt.get_replace_table_sql": {
            "name": "get_replace_table_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/table/replace.sql",
            "original_file_path": "macros/relations/table/replace.sql",
            "unique_id": "macro.dbt.get_replace_table_sql",
            "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__get_replace_table_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5261812,
            "supported_languages": null
        },
        "macro.dbt.default__get_replace_table_sql": {
            "name": "default__get_replace_table_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/table/replace.sql",
            "original_file_path": "macros/relations/table/replace.sql",
            "unique_id": "macro.dbt.default__get_replace_table_sql",
            "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.526274,
            "supported_languages": null
        },
        "macro.dbt.get_rename_table_sql": {
            "name": "get_rename_table_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/table/rename.sql",
            "original_file_path": "macros/relations/table/rename.sql",
            "unique_id": "macro.dbt.get_rename_table_sql",
            "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__get_rename_table_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.526443,
            "supported_languages": null
        },
        "macro.dbt.default__get_rename_table_sql": {
            "name": "default__get_rename_table_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/table/rename.sql",
            "original_file_path": "macros/relations/table/rename.sql",
            "unique_id": "macro.dbt.default__get_rename_table_sql",
            "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.526536,
            "supported_languages": null
        },
        "macro.dbt.get_create_table_as_sql": {
            "name": "get_create_table_as_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/table/create.sql",
            "original_file_path": "macros/relations/table/create.sql",
            "unique_id": "macro.dbt.get_create_table_as_sql",
            "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_create_table_as_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.526929,
            "supported_languages": null
        },
        "macro.dbt.default__get_create_table_as_sql": {
            "name": "default__get_create_table_as_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/table/create.sql",
            "original_file_path": "macros/relations/table/create.sql",
            "unique_id": "macro.dbt.default__get_create_table_as_sql",
            "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.create_table_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.527044,
            "supported_languages": null
        },
        "macro.dbt.create_table_as": {
            "name": "create_table_as",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/table/create.sql",
            "original_file_path": "macros/relations/table/create.sql",
            "unique_id": "macro.dbt.create_table_as",
            "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__create_table_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.527308,
            "supported_languages": null
        },
        "macro.dbt.default__create_table_as": {
            "name": "default__create_table_as",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/table/create.sql",
            "original_file_path": "macros/relations/table/create.sql",
            "unique_id": "macro.dbt.default__create_table_as",
            "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_assert_columns_equivalent",
                    "macro.dbt.get_table_columns_and_constraints",
                    "macro.dbt.get_select_subquery"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5277271,
            "supported_languages": null
        },
        "macro.dbt.default__get_column_names": {
            "name": "default__get_column_names",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/table/create.sql",
            "original_file_path": "macros/relations/table/create.sql",
            "unique_id": "macro.dbt.default__get_column_names",
            "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5280168,
            "supported_languages": null
        },
        "macro.dbt.get_select_subquery": {
            "name": "get_select_subquery",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/table/create.sql",
            "original_file_path": "macros/relations/table/create.sql",
            "unique_id": "macro.dbt.get_select_subquery",
            "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_select_subquery"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5281339,
            "supported_languages": null
        },
        "macro.dbt.default__get_select_subquery": {
            "name": "default__get_select_subquery",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/table/create.sql",
            "original_file_path": "macros/relations/table/create.sql",
            "unique_id": "macro.dbt.default__get_select_subquery",
            "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_column_names"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.528245,
            "supported_languages": null
        },
        "macro.dbt.drop_view": {
            "name": "drop_view",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/view/drop.sql",
            "original_file_path": "macros/relations/view/drop.sql",
            "unique_id": "macro.dbt.drop_view",
            "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__drop_view"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5284019,
            "supported_languages": null
        },
        "macro.dbt.default__drop_view": {
            "name": "default__drop_view",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/view/drop.sql",
            "original_file_path": "macros/relations/view/drop.sql",
            "unique_id": "macro.dbt.default__drop_view",
            "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation.render() }} cascade\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.528481,
            "supported_languages": null
        },
        "macro.dbt.get_replace_view_sql": {
            "name": "get_replace_view_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/view/replace.sql",
            "original_file_path": "macros/relations/view/replace.sql",
            "unique_id": "macro.dbt.get_replace_view_sql",
            "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__get_replace_view_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.52882,
            "supported_languages": null
        },
        "macro.dbt.default__get_replace_view_sql": {
            "name": "default__get_replace_view_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/view/replace.sql",
            "original_file_path": "macros/relations/view/replace.sql",
            "unique_id": "macro.dbt.default__get_replace_view_sql",
            "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.528915,
            "supported_languages": null
        },
        "macro.dbt.create_or_replace_view": {
            "name": "create_or_replace_view",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/view/replace.sql",
            "original_file_path": "macros/relations/view/replace.sql",
            "unique_id": "macro.dbt.create_or_replace_view",
            "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.handle_existing_table",
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.statement",
                    "macro.dbt.get_create_view_as_sql",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.529577,
            "supported_languages": null
        },
        "macro.dbt.handle_existing_table": {
            "name": "handle_existing_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/view/replace.sql",
            "original_file_path": "macros/relations/view/replace.sql",
            "unique_id": "macro.dbt.handle_existing_table",
            "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__handle_existing_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.529705,
            "supported_languages": null
        },
        "macro.dbt.default__handle_existing_table": {
            "name": "default__handle_existing_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/view/replace.sql",
            "original_file_path": "macros/relations/view/replace.sql",
            "unique_id": "macro.dbt.default__handle_existing_table",
            "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation.render() ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.529855,
            "supported_languages": null
        },
        "macro.dbt.get_rename_view_sql": {
            "name": "get_rename_view_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/view/rename.sql",
            "original_file_path": "macros/relations/view/rename.sql",
            "unique_id": "macro.dbt.get_rename_view_sql",
            "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__get_rename_view_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.530027,
            "supported_languages": null
        },
        "macro.dbt.default__get_rename_view_sql": {
            "name": "default__get_rename_view_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/view/rename.sql",
            "original_file_path": "macros/relations/view/rename.sql",
            "unique_id": "macro.dbt.default__get_rename_view_sql",
            "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.530123,
            "supported_languages": null
        },
        "macro.dbt.get_create_view_as_sql": {
            "name": "get_create_view_as_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/view/create.sql",
            "original_file_path": "macros/relations/view/create.sql",
            "unique_id": "macro.dbt.get_create_view_as_sql",
            "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_create_view_as_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.530352,
            "supported_languages": null
        },
        "macro.dbt.default__get_create_view_as_sql": {
            "name": "default__get_create_view_as_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/view/create.sql",
            "original_file_path": "macros/relations/view/create.sql",
            "unique_id": "macro.dbt.default__get_create_view_as_sql",
            "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.create_view_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.530452,
            "supported_languages": null
        },
        "macro.dbt.create_view_as": {
            "name": "create_view_as",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/view/create.sql",
            "original_file_path": "macros/relations/view/create.sql",
            "unique_id": "macro.dbt.create_view_as",
            "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__create_view_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.530563,
            "supported_languages": null
        },
        "macro.dbt.default__create_view_as": {
            "name": "default__create_view_as",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/view/create.sql",
            "original_file_path": "macros/relations/view/create.sql",
            "unique_id": "macro.dbt.default__create_view_as",
            "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.render() }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_assert_columns_equivalent"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.530911,
            "supported_languages": null
        },
        "macro.dbt.default__test_relationships": {
            "name": "default__test_relationships",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/generic_test_sql/relationships.sql",
            "original_file_path": "macros/generic_test_sql/relationships.sql",
            "unique_id": "macro.dbt.default__test_relationships",
            "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.531102,
            "supported_languages": null
        },
        "macro.dbt.default__test_not_null": {
            "name": "default__test_not_null",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/generic_test_sql/not_null.sql",
            "original_file_path": "macros/generic_test_sql/not_null.sql",
            "unique_id": "macro.dbt.default__test_not_null",
            "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.should_store_failures"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.531287,
            "supported_languages": null
        },
        "macro.dbt.default__test_unique": {
            "name": "default__test_unique",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/generic_test_sql/unique.sql",
            "original_file_path": "macros/generic_test_sql/unique.sql",
            "unique_id": "macro.dbt.default__test_unique",
            "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.531436,
            "supported_languages": null
        },
        "macro.dbt.default__test_accepted_values": {
            "name": "default__test_accepted_values",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/generic_test_sql/accepted_values.sql",
            "original_file_path": "macros/generic_test_sql/accepted_values.sql",
            "unique_id": "macro.dbt.default__test_accepted_values",
            "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.531755,
            "supported_languages": null
        },
        "macro.dbt.statement": {
            "name": "statement",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/etc/statement.sql",
            "original_file_path": "macros/etc/statement.sql",
            "unique_id": "macro.dbt.statement",
            "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.532553,
            "supported_languages": null
        },
        "macro.dbt.noop_statement": {
            "name": "noop_statement",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/etc/statement.sql",
            "original_file_path": "macros/etc/statement.sql",
            "unique_id": "macro.dbt.noop_statement",
            "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.532906,
            "supported_languages": null
        },
        "macro.dbt.run_query": {
            "name": "run_query",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/etc/statement.sql",
            "original_file_path": "macros/etc/statement.sql",
            "unique_id": "macro.dbt.run_query",
            "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5330849,
            "supported_languages": null
        },
        "macro.dbt.convert_datetime": {
            "name": "convert_datetime",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/etc/datetime.sql",
            "original_file_path": "macros/etc/datetime.sql",
            "unique_id": "macro.dbt.convert_datetime",
            "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.533559,
            "supported_languages": null
        },
        "macro.dbt.dates_in_range": {
            "name": "dates_in_range",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/etc/datetime.sql",
            "original_file_path": "macros/etc/datetime.sql",
            "unique_id": "macro.dbt.dates_in_range",
            "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.convert_datetime"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.534254,
            "supported_languages": null
        },
        "macro.dbt.partition_range": {
            "name": "partition_range",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/etc/datetime.sql",
            "original_file_path": "macros/etc/datetime.sql",
            "unique_id": "macro.dbt.partition_range",
            "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.dates_in_range"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.534699,
            "supported_languages": null
        },
        "macro.dbt.py_current_timestring": {
            "name": "py_current_timestring",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/etc/datetime.sql",
            "original_file_path": "macros/etc/datetime.sql",
            "unique_id": "macro.dbt.py_current_timestring",
            "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.534847,
            "supported_languages": null
        },
        "macro.dbt.except": {
            "name": "except",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/except.sql",
            "original_file_path": "macros/utils/except.sql",
            "unique_id": "macro.dbt.except",
            "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__except"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.534992,
            "supported_languages": null
        },
        "macro.dbt.default__except": {
            "name": "default__except",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/except.sql",
            "original_file_path": "macros/utils/except.sql",
            "unique_id": "macro.dbt.default__except",
            "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.535043,
            "supported_languages": null
        },
        "macro.dbt.get_intervals_between": {
            "name": "get_intervals_between",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/date_spine.sql",
            "original_file_path": "macros/utils/date_spine.sql",
            "unique_id": "macro.dbt.get_intervals_between",
            "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_intervals_between"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.535372,
            "supported_languages": null
        },
        "macro.dbt.default__get_intervals_between": {
            "name": "default__get_intervals_between",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/date_spine.sql",
            "original_file_path": "macros/utils/date_spine.sql",
            "unique_id": "macro.dbt.default__get_intervals_between",
            "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt.datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.535725,
            "supported_languages": null
        },
        "macro.dbt.date_spine": {
            "name": "date_spine",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/date_spine.sql",
            "original_file_path": "macros/utils/date_spine.sql",
            "unique_id": "macro.dbt.date_spine",
            "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__date_spine"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.535869,
            "supported_languages": null
        },
        "macro.dbt.default__date_spine": {
            "name": "default__date_spine",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/date_spine.sql",
            "original_file_path": "macros/utils/date_spine.sql",
            "unique_id": "macro.dbt.default__date_spine",
            "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.generate_series",
                    "macro.dbt.get_intervals_between",
                    "macro.dbt.dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.536098,
            "supported_languages": null
        },
        "macro.dbt.date": {
            "name": "date",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/date.sql",
            "original_file_path": "macros/utils/date.sql",
            "unique_id": "macro.dbt.date",
            "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__date"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.536303,
            "supported_languages": null
        },
        "macro.dbt.default__date": {
            "name": "default__date",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/date.sql",
            "original_file_path": "macros/utils/date.sql",
            "unique_id": "macro.dbt.default__date",
            "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5364811,
            "supported_languages": null
        },
        "macro.dbt.replace": {
            "name": "replace",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/replace.sql",
            "original_file_path": "macros/utils/replace.sql",
            "unique_id": "macro.dbt.replace",
            "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__replace"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5366778,
            "supported_languages": null
        },
        "macro.dbt.default__replace": {
            "name": "default__replace",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/replace.sql",
            "original_file_path": "macros/utils/replace.sql",
            "unique_id": "macro.dbt.default__replace",
            "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.536782,
            "supported_languages": null
        },
        "macro.dbt.concat": {
            "name": "concat",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/concat.sql",
            "original_file_path": "macros/utils/concat.sql",
            "unique_id": "macro.dbt.concat",
            "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__concat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.536938,
            "supported_languages": null
        },
        "macro.dbt.default__concat": {
            "name": "default__concat",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/concat.sql",
            "original_file_path": "macros/utils/concat.sql",
            "unique_id": "macro.dbt.default__concat",
            "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.537017,
            "supported_languages": null
        },
        "macro.dbt.get_powers_of_two": {
            "name": "get_powers_of_two",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/generate_series.sql",
            "original_file_path": "macros/utils/generate_series.sql",
            "unique_id": "macro.dbt.get_powers_of_two",
            "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_powers_of_two"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.537293,
            "supported_languages": null
        },
        "macro.dbt.default__get_powers_of_two": {
            "name": "default__get_powers_of_two",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/generate_series.sql",
            "original_file_path": "macros/utils/generate_series.sql",
            "unique_id": "macro.dbt.default__get_powers_of_two",
            "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.537621,
            "supported_languages": null
        },
        "macro.dbt.generate_series": {
            "name": "generate_series",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/generate_series.sql",
            "original_file_path": "macros/utils/generate_series.sql",
            "unique_id": "macro.dbt.generate_series",
            "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__generate_series"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.537739,
            "supported_languages": null
        },
        "macro.dbt.default__generate_series": {
            "name": "default__generate_series",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/generate_series.sql",
            "original_file_path": "macros/utils/generate_series.sql",
            "unique_id": "macro.dbt.default__generate_series",
            "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_powers_of_two"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.538053,
            "supported_languages": null
        },
        "macro.dbt.length": {
            "name": "length",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/length.sql",
            "original_file_path": "macros/utils/length.sql",
            "unique_id": "macro.dbt.length",
            "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__length"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5382159,
            "supported_languages": null
        },
        "macro.dbt.default__length": {
            "name": "default__length",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/length.sql",
            "original_file_path": "macros/utils/length.sql",
            "unique_id": "macro.dbt.default__length",
            "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.538285,
            "supported_languages": null
        },
        "macro.dbt.dateadd": {
            "name": "dateadd",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/dateadd.sql",
            "original_file_path": "macros/utils/dateadd.sql",
            "unique_id": "macro.dbt.dateadd",
            "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.538483,
            "supported_languages": null
        },
        "macro.dbt.default__dateadd": {
            "name": "default__dateadd",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/dateadd.sql",
            "original_file_path": "macros/utils/dateadd.sql",
            "unique_id": "macro.dbt.default__dateadd",
            "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5385861,
            "supported_languages": null
        },
        "macro.dbt.intersect": {
            "name": "intersect",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/intersect.sql",
            "original_file_path": "macros/utils/intersect.sql",
            "unique_id": "macro.dbt.intersect",
            "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__intersect"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.538731,
            "supported_languages": null
        },
        "macro.dbt.default__intersect": {
            "name": "default__intersect",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/intersect.sql",
            "original_file_path": "macros/utils/intersect.sql",
            "unique_id": "macro.dbt.default__intersect",
            "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.538781,
            "supported_languages": null
        },
        "macro.dbt.escape_single_quotes": {
            "name": "escape_single_quotes",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/escape_single_quotes.sql",
            "original_file_path": "macros/utils/escape_single_quotes.sql",
            "unique_id": "macro.dbt.escape_single_quotes",
            "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__escape_single_quotes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.538954,
            "supported_languages": null
        },
        "macro.dbt.default__escape_single_quotes": {
            "name": "default__escape_single_quotes",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/escape_single_quotes.sql",
            "original_file_path": "macros/utils/escape_single_quotes.sql",
            "unique_id": "macro.dbt.default__escape_single_quotes",
            "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.539045,
            "supported_languages": null
        },
        "macro.dbt.right": {
            "name": "right",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/right.sql",
            "original_file_path": "macros/utils/right.sql",
            "unique_id": "macro.dbt.right",
            "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__right"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.539223,
            "supported_languages": null
        },
        "macro.dbt.default__right": {
            "name": "default__right",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/right.sql",
            "original_file_path": "macros/utils/right.sql",
            "unique_id": "macro.dbt.default__right",
            "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5393112,
            "supported_languages": null
        },
        "macro.dbt.listagg": {
            "name": "listagg",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/listagg.sql",
            "original_file_path": "macros/utils/listagg.sql",
            "unique_id": "macro.dbt.listagg",
            "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__listagg"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.539597,
            "supported_languages": null
        },
        "macro.dbt.default__listagg": {
            "name": "default__listagg",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/listagg.sql",
            "original_file_path": "macros/utils/listagg.sql",
            "unique_id": "macro.dbt.default__listagg",
            "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.539851,
            "supported_languages": null
        },
        "macro.dbt.datediff": {
            "name": "datediff",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/datediff.sql",
            "original_file_path": "macros/utils/datediff.sql",
            "unique_id": "macro.dbt.datediff",
            "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5400488,
            "supported_languages": null
        },
        "macro.dbt.default__datediff": {
            "name": "default__datediff",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/datediff.sql",
            "original_file_path": "macros/utils/datediff.sql",
            "unique_id": "macro.dbt.default__datediff",
            "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5401542,
            "supported_languages": null
        },
        "macro.dbt.safe_cast": {
            "name": "safe_cast",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/safe_cast.sql",
            "original_file_path": "macros/utils/safe_cast.sql",
            "unique_id": "macro.dbt.safe_cast",
            "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__safe_cast"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5403378,
            "supported_languages": null
        },
        "macro.dbt.default__safe_cast": {
            "name": "default__safe_cast",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/safe_cast.sql",
            "original_file_path": "macros/utils/safe_cast.sql",
            "unique_id": "macro.dbt.default__safe_cast",
            "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.54043,
            "supported_languages": null
        },
        "macro.dbt.hash": {
            "name": "hash",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/hash.sql",
            "original_file_path": "macros/utils/hash.sql",
            "unique_id": "macro.dbt.hash",
            "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__hash"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.540591,
            "supported_languages": null
        },
        "macro.dbt.default__hash": {
            "name": "default__hash",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/hash.sql",
            "original_file_path": "macros/utils/hash.sql",
            "unique_id": "macro.dbt.default__hash",
            "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.540695,
            "supported_languages": null
        },
        "macro.dbt.cast_bool_to_text": {
            "name": "cast_bool_to_text",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/cast_bool_to_text.sql",
            "original_file_path": "macros/utils/cast_bool_to_text.sql",
            "unique_id": "macro.dbt.cast_bool_to_text",
            "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__cast_bool_to_text"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.54085,
            "supported_languages": null
        },
        "macro.dbt.default__cast_bool_to_text": {
            "name": "default__cast_bool_to_text",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/cast_bool_to_text.sql",
            "original_file_path": "macros/utils/cast_bool_to_text.sql",
            "unique_id": "macro.dbt.default__cast_bool_to_text",
            "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.540951,
            "supported_languages": null
        },
        "macro.dbt.cast": {
            "name": "cast",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/cast.sql",
            "original_file_path": "macros/utils/cast.sql",
            "unique_id": "macro.dbt.cast",
            "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__cast"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.541125,
            "supported_languages": null
        },
        "macro.dbt.default__cast": {
            "name": "default__cast",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/cast.sql",
            "original_file_path": "macros/utils/cast.sql",
            "unique_id": "macro.dbt.default__cast",
            "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.541209,
            "supported_languages": null
        },
        "macro.dbt.any_value": {
            "name": "any_value",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/any_value.sql",
            "original_file_path": "macros/utils/any_value.sql",
            "unique_id": "macro.dbt.any_value",
            "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__any_value"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.541365,
            "supported_languages": null
        },
        "macro.dbt.default__any_value": {
            "name": "default__any_value",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/any_value.sql",
            "original_file_path": "macros/utils/any_value.sql",
            "unique_id": "macro.dbt.default__any_value",
            "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.541439,
            "supported_languages": null
        },
        "macro.dbt.position": {
            "name": "position",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/position.sql",
            "original_file_path": "macros/utils/position.sql",
            "unique_id": "macro.dbt.position",
            "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__position"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5416162,
            "supported_languages": null
        },
        "macro.dbt.default__position": {
            "name": "default__position",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/position.sql",
            "original_file_path": "macros/utils/position.sql",
            "unique_id": "macro.dbt.default__position",
            "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5419898,
            "supported_languages": null
        },
        "macro.dbt.string_literal": {
            "name": "string_literal",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/literal.sql",
            "original_file_path": "macros/utils/literal.sql",
            "unique_id": "macro.dbt.string_literal",
            "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__string_literal"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.542149,
            "supported_languages": null
        },
        "macro.dbt.default__string_literal": {
            "name": "default__string_literal",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/literal.sql",
            "original_file_path": "macros/utils/literal.sql",
            "unique_id": "macro.dbt.default__string_literal",
            "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5422158,
            "supported_languages": null
        },
        "macro.dbt.type_string": {
            "name": "type_string",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "unique_id": "macro.dbt.type_string",
            "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.542679,
            "supported_languages": null
        },
        "macro.dbt.default__type_string": {
            "name": "default__type_string",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "unique_id": "macro.dbt.default__type_string",
            "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.542774,
            "supported_languages": null
        },
        "macro.dbt.type_timestamp": {
            "name": "type_timestamp",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "unique_id": "macro.dbt.type_timestamp",
            "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.542877,
            "supported_languages": null
        },
        "macro.dbt.default__type_timestamp": {
            "name": "default__type_timestamp",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "unique_id": "macro.dbt.default__type_timestamp",
            "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5429718,
            "supported_languages": null
        },
        "macro.dbt.type_float": {
            "name": "type_float",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "unique_id": "macro.dbt.type_float",
            "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_float"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5430741,
            "supported_languages": null
        },
        "macro.dbt.default__type_float": {
            "name": "default__type_float",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "unique_id": "macro.dbt.default__type_float",
            "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5431669,
            "supported_languages": null
        },
        "macro.dbt.type_numeric": {
            "name": "type_numeric",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "unique_id": "macro.dbt.type_numeric",
            "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_numeric"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.543266,
            "supported_languages": null
        },
        "macro.dbt.default__type_numeric": {
            "name": "default__type_numeric",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "unique_id": "macro.dbt.default__type_numeric",
            "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.543377,
            "supported_languages": null
        },
        "macro.dbt.type_bigint": {
            "name": "type_bigint",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "unique_id": "macro.dbt.type_bigint",
            "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_bigint"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5434802,
            "supported_languages": null
        },
        "macro.dbt.default__type_bigint": {
            "name": "default__type_bigint",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "unique_id": "macro.dbt.default__type_bigint",
            "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5435772,
            "supported_languages": null
        },
        "macro.dbt.type_int": {
            "name": "type_int",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "unique_id": "macro.dbt.type_int",
            "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_int"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.543676,
            "supported_languages": null
        },
        "macro.dbt.default__type_int": {
            "name": "default__type_int",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "unique_id": "macro.dbt.default__type_int",
            "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.543767,
            "supported_languages": null
        },
        "macro.dbt.type_boolean": {
            "name": "type_boolean",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "unique_id": "macro.dbt.type_boolean",
            "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_boolean"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5438678,
            "supported_languages": null
        },
        "macro.dbt.default__type_boolean": {
            "name": "default__type_boolean",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "unique_id": "macro.dbt.default__type_boolean",
            "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.543961,
            "supported_languages": null
        },
        "macro.dbt.array_concat": {
            "name": "array_concat",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/array_concat.sql",
            "original_file_path": "macros/utils/array_concat.sql",
            "unique_id": "macro.dbt.array_concat",
            "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__array_concat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.544139,
            "supported_languages": null
        },
        "macro.dbt.default__array_concat": {
            "name": "default__array_concat",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/array_concat.sql",
            "original_file_path": "macros/utils/array_concat.sql",
            "unique_id": "macro.dbt.default__array_concat",
            "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.544226,
            "supported_languages": null
        },
        "macro.dbt.bool_or": {
            "name": "bool_or",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/bool_or.sql",
            "original_file_path": "macros/utils/bool_or.sql",
            "unique_id": "macro.dbt.bool_or",
            "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__bool_or"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.544379,
            "supported_languages": null
        },
        "macro.dbt.default__bool_or": {
            "name": "default__bool_or",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/bool_or.sql",
            "original_file_path": "macros/utils/bool_or.sql",
            "unique_id": "macro.dbt.default__bool_or",
            "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.544446,
            "supported_languages": null
        },
        "macro.dbt.last_day": {
            "name": "last_day",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/last_day.sql",
            "original_file_path": "macros/utils/last_day.sql",
            "unique_id": "macro.dbt.last_day",
            "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.544641,
            "supported_languages": null
        },
        "macro.dbt.default_last_day": {
            "name": "default_last_day",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/last_day.sql",
            "original_file_path": "macros/utils/last_day.sql",
            "unique_id": "macro.dbt.default_last_day",
            "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.dateadd",
                    "macro.dbt.date_trunc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.544801,
            "supported_languages": null
        },
        "macro.dbt.default__last_day": {
            "name": "default__last_day",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/last_day.sql",
            "original_file_path": "macros/utils/last_day.sql",
            "unique_id": "macro.dbt.default__last_day",
            "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default_last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.544897,
            "supported_languages": null
        },
        "macro.dbt.split_part": {
            "name": "split_part",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/split_part.sql",
            "original_file_path": "macros/utils/split_part.sql",
            "unique_id": "macro.dbt.split_part",
            "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__split_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.545138,
            "supported_languages": null
        },
        "macro.dbt.default__split_part": {
            "name": "default__split_part",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/split_part.sql",
            "original_file_path": "macros/utils/split_part.sql",
            "unique_id": "macro.dbt.default__split_part",
            "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.545245,
            "supported_languages": null
        },
        "macro.dbt._split_part_negative": {
            "name": "_split_part_negative",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/split_part.sql",
            "original_file_path": "macros/utils/split_part.sql",
            "unique_id": "macro.dbt._split_part_negative",
            "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.545384,
            "supported_languages": null
        },
        "macro.dbt.date_trunc": {
            "name": "date_trunc",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/date_trunc.sql",
            "original_file_path": "macros/utils/date_trunc.sql",
            "unique_id": "macro.dbt.date_trunc",
            "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__date_trunc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.545631,
            "supported_languages": null
        },
        "macro.dbt.default__date_trunc": {
            "name": "default__date_trunc",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/date_trunc.sql",
            "original_file_path": "macros/utils/date_trunc.sql",
            "unique_id": "macro.dbt.default__date_trunc",
            "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.545717,
            "supported_languages": null
        },
        "macro.dbt.array_construct": {
            "name": "array_construct",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/array_construct.sql",
            "original_file_path": "macros/utils/array_construct.sql",
            "unique_id": "macro.dbt.array_construct",
            "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__array_construct"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5459552,
            "supported_languages": null
        },
        "macro.dbt.default__array_construct": {
            "name": "default__array_construct",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/array_construct.sql",
            "original_file_path": "macros/utils/array_construct.sql",
            "unique_id": "macro.dbt.default__array_construct",
            "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5461051,
            "supported_languages": null
        },
        "macro.dbt.array_append": {
            "name": "array_append",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/array_append.sql",
            "original_file_path": "macros/utils/array_append.sql",
            "unique_id": "macro.dbt.array_append",
            "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__array_append"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.546287,
            "supported_languages": null
        },
        "macro.dbt.default__array_append": {
            "name": "default__array_append",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/array_append.sql",
            "original_file_path": "macros/utils/array_append.sql",
            "unique_id": "macro.dbt.default__array_append",
            "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5463738,
            "supported_languages": null
        },
        "macro.dbt.create_schema": {
            "name": "create_schema",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/schema.sql",
            "original_file_path": "macros/adapters/schema.sql",
            "unique_id": "macro.dbt.create_schema",
            "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__create_schema"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.546577,
            "supported_languages": null
        },
        "macro.dbt.default__create_schema": {
            "name": "default__create_schema",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/schema.sql",
            "original_file_path": "macros/adapters/schema.sql",
            "unique_id": "macro.dbt.default__create_schema",
            "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.546693,
            "supported_languages": null
        },
        "macro.dbt.drop_schema": {
            "name": "drop_schema",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/schema.sql",
            "original_file_path": "macros/adapters/schema.sql",
            "unique_id": "macro.dbt.drop_schema",
            "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__drop_schema"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.546796,
            "supported_languages": null
        },
        "macro.dbt.default__drop_schema": {
            "name": "default__drop_schema",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/schema.sql",
            "original_file_path": "macros/adapters/schema.sql",
            "unique_id": "macro.dbt.default__drop_schema",
            "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.546911,
            "supported_languages": null
        },
        "macro.dbt.current_timestamp": {
            "name": "current_timestamp",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/timestamps.sql",
            "original_file_path": "macros/adapters/timestamps.sql",
            "unique_id": "macro.dbt.current_timestamp",
            "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.54721,
            "supported_languages": null
        },
        "macro.dbt.default__current_timestamp": {
            "name": "default__current_timestamp",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/timestamps.sql",
            "original_file_path": "macros/adapters/timestamps.sql",
            "unique_id": "macro.dbt.default__current_timestamp",
            "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.547307,
            "supported_languages": null
        },
        "macro.dbt.snapshot_get_time": {
            "name": "snapshot_get_time",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/timestamps.sql",
            "original_file_path": "macros/adapters/timestamps.sql",
            "unique_id": "macro.dbt.snapshot_get_time",
            "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__snapshot_get_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5473979,
            "supported_languages": null
        },
        "macro.dbt.default__snapshot_get_time": {
            "name": "default__snapshot_get_time",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/timestamps.sql",
            "original_file_path": "macros/adapters/timestamps.sql",
            "unique_id": "macro.dbt.default__snapshot_get_time",
            "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.547466,
            "supported_languages": null
        },
        "macro.dbt.get_snapshot_get_time_data_type": {
            "name": "get_snapshot_get_time_data_type",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/timestamps.sql",
            "original_file_path": "macros/adapters/timestamps.sql",
            "unique_id": "macro.dbt.get_snapshot_get_time_data_type",
            "macro_sql": "{% macro get_snapshot_get_time_data_type() %}\n    {% set snapshot_time = adapter.dispatch('snapshot_get_time', 'dbt')() %}\n    {% set time_data_type_sql = 'select ' ~ snapshot_time ~ ' as dbt_snapshot_time' %}\n    {% set snapshot_time_column_schema = get_column_schema_from_query(time_data_type_sql) %}\n    {% set time_data_type = snapshot_time_column_schema[0].dtype %}\n    {{ return(time_data_type or none) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.snapshot_get_time",
                    "macro.dbt_snowflake.snowflake__snapshot_get_time",
                    "macro.dbt.get_column_schema_from_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.547721,
            "supported_languages": null
        },
        "macro.dbt.current_timestamp_backcompat": {
            "name": "current_timestamp_backcompat",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/timestamps.sql",
            "original_file_path": "macros/adapters/timestamps.sql",
            "unique_id": "macro.dbt.current_timestamp_backcompat",
            "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__current_timestamp_backcompat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.547829,
            "supported_languages": null
        },
        "macro.dbt.default__current_timestamp_backcompat": {
            "name": "default__current_timestamp_backcompat",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/timestamps.sql",
            "original_file_path": "macros/adapters/timestamps.sql",
            "unique_id": "macro.dbt.default__current_timestamp_backcompat",
            "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.547882,
            "supported_languages": null
        },
        "macro.dbt.current_timestamp_in_utc_backcompat": {
            "name": "current_timestamp_in_utc_backcompat",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/timestamps.sql",
            "original_file_path": "macros/adapters/timestamps.sql",
            "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat",
            "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5479848,
            "supported_languages": null
        },
        "macro.dbt.default__current_timestamp_in_utc_backcompat": {
            "name": "default__current_timestamp_in_utc_backcompat",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/timestamps.sql",
            "original_file_path": "macros/adapters/timestamps.sql",
            "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat",
            "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.current_timestamp_backcompat",
                    "macro.dbt_snowflake.snowflake__current_timestamp_backcompat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5480902,
            "supported_languages": null
        },
        "macro.dbt.get_create_index_sql": {
            "name": "get_create_index_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/indexes.sql",
            "original_file_path": "macros/adapters/indexes.sql",
            "unique_id": "macro.dbt.get_create_index_sql",
            "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_create_index_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.548397,
            "supported_languages": null
        },
        "macro.dbt.default__get_create_index_sql": {
            "name": "default__get_create_index_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/indexes.sql",
            "original_file_path": "macros/adapters/indexes.sql",
            "unique_id": "macro.dbt.default__get_create_index_sql",
            "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.548486,
            "supported_languages": null
        },
        "macro.dbt.create_indexes": {
            "name": "create_indexes",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/indexes.sql",
            "original_file_path": "macros/adapters/indexes.sql",
            "unique_id": "macro.dbt.create_indexes",
            "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__create_indexes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.548584,
            "supported_languages": null
        },
        "macro.dbt.default__create_indexes": {
            "name": "default__create_indexes",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/indexes.sql",
            "original_file_path": "macros/adapters/indexes.sql",
            "unique_id": "macro.dbt.default__create_indexes",
            "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_create_index_sql",
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.548828,
            "supported_languages": null
        },
        "macro.dbt.get_drop_index_sql": {
            "name": "get_drop_index_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/indexes.sql",
            "original_file_path": "macros/adapters/indexes.sql",
            "unique_id": "macro.dbt.get_drop_index_sql",
            "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_drop_index_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.548946,
            "supported_languages": null
        },
        "macro.dbt.default__get_drop_index_sql": {
            "name": "default__get_drop_index_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/indexes.sql",
            "original_file_path": "macros/adapters/indexes.sql",
            "unique_id": "macro.dbt.default__get_drop_index_sql",
            "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.549037,
            "supported_languages": null
        },
        "macro.dbt.get_show_indexes_sql": {
            "name": "get_show_indexes_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/indexes.sql",
            "original_file_path": "macros/adapters/indexes.sql",
            "unique_id": "macro.dbt.get_show_indexes_sql",
            "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_show_indexes_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.549133,
            "supported_languages": null
        },
        "macro.dbt.default__get_show_indexes_sql": {
            "name": "default__get_show_indexes_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/indexes.sql",
            "original_file_path": "macros/adapters/indexes.sql",
            "unique_id": "macro.dbt.default__get_show_indexes_sql",
            "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.549214,
            "supported_languages": null
        },
        "macro.dbt.make_intermediate_relation": {
            "name": "make_intermediate_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "unique_id": "macro.dbt.make_intermediate_relation",
            "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__make_intermediate_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.549729,
            "supported_languages": null
        },
        "macro.dbt.default__make_intermediate_relation": {
            "name": "default__make_intermediate_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "unique_id": "macro.dbt.default__make_intermediate_relation",
            "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__make_temp_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.549835,
            "supported_languages": null
        },
        "macro.dbt.make_temp_relation": {
            "name": "make_temp_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "unique_id": "macro.dbt.make_temp_relation",
            "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {#-- This ensures microbatch batches get unique temp relations to avoid clobbering --#}\n  {% if suffix == '__dbt_tmp' and model.batch %}\n    {% set suffix = suffix ~ '_' ~ model.batch.id %}\n  {% endif %}\n\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__make_temp_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.550072,
            "supported_languages": null
        },
        "macro.dbt.default__make_temp_relation": {
            "name": "default__make_temp_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "unique_id": "macro.dbt.default__make_temp_relation",
            "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5502532,
            "supported_languages": null
        },
        "macro.dbt.make_backup_relation": {
            "name": "make_backup_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "unique_id": "macro.dbt.make_backup_relation",
            "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__make_backup_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.550407,
            "supported_languages": null
        },
        "macro.dbt.default__make_backup_relation": {
            "name": "default__make_backup_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "unique_id": "macro.dbt.default__make_backup_relation",
            "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.550611,
            "supported_languages": null
        },
        "macro.dbt.truncate_relation": {
            "name": "truncate_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "unique_id": "macro.dbt.truncate_relation",
            "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__truncate_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.550724,
            "supported_languages": null
        },
        "macro.dbt.default__truncate_relation": {
            "name": "default__truncate_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "unique_id": "macro.dbt.default__truncate_relation",
            "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.render() }}\n  {%- endcall %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5508401,
            "supported_languages": null
        },
        "macro.dbt.get_or_create_relation": {
            "name": "get_or_create_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "unique_id": "macro.dbt.get_or_create_relation",
            "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_or_create_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.550993,
            "supported_languages": null
        },
        "macro.dbt.default__get_or_create_relation": {
            "name": "default__get_or_create_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "unique_id": "macro.dbt.default__get_or_create_relation",
            "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.551324,
            "supported_languages": null
        },
        "macro.dbt.load_cached_relation": {
            "name": "load_cached_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "unique_id": "macro.dbt.load_cached_relation",
            "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.551465,
            "supported_languages": null
        },
        "macro.dbt.load_relation": {
            "name": "load_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "unique_id": "macro.dbt.load_relation",
            "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.551556,
            "supported_languages": null
        },
        "macro.dbt.collect_freshness": {
            "name": "collect_freshness",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/freshness.sql",
            "original_file_path": "macros/adapters/freshness.sql",
            "unique_id": "macro.dbt.collect_freshness",
            "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__collect_freshness"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.551847,
            "supported_languages": null
        },
        "macro.dbt.default__collect_freshness": {
            "name": "default__collect_freshness",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/freshness.sql",
            "original_file_path": "macros/adapters/freshness.sql",
            "unique_id": "macro.dbt.default__collect_freshness",
            "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt.current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.552095,
            "supported_languages": null
        },
        "macro.dbt.collect_freshness_custom_sql": {
            "name": "collect_freshness_custom_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/freshness.sql",
            "original_file_path": "macros/adapters/freshness.sql",
            "unique_id": "macro.dbt.collect_freshness_custom_sql",
            "macro_sql": "{% macro collect_freshness_custom_sql(source, loaded_at_query) %}\n  {{ return(adapter.dispatch('collect_freshness_custom_sql', 'dbt')(source, loaded_at_query))}}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__collect_freshness_custom_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.552226,
            "supported_languages": null
        },
        "macro.dbt.default__collect_freshness_custom_sql": {
            "name": "default__collect_freshness_custom_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/freshness.sql",
            "original_file_path": "macros/adapters/freshness.sql",
            "unique_id": "macro.dbt.default__collect_freshness_custom_sql",
            "macro_sql": "{% macro default__collect_freshness_custom_sql(source, loaded_at_query) %}\n  {% call statement('collect_freshness_custom_sql', fetch_result=True, auto_begin=False) -%}\n  with source_query as (\n    {{ loaded_at_query }}\n  )\n  select\n    (select * from source_query) as max_loaded_at,\n    {{ current_timestamp() }} as snapshotted_at\n  {% endcall %}\n  {{ return(load_result('collect_freshness_custom_sql')) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt.current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5524192,
            "supported_languages": null
        },
        "macro.dbt.validate_sql": {
            "name": "validate_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/validate_sql.sql",
            "original_file_path": "macros/adapters/validate_sql.sql",
            "unique_id": "macro.dbt.validate_sql",
            "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__validate_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5525959,
            "supported_languages": null
        },
        "macro.dbt.default__validate_sql": {
            "name": "default__validate_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/validate_sql.sql",
            "original_file_path": "macros/adapters/validate_sql.sql",
            "unique_id": "macro.dbt.default__validate_sql",
            "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.552733,
            "supported_languages": null
        },
        "macro.dbt.copy_grants": {
            "name": "copy_grants",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.copy_grants",
            "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__copy_grants"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.553469,
            "supported_languages": null
        },
        "macro.dbt.default__copy_grants": {
            "name": "default__copy_grants",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.default__copy_grants",
            "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5535429,
            "supported_languages": null
        },
        "macro.dbt.support_multiple_grantees_per_dcl_statement": {
            "name": "support_multiple_grantees_per_dcl_statement",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement",
            "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5536482,
            "supported_languages": null
        },
        "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {
            "name": "default__support_multiple_grantees_per_dcl_statement",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement",
            "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.553719,
            "supported_languages": null
        },
        "macro.dbt.should_revoke": {
            "name": "should_revoke",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.should_revoke",
            "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.copy_grants"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5539289,
            "supported_languages": null
        },
        "macro.dbt.get_show_grant_sql": {
            "name": "get_show_grant_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.get_show_grant_sql",
            "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_show_grant_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5540428,
            "supported_languages": null
        },
        "macro.dbt.default__get_show_grant_sql": {
            "name": "default__get_show_grant_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.default__get_show_grant_sql",
            "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation.render() }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5541189,
            "supported_languages": null
        },
        "macro.dbt.get_grant_sql": {
            "name": "get_grant_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.get_grant_sql",
            "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_grant_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.554255,
            "supported_languages": null
        },
        "macro.dbt.default__get_grant_sql": {
            "name": "default__get_grant_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.default__get_grant_sql",
            "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5544581,
            "supported_languages": null
        },
        "macro.dbt.get_revoke_sql": {
            "name": "get_revoke_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.get_revoke_sql",
            "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_revoke_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5546,
            "supported_languages": null
        },
        "macro.dbt.default__get_revoke_sql": {
            "name": "default__get_revoke_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.default__get_revoke_sql",
            "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.554726,
            "supported_languages": null
        },
        "macro.dbt.get_dcl_statement_list": {
            "name": "get_dcl_statement_list",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.get_dcl_statement_list",
            "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_dcl_statement_list"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5548642,
            "supported_languages": null
        },
        "macro.dbt.default__get_dcl_statement_list": {
            "name": "default__get_dcl_statement_list",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.default__get_dcl_statement_list",
            "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.support_multiple_grantees_per_dcl_statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.555268,
            "supported_languages": null
        },
        "macro.dbt.call_dcl_statements": {
            "name": "call_dcl_statements",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.call_dcl_statements",
            "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__call_dcl_statements"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.555389,
            "supported_languages": null
        },
        "macro.dbt.default__call_dcl_statements": {
            "name": "default__call_dcl_statements",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.default__call_dcl_statements",
            "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.555547,
            "supported_languages": null
        },
        "macro.dbt.apply_grants": {
            "name": "apply_grants",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.apply_grants",
            "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__apply_grants"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.555688,
            "supported_languages": null
        },
        "macro.dbt.default__apply_grants": {
            "name": "default__apply_grants",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.default__apply_grants",
            "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation.render() ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query",
                    "macro.dbt.get_show_grant_sql",
                    "macro.dbt.get_dcl_statement_list",
                    "macro.dbt.call_dcl_statements"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.556374,
            "supported_languages": null
        },
        "macro.dbt.get_show_sql": {
            "name": "get_show_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/show.sql",
            "original_file_path": "macros/adapters/show.sql",
            "unique_id": "macro.dbt.get_show_sql",
            "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header is not none -%}\n  {{ sql_header }}\n  {%- endif %}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_limit_subquery_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.556631,
            "supported_languages": null
        },
        "macro.dbt.get_limit_subquery_sql": {
            "name": "get_limit_subquery_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/show.sql",
            "original_file_path": "macros/adapters/show.sql",
            "unique_id": "macro.dbt.get_limit_subquery_sql",
            "macro_sql": "\n{%- macro get_limit_subquery_sql(sql, limit) -%}\n  {{ adapter.dispatch('get_limit_sql', 'dbt')(sql, limit) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_limit_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.556746,
            "supported_languages": null
        },
        "macro.dbt.default__get_limit_sql": {
            "name": "default__get_limit_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/show.sql",
            "original_file_path": "macros/adapters/show.sql",
            "unique_id": "macro.dbt.default__get_limit_sql",
            "macro_sql": "{% macro default__get_limit_sql(sql, limit) %}\n  {{ sql }}\n  {% if limit is not none %}\n  limit {{ limit }}\n  {%- endif -%}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.556866,
            "supported_languages": null
        },
        "macro.dbt.alter_column_comment": {
            "name": "alter_column_comment",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/persist_docs.sql",
            "original_file_path": "macros/adapters/persist_docs.sql",
            "unique_id": "macro.dbt.alter_column_comment",
            "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__alter_column_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.557139,
            "supported_languages": null
        },
        "macro.dbt.default__alter_column_comment": {
            "name": "default__alter_column_comment",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/persist_docs.sql",
            "original_file_path": "macros/adapters/persist_docs.sql",
            "unique_id": "macro.dbt.default__alter_column_comment",
            "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.557246,
            "supported_languages": null
        },
        "macro.dbt.alter_relation_comment": {
            "name": "alter_relation_comment",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/persist_docs.sql",
            "original_file_path": "macros/adapters/persist_docs.sql",
            "unique_id": "macro.dbt.alter_relation_comment",
            "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__alter_relation_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5573702,
            "supported_languages": null
        },
        "macro.dbt.default__alter_relation_comment": {
            "name": "default__alter_relation_comment",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/persist_docs.sql",
            "original_file_path": "macros/adapters/persist_docs.sql",
            "unique_id": "macro.dbt.default__alter_relation_comment",
            "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.557475,
            "supported_languages": null
        },
        "macro.dbt.persist_docs": {
            "name": "persist_docs",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/persist_docs.sql",
            "original_file_path": "macros/adapters/persist_docs.sql",
            "unique_id": "macro.dbt.persist_docs",
            "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.557639,
            "supported_languages": null
        },
        "macro.dbt.default__persist_docs": {
            "name": "default__persist_docs",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/persist_docs.sql",
            "original_file_path": "macros/adapters/persist_docs.sql",
            "unique_id": "macro.dbt.default__persist_docs",
            "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query",
                    "macro.dbt.alter_relation_comment",
                    "macro.dbt.alter_column_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.557923,
            "supported_languages": null
        },
        "macro.dbt.get_catalog_relations": {
            "name": "get_catalog_relations",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.get_catalog_relations",
            "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__get_catalog_relations"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.558451,
            "supported_languages": null
        },
        "macro.dbt.default__get_catalog_relations": {
            "name": "default__get_catalog_relations",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.default__get_catalog_relations",
            "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.558609,
            "supported_languages": null
        },
        "macro.dbt.get_catalog": {
            "name": "get_catalog",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.get_catalog",
            "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__get_catalog"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.558732,
            "supported_languages": null
        },
        "macro.dbt.default__get_catalog": {
            "name": "default__get_catalog",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.default__get_catalog",
            "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5588858,
            "supported_languages": null
        },
        "macro.dbt.information_schema_name": {
            "name": "information_schema_name",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.information_schema_name",
            "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__information_schema_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.559001,
            "supported_languages": null
        },
        "macro.dbt.default__information_schema_name": {
            "name": "default__information_schema_name",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.default__information_schema_name",
            "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.559103,
            "supported_languages": null
        },
        "macro.dbt.list_schemas": {
            "name": "list_schemas",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.list_schemas",
            "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__list_schemas"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.559215,
            "supported_languages": null
        },
        "macro.dbt.default__list_schemas": {
            "name": "default__list_schemas",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.default__list_schemas",
            "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.information_schema_name",
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.559437,
            "supported_languages": null
        },
        "macro.dbt.check_schema_exists": {
            "name": "check_schema_exists",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.check_schema_exists",
            "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__check_schema_exists"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.559561,
            "supported_languages": null
        },
        "macro.dbt.default__check_schema_exists": {
            "name": "default__check_schema_exists",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.default__check_schema_exists",
            "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.replace",
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.559742,
            "supported_languages": null
        },
        "macro.dbt.list_relations_without_caching": {
            "name": "list_relations_without_caching",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.list_relations_without_caching",
            "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__list_relations_without_caching"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5598578,
            "supported_languages": null
        },
        "macro.dbt.default__list_relations_without_caching": {
            "name": "default__list_relations_without_caching",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.default__list_relations_without_caching",
            "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.559969,
            "supported_languages": null
        },
        "macro.dbt.get_catalog_for_single_relation": {
            "name": "get_catalog_for_single_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.get_catalog_for_single_relation",
            "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_catalog_for_single_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.560079,
            "supported_languages": null
        },
        "macro.dbt.default__get_catalog_for_single_relation": {
            "name": "default__get_catalog_for_single_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.default__get_catalog_for_single_relation",
            "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.560179,
            "supported_languages": null
        },
        "macro.dbt.get_relations": {
            "name": "get_relations",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.get_relations",
            "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_relations"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.56028,
            "supported_languages": null
        },
        "macro.dbt.default__get_relations": {
            "name": "default__get_relations",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.default__get_relations",
            "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.560374,
            "supported_languages": null
        },
        "macro.dbt.get_relation_last_modified": {
            "name": "get_relation_last_modified",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.get_relation_last_modified",
            "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__get_relation_last_modified"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.560499,
            "supported_languages": null
        },
        "macro.dbt.default__get_relation_last_modified": {
            "name": "default__get_relation_last_modified",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.default__get_relation_last_modified",
            "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.560606,
            "supported_languages": null
        },
        "macro.dbt.get_columns_in_relation": {
            "name": "get_columns_in_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "unique_id": "macro.dbt.get_columns_in_relation",
            "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__get_columns_in_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.561322,
            "supported_languages": null
        },
        "macro.dbt.default__get_columns_in_relation": {
            "name": "default__get_columns_in_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "unique_id": "macro.dbt.default__get_columns_in_relation",
            "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5614212,
            "supported_languages": null
        },
        "macro.dbt.sql_convert_columns_in_relation": {
            "name": "sql_convert_columns_in_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "unique_id": "macro.dbt.sql_convert_columns_in_relation",
            "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.561611,
            "supported_languages": null
        },
        "macro.dbt.get_empty_subquery_sql": {
            "name": "get_empty_subquery_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "unique_id": "macro.dbt.get_empty_subquery_sql",
            "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_empty_subquery_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.561743,
            "supported_languages": null
        },
        "macro.dbt.default__get_empty_subquery_sql": {
            "name": "default__get_empty_subquery_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "unique_id": "macro.dbt.default__get_empty_subquery_sql",
            "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.56187,
            "supported_languages": null
        },
        "macro.dbt.get_empty_schema_sql": {
            "name": "get_empty_schema_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "unique_id": "macro.dbt.get_empty_schema_sql",
            "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_empty_schema_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.56198,
            "supported_languages": null
        },
        "macro.dbt.default__get_empty_schema_sql": {
            "name": "default__get_empty_schema_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "unique_id": "macro.dbt.default__get_empty_schema_sql",
            "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.cast"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.562668,
            "supported_languages": null
        },
        "macro.dbt.get_column_schema_from_query": {
            "name": "get_column_schema_from_query",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "unique_id": "macro.dbt.get_column_schema_from_query",
            "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_empty_subquery_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5628831,
            "supported_languages": null
        },
        "macro.dbt.get_columns_in_query": {
            "name": "get_columns_in_query",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "unique_id": "macro.dbt.get_columns_in_query",
            "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_columns_in_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.562995,
            "supported_languages": null
        },
        "macro.dbt.default__get_columns_in_query": {
            "name": "default__get_columns_in_query",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "unique_id": "macro.dbt.default__get_columns_in_query",
            "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt.get_empty_subquery_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.563203,
            "supported_languages": null
        },
        "macro.dbt.alter_column_type": {
            "name": "alter_column_type",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "unique_id": "macro.dbt.alter_column_type",
            "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__alter_column_type"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.563342,
            "supported_languages": null
        },
        "macro.dbt.default__alter_column_type": {
            "name": "default__alter_column_type",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "unique_id": "macro.dbt.default__alter_column_type",
            "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5637262,
            "supported_languages": null
        },
        "macro.dbt.alter_relation_add_remove_columns": {
            "name": "alter_relation_add_remove_columns",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "unique_id": "macro.dbt.alter_relation_add_remove_columns",
            "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.563885,
            "supported_languages": null
        },
        "macro.dbt.default__alter_relation_add_remove_columns": {
            "name": "default__alter_relation_add_remove_columns",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "unique_id": "macro.dbt.default__alter_relation_add_remove_columns",
            "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.564435,
            "supported_languages": null
        },
        "macro.dbt.get_fixture_sql": {
            "name": "get_fixture_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/unit_test_sql/get_fixture_sql.sql",
            "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql",
            "unique_id": "macro.dbt.get_fixture_sql",
            "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.load_relation",
                    "macro.dbt.safe_cast",
                    "macro.dbt.validate_fixture_rows",
                    "macro.dbt.format_row"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5659251,
            "supported_languages": null
        },
        "macro.dbt.get_expected_sql": {
            "name": "get_expected_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/unit_test_sql/get_fixture_sql.sql",
            "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql",
            "unique_id": "macro.dbt.get_expected_sql",
            "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.format_row"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5662742,
            "supported_languages": null
        },
        "macro.dbt.format_row": {
            "name": "format_row",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/unit_test_sql/get_fixture_sql.sql",
            "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql",
            "unique_id": "macro.dbt.format_row",
            "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.string_literal",
                    "macro.dbt.escape_single_quotes",
                    "macro.dbt.safe_cast"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5669498,
            "supported_languages": null
        },
        "macro.dbt.validate_fixture_rows": {
            "name": "validate_fixture_rows",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/unit_test_sql/get_fixture_sql.sql",
            "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql",
            "unique_id": "macro.dbt.validate_fixture_rows",
            "macro_sql": "{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__validate_fixture_rows"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5670888,
            "supported_languages": null
        },
        "macro.dbt.default__validate_fixture_rows": {
            "name": "default__validate_fixture_rows",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/unit_test_sql/get_fixture_sql.sql",
            "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql",
            "unique_id": "macro.dbt.default__validate_fixture_rows",
            "macro_sql": "{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.567162,
            "supported_languages": null
        },
        "macro.dbt.resolve_model_name": {
            "name": "resolve_model_name",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/python_model/python.sql",
            "original_file_path": "macros/python_model/python.sql",
            "unique_id": "macro.dbt.resolve_model_name",
            "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__resolve_model_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.567652,
            "supported_languages": null
        },
        "macro.dbt.default__resolve_model_name": {
            "name": "default__resolve_model_name",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/python_model/python.sql",
            "original_file_path": "macros/python_model/python.sql",
            "unique_id": "macro.dbt.default__resolve_model_name",
            "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5677571,
            "supported_languages": null
        },
        "macro.dbt.build_ref_function": {
            "name": "build_ref_function",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/python_model/python.sql",
            "original_file_path": "macros/python_model/python.sql",
            "unique_id": "macro.dbt.build_ref_function",
            "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.resolve_model_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.56828,
            "supported_languages": null
        },
        "macro.dbt.build_source_function": {
            "name": "build_source_function",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/python_model/python.sql",
            "original_file_path": "macros/python_model/python.sql",
            "unique_id": "macro.dbt.build_source_function",
            "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.resolve_model_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.568568,
            "supported_languages": null
        },
        "macro.dbt.build_config_dict": {
            "name": "build_config_dict",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/python_model/python.sql",
            "original_file_path": "macros/python_model/python.sql",
            "unique_id": "macro.dbt.build_config_dict",
            "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.568942,
            "supported_languages": null
        },
        "macro.dbt.py_script_postfix": {
            "name": "py_script_postfix",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/python_model/python.sql",
            "original_file_path": "macros/python_model/python.sql",
            "unique_id": "macro.dbt.py_script_postfix",
            "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.build_ref_function",
                    "macro.dbt.build_source_function",
                    "macro.dbt.build_config_dict",
                    "macro.dbt.resolve_model_name",
                    "macro.dbt.is_incremental",
                    "macro.dbt.py_script_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.569232,
            "supported_languages": null
        },
        "macro.dbt.py_script_comment": {
            "name": "py_script_comment",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/python_model/python.sql",
            "original_file_path": "macros/python_model/python.sql",
            "unique_id": "macro.dbt.py_script_comment",
            "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5692842,
            "supported_languages": null
        },
        "macro.dbt.test_unique": {
            "name": "test_unique",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "tests/generic/builtin.sql",
            "original_file_path": "tests/generic/builtin.sql",
            "unique_id": "macro.dbt.test_unique",
            "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__test_unique"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5695848,
            "supported_languages": null
        },
        "macro.dbt.test_not_null": {
            "name": "test_not_null",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "tests/generic/builtin.sql",
            "original_file_path": "tests/generic/builtin.sql",
            "unique_id": "macro.dbt.test_not_null",
            "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__test_not_null"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.569746,
            "supported_languages": null
        },
        "macro.dbt.test_accepted_values": {
            "name": "test_accepted_values",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "tests/generic/builtin.sql",
            "original_file_path": "tests/generic/builtin.sql",
            "unique_id": "macro.dbt.test_accepted_values",
            "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__test_accepted_values"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.569941,
            "supported_languages": null
        },
        "macro.dbt.test_relationships": {
            "name": "test_relationships",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "tests/generic/builtin.sql",
            "original_file_path": "tests/generic/builtin.sql",
            "unique_id": "macro.dbt.test_relationships",
            "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__test_relationships"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5701241,
            "supported_languages": null
        },
        "macro.dbt_utils.get_url_host": {
            "name": "get_url_host",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/web/get_url_host.sql",
            "original_file_path": "macros/web/get_url_host.sql",
            "unique_id": "macro.dbt_utils.get_url_host",
            "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_url_host"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.570324,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_url_host": {
            "name": "default__get_url_host",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/web/get_url_host.sql",
            "original_file_path": "macros/web/get_url_host.sql",
            "unique_id": "macro.dbt_utils.default__get_url_host",
            "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.split_part",
                    "macro.dbt.replace",
                    "macro.dbt.safe_cast",
                    "macro.dbt.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5706801,
            "supported_languages": null
        },
        "macro.dbt_utils.get_url_path": {
            "name": "get_url_path",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/web/get_url_path.sql",
            "original_file_path": "macros/web/get_url_path.sql",
            "unique_id": "macro.dbt_utils.get_url_path",
            "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_url_path"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5709069,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_url_path": {
            "name": "default__get_url_path",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/web/get_url_path.sql",
            "original_file_path": "macros/web/get_url_path.sql",
            "unique_id": "macro.dbt_utils.default__get_url_path",
            "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.replace",
                    "macro.dbt.position",
                    "macro.dbt.split_part",
                    "macro.dbt.right",
                    "macro.dbt.length",
                    "macro.dbt.safe_cast",
                    "macro.dbt.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.571386,
            "supported_languages": null
        },
        "macro.dbt_utils.get_url_parameter": {
            "name": "get_url_parameter",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/web/get_url_parameter.sql",
            "original_file_path": "macros/web/get_url_parameter.sql",
            "unique_id": "macro.dbt_utils.get_url_parameter",
            "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_url_parameter"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.571635,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_url_parameter": {
            "name": "default__get_url_parameter",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/web/get_url_parameter.sql",
            "original_file_path": "macros/web/get_url_parameter.sql",
            "unique_id": "macro.dbt_utils.default__get_url_parameter",
            "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.split_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.571863,
            "supported_languages": null
        },
        "macro.dbt_utils.test_fewer_rows_than": {
            "name": "test_fewer_rows_than",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/fewer_rows_than.sql",
            "original_file_path": "macros/generic_tests/fewer_rows_than.sql",
            "unique_id": "macro.dbt_utils.test_fewer_rows_than",
            "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_fewer_rows_than"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.572303,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_fewer_rows_than": {
            "name": "default__test_fewer_rows_than",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/fewer_rows_than.sql",
            "original_file_path": "macros/generic_tests/fewer_rows_than.sql",
            "unique_id": "macro.dbt_utils.default__test_fewer_rows_than",
            "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.573081,
            "supported_languages": null
        },
        "macro.dbt_utils.test_equal_rowcount": {
            "name": "test_equal_rowcount",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/equal_rowcount.sql",
            "original_file_path": "macros/generic_tests/equal_rowcount.sql",
            "unique_id": "macro.dbt_utils.test_equal_rowcount",
            "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_equal_rowcount"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.573471,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_equal_rowcount": {
            "name": "default__test_equal_rowcount",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/equal_rowcount.sql",
            "original_file_path": "macros/generic_tests/equal_rowcount.sql",
            "unique_id": "macro.dbt_utils.default__test_equal_rowcount",
            "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.574153,
            "supported_languages": null
        },
        "macro.dbt_utils.test_relationships_where": {
            "name": "test_relationships_where",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/relationships_where.sql",
            "original_file_path": "macros/generic_tests/relationships_where.sql",
            "unique_id": "macro.dbt_utils.test_relationships_where",
            "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_relationships_where"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5744698,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_relationships_where": {
            "name": "default__test_relationships_where",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/relationships_where.sql",
            "original_file_path": "macros/generic_tests/relationships_where.sql",
            "unique_id": "macro.dbt_utils.default__test_relationships_where",
            "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.57468,
            "supported_languages": null
        },
        "macro.dbt_utils.test_recency": {
            "name": "test_recency",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/recency.sql",
            "original_file_path": "macros/generic_tests/recency.sql",
            "unique_id": "macro.dbt_utils.test_recency",
            "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_recency"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.575027,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_recency": {
            "name": "default__test_recency",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/recency.sql",
            "original_file_path": "macros/generic_tests/recency.sql",
            "unique_id": "macro.dbt_utils.default__test_recency",
            "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.dateadd",
                    "macro.dbt.current_timestamp",
                    "macro.dbt.type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.575525,
            "supported_languages": null
        },
        "macro.dbt_utils.test_not_constant": {
            "name": "test_not_constant",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/not_constant.sql",
            "original_file_path": "macros/generic_tests/not_constant.sql",
            "unique_id": "macro.dbt_utils.test_not_constant",
            "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_not_constant"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.575794,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_not_constant": {
            "name": "default__test_not_constant",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/not_constant.sql",
            "original_file_path": "macros/generic_tests/not_constant.sql",
            "unique_id": "macro.dbt_utils.default__test_not_constant",
            "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.576083,
            "supported_languages": null
        },
        "macro.dbt_utils.test_accepted_range": {
            "name": "test_accepted_range",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/accepted_range.sql",
            "original_file_path": "macros/generic_tests/accepted_range.sql",
            "unique_id": "macro.dbt_utils.test_accepted_range",
            "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_accepted_range"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.576405,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_accepted_range": {
            "name": "default__test_accepted_range",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/accepted_range.sql",
            "original_file_path": "macros/generic_tests/accepted_range.sql",
            "unique_id": "macro.dbt_utils.default__test_accepted_range",
            "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.576694,
            "supported_languages": null
        },
        "macro.dbt_utils.test_not_accepted_values": {
            "name": "test_not_accepted_values",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/not_accepted_values.sql",
            "original_file_path": "macros/generic_tests/not_accepted_values.sql",
            "unique_id": "macro.dbt_utils.test_not_accepted_values",
            "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_not_accepted_values"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.576969,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_not_accepted_values": {
            "name": "default__test_not_accepted_values",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/not_accepted_values.sql",
            "original_file_path": "macros/generic_tests/not_accepted_values.sql",
            "unique_id": "macro.dbt_utils.default__test_not_accepted_values",
            "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.577209,
            "supported_languages": null
        },
        "macro.dbt_utils.test_at_least_one": {
            "name": "test_at_least_one",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/at_least_one.sql",
            "original_file_path": "macros/generic_tests/at_least_one.sql",
            "unique_id": "macro.dbt_utils.test_at_least_one",
            "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_at_least_one"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.577512,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_at_least_one": {
            "name": "default__test_at_least_one",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/at_least_one.sql",
            "original_file_path": "macros/generic_tests/at_least_one.sql",
            "unique_id": "macro.dbt_utils.default__test_at_least_one",
            "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      {% if group_by_columns|length() == 0 %}\n        where {{ column_name }} is not null\n        limit 1\n      {% endif %}\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5780191,
            "supported_languages": null
        },
        "macro.dbt_utils.test_unique_combination_of_columns": {
            "name": "test_unique_combination_of_columns",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/unique_combination_of_columns.sql",
            "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql",
            "unique_id": "macro.dbt_utils.test_unique_combination_of_columns",
            "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_unique_combination_of_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5783,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_unique_combination_of_columns": {
            "name": "default__test_unique_combination_of_columns",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/unique_combination_of_columns.sql",
            "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql",
            "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns",
            "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.578687,
            "supported_languages": null
        },
        "macro.dbt_utils.test_cardinality_equality": {
            "name": "test_cardinality_equality",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/cardinality_equality.sql",
            "original_file_path": "macros/generic_tests/cardinality_equality.sql",
            "unique_id": "macro.dbt_utils.test_cardinality_equality",
            "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_cardinality_equality"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5789561,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_cardinality_equality": {
            "name": "default__test_cardinality_equality",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/cardinality_equality.sql",
            "original_file_path": "macros/generic_tests/cardinality_equality.sql",
            "unique_id": "macro.dbt_utils.default__test_cardinality_equality",
            "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.except"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.579168,
            "supported_languages": null
        },
        "macro.dbt_utils.test_expression_is_true": {
            "name": "test_expression_is_true",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/expression_is_true.sql",
            "original_file_path": "macros/generic_tests/expression_is_true.sql",
            "unique_id": "macro.dbt_utils.test_expression_is_true",
            "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.579413,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_expression_is_true": {
            "name": "default__test_expression_is_true",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/expression_is_true.sql",
            "original_file_path": "macros/generic_tests/expression_is_true.sql",
            "unique_id": "macro.dbt_utils.default__test_expression_is_true",
            "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.should_store_failures"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.579631,
            "supported_languages": null
        },
        "macro.dbt_utils.test_not_null_proportion": {
            "name": "test_not_null_proportion",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/not_null_proportion.sql",
            "original_file_path": "macros/generic_tests/not_null_proportion.sql",
            "unique_id": "macro.dbt_utils.test_not_null_proportion",
            "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_not_null_proportion"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.579904,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_not_null_proportion": {
            "name": "default__test_not_null_proportion",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/not_null_proportion.sql",
            "original_file_path": "macros/generic_tests/not_null_proportion.sql",
            "unique_id": "macro.dbt_utils.default__test_not_null_proportion",
            "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as {{ dbt.type_numeric() }}) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.type_numeric"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5804212,
            "supported_languages": null
        },
        "macro.dbt_utils.test_sequential_values": {
            "name": "test_sequential_values",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/sequential_values.sql",
            "original_file_path": "macros/generic_tests/sequential_values.sql",
            "unique_id": "macro.dbt_utils.test_sequential_values",
            "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_sequential_values"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.580768,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_sequential_values": {
            "name": "default__test_sequential_values",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/sequential_values.sql",
            "original_file_path": "macros/generic_tests/sequential_values.sql",
            "unique_id": "macro.dbt_utils.default__test_sequential_values",
            "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.slugify",
                    "macro.dbt.type_timestamp",
                    "macro.dbt.dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.581395,
            "supported_languages": null
        },
        "macro.dbt_utils.test_equality": {
            "name": "test_equality",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/equality.sql",
            "original_file_path": "macros/generic_tests/equality.sql",
            "unique_id": "macro.dbt_utils.test_equality",
            "macro_sql": "{% test equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns, exclude_columns, precision)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_equality"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.582156,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_equality": {
            "name": "default__test_equality",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/equality.sql",
            "original_file_path": "macros/generic_tests/equality.sql",
            "unique_id": "macro.dbt_utils.default__test_equality",
            "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n\n{%- if compare_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both a compare and an ignore list were provided to the `equality` macro. Only one is allowed\") }}\n{%- endif -%}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{# Ensure there are no extra columns in the compare_model vs model #}\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- do dbt_utils._is_ephemeral(compare_model, 'test_equality') -%}\n\n    {%- set model_columns = adapter.get_columns_in_relation(model) -%}\n    {%- set compare_model_columns = adapter.get_columns_in_relation(compare_model) -%}\n\n\n    {%- if exclude_columns -%}\n        {#-- Lower case ignore columns for easier comparison --#}\n        {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n        {# Filter out the excluded columns #}\n        {%- set include_columns = [] %}\n        {%- set include_model_columns = [] %}\n        {%- for column in model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n        {%- for column in compare_model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_model_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n\n        {%- set compare_columns_set = set(include_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(include_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- else -%}\n        {%- set compare_columns_set = set(model_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(compare_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- endif -%}\n\n    {% if compare_columns_set != compare_model_columns_set %}\n        {{ exceptions.raise_compiler_error(compare_model ~\" has less columns than \" ~ model ~ \", please ensure they have the same columns or use the `compare_columns` or `exclude_columns` arguments to subset them.\") }}\n    {% endif %}\n\n\n{% endif %}\n\n{%- if not precision -%}\n    {%- if not compare_columns -%}\n        {# \n            You cannot get the columns in an ephemeral model (due to not existing in the information schema),\n            so if the user does not provide an explicit list of columns we must error in the case it is ephemeral\n        #}\n        {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n        {%- set compare_columns = adapter.get_columns_in_relation(model)-%}\n\n        {%- if exclude_columns -%}\n            {#-- Lower case ignore columns for easier comparison --#}\n            {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n            {# Filter out the excluded columns #}\n            {%- set include_columns = [] %}\n            {%- for column in compare_columns -%}\n                {%- if column.name | lower not in exclude_columns -%}\n                    {% do include_columns.append(column) %}\n                {%- endif %}\n            {%- endfor %}\n\n            {%- set compare_columns = include_columns | map(attribute='quoted') %}\n        {%- else -%} {# Compare columns provided #}\n            {%- set compare_columns = compare_columns | map(attribute='quoted') %}\n        {%- endif -%}\n    {%- endif -%}\n\n    {% set compare_cols_csv = compare_columns | join(', ') %}\n\n{% else %} {# Precision required #}\n    {#-\n        If rounding is required, we need to get the types, so it cannot be ephemeral even if they provide column names\n    -#}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set columns = adapter.get_columns_in_relation(model) -%}\n\n    {% set columns_list = [] %}\n    {%- for col in columns -%}\n        {%- if (\n                (col.name|lower in compare_columns|map('lower') or not compare_columns) and\n                (col.name|lower not in exclude_columns|map('lower') or not exclude_columns)\n                ) -%}\n            {# Databricks double type is not picked up by any number type checks in dbt #}\n            {%- if col.is_float() or col.is_numeric() or col.data_type == 'double' -%}\n                {# Cast is required due to postgres not having round for a double precision number #}\n                {%- do columns_list.append('round(cast(' ~ col.quoted ~ ' as ' ~ dbt.type_numeric() ~ '),' ~ precision ~ ') as ' ~ col.quoted) -%}\n            {%- else -%} {# Non-numeric type #}\n                {%- do columns_list.append(col.quoted) -%}\n            {%- endif -%}\n        {% endif %}\n    {%- endfor -%}\n\n    {% set compare_cols_csv = columns_list | join(', ') %}\n\n{% endif %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt.type_numeric",
                    "macro.dbt.except"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.584668,
            "supported_languages": null
        },
        "macro.dbt_utils.test_not_empty_string": {
            "name": "test_not_empty_string",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/not_empty_string.sql",
            "original_file_path": "macros/generic_tests/not_empty_string.sql",
            "unique_id": "macro.dbt_utils.test_not_empty_string",
            "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_not_empty_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.584956,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_not_empty_string": {
            "name": "default__test_not_empty_string",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/not_empty_string.sql",
            "original_file_path": "macros/generic_tests/not_empty_string.sql",
            "unique_id": "macro.dbt_utils.default__test_not_empty_string",
            "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.58517,
            "supported_languages": null
        },
        "macro.dbt_utils.test_mutually_exclusive_ranges": {
            "name": "test_mutually_exclusive_ranges",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/mutually_exclusive_ranges.sql",
            "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql",
            "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges",
            "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_mutually_exclusive_ranges"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.585761,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_mutually_exclusive_ranges": {
            "name": "default__test_mutually_exclusive_ranges",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/mutually_exclusive_ranges.sql",
            "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql",
            "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges",
            "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.586719,
            "supported_languages": null
        },
        "macro.dbt_utils.pretty_log_format": {
            "name": "pretty_log_format",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/jinja_helpers/pretty_log_format.sql",
            "original_file_path": "macros/jinja_helpers/pretty_log_format.sql",
            "unique_id": "macro.dbt_utils.pretty_log_format",
            "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__pretty_log_format"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.586902,
            "supported_languages": null
        },
        "macro.dbt_utils.default__pretty_log_format": {
            "name": "default__pretty_log_format",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/jinja_helpers/pretty_log_format.sql",
            "original_file_path": "macros/jinja_helpers/pretty_log_format.sql",
            "unique_id": "macro.dbt_utils.default__pretty_log_format",
            "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.pretty_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.58702,
            "supported_languages": null
        },
        "macro.dbt_utils._is_relation": {
            "name": "_is_relation",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/jinja_helpers/_is_relation.sql",
            "original_file_path": "macros/jinja_helpers/_is_relation.sql",
            "unique_id": "macro.dbt_utils._is_relation",
            "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5873148,
            "supported_languages": null
        },
        "macro.dbt_utils.pretty_time": {
            "name": "pretty_time",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/jinja_helpers/pretty_time.sql",
            "original_file_path": "macros/jinja_helpers/pretty_time.sql",
            "unique_id": "macro.dbt_utils.pretty_time",
            "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__pretty_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.587497,
            "supported_languages": null
        },
        "macro.dbt_utils.default__pretty_time": {
            "name": "default__pretty_time",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/jinja_helpers/pretty_time.sql",
            "original_file_path": "macros/jinja_helpers/pretty_time.sql",
            "unique_id": "macro.dbt_utils.default__pretty_time",
            "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5876129,
            "supported_languages": null
        },
        "macro.dbt_utils.log_info": {
            "name": "log_info",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/jinja_helpers/log_info.sql",
            "original_file_path": "macros/jinja_helpers/log_info.sql",
            "unique_id": "macro.dbt_utils.log_info",
            "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__log_info"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5877628,
            "supported_languages": null
        },
        "macro.dbt_utils.default__log_info": {
            "name": "default__log_info",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/jinja_helpers/log_info.sql",
            "original_file_path": "macros/jinja_helpers/log_info.sql",
            "unique_id": "macro.dbt_utils.default__log_info",
            "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.pretty_log_format"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.587866,
            "supported_languages": null
        },
        "macro.dbt_utils.slugify": {
            "name": "slugify",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/jinja_helpers/slugify.sql",
            "original_file_path": "macros/jinja_helpers/slugify.sql",
            "unique_id": "macro.dbt_utils.slugify",
            "macro_sql": "{% macro slugify(string) %}\n\n{% if not string %}\n{{ return('') }}\n{% endif %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.588317,
            "supported_languages": null
        },
        "macro.dbt_utils._is_ephemeral": {
            "name": "_is_ephemeral",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/jinja_helpers/_is_ephemeral.sql",
            "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql",
            "unique_id": "macro.dbt_utils._is_ephemeral",
            "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.588774,
            "supported_languages": null
        },
        "macro.dbt_utils.get_intervals_between": {
            "name": "get_intervals_between",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/date_spine.sql",
            "original_file_path": "macros/sql/date_spine.sql",
            "unique_id": "macro.dbt_utils.get_intervals_between",
            "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_intervals_between"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.589083,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_intervals_between": {
            "name": "default__get_intervals_between",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/date_spine.sql",
            "original_file_path": "macros/sql/date_spine.sql",
            "unique_id": "macro.dbt_utils.default__get_intervals_between",
            "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt.datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.58943,
            "supported_languages": null
        },
        "macro.dbt_utils.date_spine": {
            "name": "date_spine",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/date_spine.sql",
            "original_file_path": "macros/sql/date_spine.sql",
            "unique_id": "macro.dbt_utils.date_spine",
            "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__date_spine"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5895748,
            "supported_languages": null
        },
        "macro.dbt_utils.default__date_spine": {
            "name": "default__date_spine",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/date_spine.sql",
            "original_file_path": "macros/sql/date_spine.sql",
            "unique_id": "macro.dbt_utils.default__date_spine",
            "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.generate_series",
                    "macro.dbt_utils.get_intervals_between",
                    "macro.dbt.dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.589792,
            "supported_languages": null
        },
        "macro.dbt_utils.safe_subtract": {
            "name": "safe_subtract",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/safe_subtract.sql",
            "original_file_path": "macros/sql/safe_subtract.sql",
            "unique_id": "macro.dbt_utils.safe_subtract",
            "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__safe_subtract"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.589997,
            "supported_languages": null
        },
        "macro.dbt_utils.default__safe_subtract": {
            "name": "default__safe_subtract",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/safe_subtract.sql",
            "original_file_path": "macros/sql/safe_subtract.sql",
            "unique_id": "macro.dbt_utils.default__safe_subtract",
            "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5903301,
            "supported_languages": null
        },
        "macro.dbt_utils.nullcheck_table": {
            "name": "nullcheck_table",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/nullcheck_table.sql",
            "original_file_path": "macros/sql/nullcheck_table.sql",
            "unique_id": "macro.dbt_utils.nullcheck_table",
            "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__nullcheck_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5905101,
            "supported_languages": null
        },
        "macro.dbt_utils.default__nullcheck_table": {
            "name": "default__nullcheck_table",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/nullcheck_table.sql",
            "original_file_path": "macros/sql/nullcheck_table.sql",
            "unique_id": "macro.dbt_utils.default__nullcheck_table",
            "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt_utils.nullcheck"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.590711,
            "supported_languages": null
        },
        "macro.dbt_utils.get_relations_by_pattern": {
            "name": "get_relations_by_pattern",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_relations_by_pattern.sql",
            "original_file_path": "macros/sql/get_relations_by_pattern.sql",
            "unique_id": "macro.dbt_utils.get_relations_by_pattern",
            "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_relations_by_pattern"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.591008,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_relations_by_pattern": {
            "name": "default__get_relations_by_pattern",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_relations_by_pattern.sql",
            "original_file_path": "macros/sql/get_relations_by_pattern.sql",
            "unique_id": "macro.dbt_utils.default__get_relations_by_pattern",
            "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt_utils.get_tables_by_pattern_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.591606,
            "supported_languages": null
        },
        "macro.dbt_utils.get_powers_of_two": {
            "name": "get_powers_of_two",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/generate_series.sql",
            "original_file_path": "macros/sql/generate_series.sql",
            "unique_id": "macro.dbt_utils.get_powers_of_two",
            "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_powers_of_two"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.591894,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_powers_of_two": {
            "name": "default__get_powers_of_two",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/generate_series.sql",
            "original_file_path": "macros/sql/generate_series.sql",
            "unique_id": "macro.dbt_utils.default__get_powers_of_two",
            "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.592143,
            "supported_languages": null
        },
        "macro.dbt_utils.generate_series": {
            "name": "generate_series",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/generate_series.sql",
            "original_file_path": "macros/sql/generate_series.sql",
            "unique_id": "macro.dbt_utils.generate_series",
            "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__generate_series"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5922592,
            "supported_languages": null
        },
        "macro.dbt_utils.default__generate_series": {
            "name": "default__generate_series",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/generate_series.sql",
            "original_file_path": "macros/sql/generate_series.sql",
            "unique_id": "macro.dbt_utils.default__generate_series",
            "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.get_powers_of_two"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.592569,
            "supported_languages": null
        },
        "macro.dbt_utils.get_relations_by_prefix": {
            "name": "get_relations_by_prefix",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_relations_by_prefix.sql",
            "original_file_path": "macros/sql/get_relations_by_prefix.sql",
            "unique_id": "macro.dbt_utils.get_relations_by_prefix",
            "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_relations_by_prefix"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.592869,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_relations_by_prefix": {
            "name": "default__get_relations_by_prefix",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_relations_by_prefix.sql",
            "original_file_path": "macros/sql/get_relations_by_prefix.sql",
            "unique_id": "macro.dbt_utils.default__get_relations_by_prefix",
            "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt_utils.get_tables_by_prefix_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5933702,
            "supported_languages": null
        },
        "macro.dbt_utils.get_tables_by_prefix_sql": {
            "name": "get_tables_by_prefix_sql",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_tables_by_prefix_sql.sql",
            "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql",
            "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql",
            "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_tables_by_prefix_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.593608,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_tables_by_prefix_sql": {
            "name": "default__get_tables_by_prefix_sql",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_tables_by_prefix_sql.sql",
            "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql",
            "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql",
            "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.get_tables_by_pattern_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.593781,
            "supported_languages": null
        },
        "macro.dbt_utils.star": {
            "name": "star",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/star.sql",
            "original_file_path": "macros/sql/star.sql",
            "unique_id": "macro.dbt_utils.star",
            "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__star"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.594228,
            "supported_languages": null
        },
        "macro.dbt_utils.default__star": {
            "name": "default__star",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/star.sql",
            "original_file_path": "macros/sql/star.sql",
            "unique_id": "macro.dbt_utils.default__star",
            "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt_utils.get_filtered_columns_in_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.595059,
            "supported_languages": null
        },
        "macro.dbt_utils.unpivot": {
            "name": "unpivot",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/unpivot.sql",
            "original_file_path": "macros/sql/unpivot.sql",
            "unique_id": "macro.dbt_utils.unpivot",
            "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', quote_identifiers=False) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, quote_identifiers)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__unpivot"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.595553,
            "supported_languages": null
        },
        "macro.dbt_utils.default__unpivot": {
            "name": "default__unpivot",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/unpivot.sql",
            "original_file_path": "macros/sql/unpivot.sql",
            "unique_id": "macro.dbt_utils.default__unpivot",
            "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', quote_identifiers=False) -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    {%- set current_col_name = adapter.quote(col.column) if quote_identifiers else col.column -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ adapter.quote(exclude_col) if quote_identifiers else exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ adapter.quote(field_name) if quote_identifiers else field_name  }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(current_col_name) }}\n             {% else %}\n           {{ current_col_name }}\n             {% endif %}\n           as {{ cast_to }}) as {{ adapter.quote(value_name) if quote_identifiers else value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt.type_string",
                    "macro.dbt.cast_bool_to_text"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5966668,
            "supported_languages": null
        },
        "macro.dbt_utils.safe_divide": {
            "name": "safe_divide",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/safe_divide.sql",
            "original_file_path": "macros/sql/safe_divide.sql",
            "unique_id": "macro.dbt_utils.safe_divide",
            "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__safe_divide"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.596855,
            "supported_languages": null
        },
        "macro.dbt_utils.default__safe_divide": {
            "name": "default__safe_divide",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/safe_divide.sql",
            "original_file_path": "macros/sql/safe_divide.sql",
            "unique_id": "macro.dbt_utils.default__safe_divide",
            "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.59694,
            "supported_languages": null
        },
        "macro.dbt_utils.union_relations": {
            "name": "union_relations",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/union.sql",
            "original_file_path": "macros/sql/union.sql",
            "unique_id": "macro.dbt_utils.union_relations",
            "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__union_relations"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5976179,
            "supported_languages": null
        },
        "macro.dbt_utils.default__union_relations": {
            "name": "default__union_relations",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/union.sql",
            "original_file_path": "macros/sql/union.sql",
            "unique_id": "macro.dbt_utils.default__union_relations",
            "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt.string_literal",
                    "macro.dbt.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.5996969,
            "supported_languages": null
        },
        "macro.dbt_utils.group_by": {
            "name": "group_by",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/groupby.sql",
            "original_file_path": "macros/sql/groupby.sql",
            "unique_id": "macro.dbt_utils.group_by",
            "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__group_by"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.599881,
            "supported_languages": null
        },
        "macro.dbt_utils.default__group_by": {
            "name": "default__group_by",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/groupby.sql",
            "original_file_path": "macros/sql/groupby.sql",
            "unique_id": "macro.dbt_utils.default__group_by",
            "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.600037,
            "supported_languages": null
        },
        "macro.dbt_utils.deduplicate": {
            "name": "deduplicate",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/deduplicate.sql",
            "original_file_path": "macros/sql/deduplicate.sql",
            "unique_id": "macro.dbt_utils.deduplicate",
            "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.snowflake__deduplicate"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.600428,
            "supported_languages": null
        },
        "macro.dbt_utils.default__deduplicate": {
            "name": "default__deduplicate",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/deduplicate.sql",
            "original_file_path": "macros/sql/deduplicate.sql",
            "unique_id": "macro.dbt_utils.default__deduplicate",
            "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.6005719,
            "supported_languages": null
        },
        "macro.dbt_utils.redshift__deduplicate": {
            "name": "redshift__deduplicate",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/deduplicate.sql",
            "original_file_path": "macros/sql/deduplicate.sql",
            "unique_id": "macro.dbt_utils.redshift__deduplicate",
            "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }} as tt\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.6006742,
            "supported_languages": null
        },
        "macro.dbt_utils.postgres__deduplicate": {
            "name": "postgres__deduplicate",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/deduplicate.sql",
            "original_file_path": "macros/sql/deduplicate.sql",
            "unique_id": "macro.dbt_utils.postgres__deduplicate",
            "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.60079,
            "supported_languages": null
        },
        "macro.dbt_utils.snowflake__deduplicate": {
            "name": "snowflake__deduplicate",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/deduplicate.sql",
            "original_file_path": "macros/sql/deduplicate.sql",
            "unique_id": "macro.dbt_utils.snowflake__deduplicate",
            "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.600896,
            "supported_languages": null
        },
        "macro.dbt_utils.databricks__deduplicate": {
            "name": "databricks__deduplicate",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/deduplicate.sql",
            "original_file_path": "macros/sql/deduplicate.sql",
            "unique_id": "macro.dbt_utils.databricks__deduplicate",
            "macro_sql": "\n{%- macro databricks__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.601002,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__deduplicate": {
            "name": "bigquery__deduplicate",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/deduplicate.sql",
            "original_file_path": "macros/sql/deduplicate.sql",
            "unique_id": "macro.dbt_utils.bigquery__deduplicate",
            "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.601115,
            "supported_languages": null
        },
        "macro.dbt_utils.surrogate_key": {
            "name": "surrogate_key",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/surrogate_key.sql",
            "original_file_path": "macros/sql/surrogate_key.sql",
            "unique_id": "macro.dbt_utils.surrogate_key",
            "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__surrogate_key"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.601335,
            "supported_languages": null
        },
        "macro.dbt_utils.default__surrogate_key": {
            "name": "default__surrogate_key",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/surrogate_key.sql",
            "original_file_path": "macros/sql/surrogate_key.sql",
            "unique_id": "macro.dbt_utils.default__surrogate_key",
            "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.6014888,
            "supported_languages": null
        },
        "macro.dbt_utils.safe_add": {
            "name": "safe_add",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/safe_add.sql",
            "original_file_path": "macros/sql/safe_add.sql",
            "unique_id": "macro.dbt_utils.safe_add",
            "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__safe_add"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.6016982,
            "supported_languages": null
        },
        "macro.dbt_utils.default__safe_add": {
            "name": "default__safe_add",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/safe_add.sql",
            "original_file_path": "macros/sql/safe_add.sql",
            "unique_id": "macro.dbt_utils.default__safe_add",
            "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.6020322,
            "supported_languages": null
        },
        "macro.dbt_utils.nullcheck": {
            "name": "nullcheck",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/nullcheck.sql",
            "original_file_path": "macros/sql/nullcheck.sql",
            "unique_id": "macro.dbt_utils.nullcheck",
            "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__nullcheck"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.6022289,
            "supported_languages": null
        },
        "macro.dbt_utils.default__nullcheck": {
            "name": "default__nullcheck",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/nullcheck.sql",
            "original_file_path": "macros/sql/nullcheck.sql",
            "unique_id": "macro.dbt_utils.default__nullcheck",
            "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.602433,
            "supported_languages": null
        },
        "macro.dbt_utils.get_tables_by_pattern_sql": {
            "name": "get_tables_by_pattern_sql",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_tables_by_pattern_sql.sql",
            "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
            "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql",
            "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_tables_by_pattern_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.602975,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_tables_by_pattern_sql": {
            "name": "default__get_tables_by_pattern_sql",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_tables_by_pattern_sql.sql",
            "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
            "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql",
            "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.get_table_types_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.60321,
            "supported_languages": null
        },
        "macro.dbt_utils.redshift__get_tables_by_pattern_sql": {
            "name": "redshift__get_tables_by_pattern_sql",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_tables_by_pattern_sql.sql",
            "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
            "unique_id": "macro.dbt_utils.redshift__get_tables_by_pattern_sql",
            "macro_sql": "{% macro redshift__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% set sql %}\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from \"{{ database }}\".\"information_schema\".\"tables\"\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n        union all\n        select distinct\n            schemaname as {{ adapter.quote('table_schema') }},\n            tablename as {{ adapter.quote('table_name') }},\n            'external' as {{ adapter.quote('table_type') }}\n        from svv_external_tables\n        where redshift_database_name = '{{ database }}'\n        and schemaname ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n    {% endset %}\n\n    {{ return(sql) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.get_table_types_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.6036491,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {
            "name": "bigquery__get_tables_by_pattern_sql",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_tables_by_pattern_sql.sql",
            "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
            "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql",
            "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._bigquery__get_matching_schemata",
                    "macro.dbt_utils.get_table_types_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.6041129,
            "supported_languages": null
        },
        "macro.dbt_utils._bigquery__get_matching_schemata": {
            "name": "_bigquery__get_matching_schemata",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_tables_by_pattern_sql.sql",
            "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
            "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata",
            "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.6044369,
            "supported_languages": null
        },
        "macro.dbt_utils.get_column_values": {
            "name": "get_column_values",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_column_values.sql",
            "original_file_path": "macros/sql/get_column_values.sql",
            "unique_id": "macro.dbt_utils.get_column_values",
            "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_column_values"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.604936,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_column_values": {
            "name": "default__get_column_values",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_column_values.sql",
            "original_file_path": "macros/sql/get_column_values.sql",
            "unique_id": "macro.dbt_utils.default__get_column_values",
            "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt.load_relation",
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.6059752,
            "supported_languages": null
        },
        "macro.dbt_utils.pivot": {
            "name": "pivot",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/pivot.sql",
            "original_file_path": "macros/sql/pivot.sql",
            "unique_id": "macro.dbt_utils.pivot",
            "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__pivot"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.606553,
            "supported_languages": null
        },
        "macro.dbt_utils.default__pivot": {
            "name": "default__pivot",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/pivot.sql",
            "original_file_path": "macros/sql/pivot.sql",
            "unique_id": "macro.dbt_utils.default__pivot",
            "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.escape_single_quotes",
                    "macro.dbt_utils.slugify"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.607072,
            "supported_languages": null
        },
        "macro.dbt_utils.get_filtered_columns_in_relation": {
            "name": "get_filtered_columns_in_relation",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_filtered_columns_in_relation.sql",
            "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql",
            "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation",
            "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_filtered_columns_in_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.6073642,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_filtered_columns_in_relation": {
            "name": "default__get_filtered_columns_in_relation",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_filtered_columns_in_relation.sql",
            "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql",
            "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation",
            "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.607837,
            "supported_languages": null
        },
        "macro.dbt_utils.width_bucket": {
            "name": "width_bucket",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/width_bucket.sql",
            "original_file_path": "macros/sql/width_bucket.sql",
            "unique_id": "macro.dbt_utils.width_bucket",
            "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.snowflake__width_bucket"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.6081731,
            "supported_languages": null
        },
        "macro.dbt_utils.default__width_bucket": {
            "name": "default__width_bucket",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/width_bucket.sql",
            "original_file_path": "macros/sql/width_bucket.sql",
            "unique_id": "macro.dbt_utils.default__width_bucket",
            "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.safe_cast",
                    "macro.dbt.type_numeric"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.60849,
            "supported_languages": null
        },
        "macro.dbt_utils.snowflake__width_bucket": {
            "name": "snowflake__width_bucket",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/width_bucket.sql",
            "original_file_path": "macros/sql/width_bucket.sql",
            "unique_id": "macro.dbt_utils.snowflake__width_bucket",
            "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.60862,
            "supported_languages": null
        },
        "macro.dbt_utils.get_query_results_as_dict": {
            "name": "get_query_results_as_dict",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_query_results_as_dict.sql",
            "original_file_path": "macros/sql/get_query_results_as_dict.sql",
            "unique_id": "macro.dbt_utils.get_query_results_as_dict",
            "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_query_results_as_dict"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.60886,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_query_results_as_dict": {
            "name": "default__get_query_results_as_dict",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_query_results_as_dict.sql",
            "original_file_path": "macros/sql/get_query_results_as_dict.sql",
            "unique_id": "macro.dbt_utils.default__get_query_results_as_dict",
            "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.6092439,
            "supported_languages": null
        },
        "macro.dbt_utils.generate_surrogate_key": {
            "name": "generate_surrogate_key",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/generate_surrogate_key.sql",
            "original_file_path": "macros/sql/generate_surrogate_key.sql",
            "unique_id": "macro.dbt_utils.generate_surrogate_key",
            "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__generate_surrogate_key"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.60949,
            "supported_languages": null
        },
        "macro.dbt_utils.default__generate_surrogate_key": {
            "name": "default__generate_surrogate_key",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/generate_surrogate_key.sql",
            "original_file_path": "macros/sql/generate_surrogate_key.sql",
            "unique_id": "macro.dbt_utils.default__generate_surrogate_key",
            "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.type_string",
                    "macro.dbt.hash",
                    "macro.dbt.concat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.609909,
            "supported_languages": null
        },
        "macro.dbt_utils.get_table_types_sql": {
            "name": "get_table_types_sql",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_table_types_sql.sql",
            "original_file_path": "macros/sql/get_table_types_sql.sql",
            "unique_id": "macro.dbt_utils.get_table_types_sql",
            "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_table_types_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.610155,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_table_types_sql": {
            "name": "default__get_table_types_sql",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_table_types_sql.sql",
            "original_file_path": "macros/sql/get_table_types_sql.sql",
            "unique_id": "macro.dbt_utils.default__get_table_types_sql",
            "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.61026,
            "supported_languages": null
        },
        "macro.dbt_utils.postgres__get_table_types_sql": {
            "name": "postgres__get_table_types_sql",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_table_types_sql.sql",
            "original_file_path": "macros/sql/get_table_types_sql.sql",
            "unique_id": "macro.dbt_utils.postgres__get_table_types_sql",
            "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.610358,
            "supported_languages": null
        },
        "macro.dbt_utils.databricks__get_table_types_sql": {
            "name": "databricks__get_table_types_sql",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_table_types_sql.sql",
            "original_file_path": "macros/sql/get_table_types_sql.sql",
            "unique_id": "macro.dbt_utils.databricks__get_table_types_sql",
            "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.610451,
            "supported_languages": null
        },
        "macro.dbt_utils.get_single_value": {
            "name": "get_single_value",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_single_value.sql",
            "original_file_path": "macros/sql/get_single_value.sql",
            "unique_id": "macro.dbt_utils.get_single_value",
            "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_single_value"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.6107361,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_single_value": {
            "name": "default__get_single_value",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_single_value.sql",
            "original_file_path": "macros/sql/get_single_value.sql",
            "unique_id": "macro.dbt_utils.default__get_single_value",
            "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.611242,
            "supported_languages": null
        },
        "macro.dbt_utils.degrees_to_radians": {
            "name": "degrees_to_radians",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/haversine_distance.sql",
            "original_file_path": "macros/sql/haversine_distance.sql",
            "unique_id": "macro.dbt_utils.degrees_to_radians",
            "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.6115682,
            "supported_languages": null
        },
        "macro.dbt_utils.haversine_distance": {
            "name": "haversine_distance",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/haversine_distance.sql",
            "original_file_path": "macros/sql/haversine_distance.sql",
            "unique_id": "macro.dbt_utils.haversine_distance",
            "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__haversine_distance"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.611743,
            "supported_languages": null
        },
        "macro.dbt_utils.default__haversine_distance": {
            "name": "default__haversine_distance",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/haversine_distance.sql",
            "original_file_path": "macros/sql/haversine_distance.sql",
            "unique_id": "macro.dbt_utils.default__haversine_distance",
            "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.6121101,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__haversine_distance": {
            "name": "bigquery__haversine_distance",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/haversine_distance.sql",
            "original_file_path": "macros/sql/haversine_distance.sql",
            "unique_id": "macro.dbt_utils.bigquery__haversine_distance",
            "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.degrees_to_radians"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.61261,
            "supported_languages": null
        },
        "macro.telia_analytics_no.materialization_s3_seed_snowflake": {
            "name": "materialization_s3_seed_snowflake",
            "resource_type": "macro",
            "package_name": "telia_analytics_no",
            "path": "macros/s3_seed.sql",
            "original_file_path": "macros/s3_seed.sql",
            "unique_id": "macro.telia_analytics_no.materialization_s3_seed_snowflake",
            "macro_sql": "{% materialization s3_seed, adapter='snowflake' -%}\n    {%- set identifier = model['alias'] -%}\n    {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n    {%- set target_relation = api.Relation.create(schema=schema, identifier=identifier, type='table') -%}\n    {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n    {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n    {%- set should_drop = (full_refresh_mode or not exists_as_table) -%}\n    {%- set s3_location = 's3://manual-data/dbt/' ~ config.get('s3_url', '') -%}\n    {%- set file_format_name = config.get('file_format_name', default='temp_format')  -%}\n    {%- set file_format_sql = config.get('file_format_sql')  -%}\n\n    {%- call statement() -%}\n            CREATE TEMPORARY STAGE temp_stage\n            URL = {{ s3_location }}\n            STORAGE_INTEGRATION = NGA_MANUAL_DATA_SNOWFLAKE_S3_ROLE;\n    {%- endcall -%}\n\n    {%- call statement() -%}\n            CREATE OR REPLACE TEMPORARY FILE FORMAT {{ file_format_name }}\n            {{ file_format_sql }}\n    {%- endcall -%}\n\n    -- setup\n    {% if old_relation is none -%}\n        -- noop\n    {%- elif should_drop -%}\n        {{ adapter.drop_relation(old_relation) }}\n        {%- set old_relation = none -%}\n    {%- endif %}\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n    -- `BEGIN` happens here:\n    BEGIN;\n    -- build model\n    {% if full_refresh_mode or old_relation is none -%}\n        {# Create an empty table with columns inferred from the CSV #}\n        {%- call statement() -%}\n            CREATE OR REPLACE TABLE {{ target_relation }}\n            USING TEMPLATE (\n                SELECT ARRAY_AGG(OBJECT_CONSTRUCT(*))\n                    WITHIN GROUP (ORDER BY order_id)\n                FROM TABLE(\n                    INFER_SCHEMA(\n                    LOCATION=>'@temp_stage',\n                    FILE_FORMAT=>'{{ file_format_name }}'\n                    )\n                )\n        );\n        {%- endcall -%}\n    {% else -%}\n        {%- call statement() -%}\n            TRUNCATE TABLE {{ target_relation }}\n        {%- endcall -%}\n    {%- endif %}\n\n    {# Perform the main load operation using COPY INTO #}\n    {# See https://docs.snowflake.net/manuals/user-guide/data-load-considerations-load.html #}\n    {# See https://docs.snowflake.net/manuals/user-guide/data-load-transform.html #}\n    {%- call statement('main') -%}\n        COPY INTO {{ target_relation }}\n        FROM @temp_stage\n        FILE_FORMAT = {{ file_format_name }}\n        MATCH_BY_COLUMN_NAME = CASE_INSENSITIVE;\n    {% endcall %}\n\n    -- `COMMIT` happens here\n    COMMIT;\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n    {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt.run_hooks"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.614076,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.telia_analytics_no.materialization_b2b_compress_default": {
            "name": "materialization_b2b_compress_default",
            "resource_type": "macro",
            "package_name": "telia_analytics_no",
            "path": "macros/b2b_compress.sql",
            "original_file_path": "macros/b2b_compress.sql",
            "unique_id": "macro.telia_analytics_no.materialization_b2b_compress_default",
            "macro_sql": "{% materialization b2b_compress, default %}\n  {{ log('Starting custom materialization b2b_compress', info=True) }}\n  {% set original_query_tag = set_query_tag() %}\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {% set src = sql.strip().split('.') %}\n  {%- set src_relation = adapter.get_relation(\n      database=src[0],\n      schema=src[1],\n      identifier=src[2]) -%}\n  {% set keepvars = config.get('keep_vars') %}\n  {% set vf = config.get('vf', 'VALID_FROM') %}\n  {% set vt = config.get('vt', 'VALID_TO') %}\n  {% set days_between = config.get('days_between', none) %}\n  {% if days_between %}\n    {% set proc_params = \"'\"+\"','\".join([keepvars.upper(), vf.upper(), vt.upper()]) + \"',\" + days_between|string %}\n  {% else %}\n    {% set proc_params = \"'\"+\"','\".join([keepvars.upper(), vf.upper(), vt.upper()]) + \"'\"%}\n  {% endif %}\n  \n  {%- set source_relation = this.incorporate(type='table') %}\n  -- drop the temp relations if they exist already in the database\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n\n    --sql\n  {% call statement('main') -%} --has to be called always, main needs to exist\n    call util.b2b_compress_history('{{ src_relation.schema.upper() }}.{{ src_relation.identifier.upper() }}', \n    '{{ this.schema.upper() }}.{{ this.identifier.upper() }}', {{ proc_params }});\n  {%- endcall %}\n\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {% do unset_query_tag(original_query_tag) %}\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.create_indexes",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs",
                    "macro.dbt_snowflake.unset_query_tag"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.615815,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.telia_analytics_no.apply_tests_pass": {
            "name": "apply_tests_pass",
            "resource_type": "macro",
            "package_name": "telia_analytics_no",
            "path": "macros/tags_for_testing.sql",
            "original_file_path": "macros/tags_for_testing.sql",
            "unique_id": "macro.telia_analytics_no.apply_tests_pass",
            "macro_sql": "{% macro apply_tests_pass(results) %}\n{% set logprefix = '=[apply_tests_pass]= ' %}    \n{% set tag = 'TESTS_PASS' %}\n\n{% if execute and flags.WHICH == 'run' %}\n\n    {{ log(logprefix ~ 'macro start (after dbt run)', info=True) }}\n    {#\n    -- We take out the test nodes and get all the refs to know what model has test attached to. Store it in test_refs\n    #}\n    {% set only_tests = telia_analytics_no.filter_dict_by_attr(graph['nodes'], 'resource_type', 'test') %}\n    {{ log('  Tests:' ~ only_tests) }}\n    {% set tests_depend_on = telia_analytics_no.union_lists_from_dict(only_tests, 'depends_on', 'nodes') %}\n    {{ log(logprefix ~ '  tests depends on: ' + tests_depend_on|join(','), info=True) }}\n    \n    {% set tested_models =  tests_depend_on | unique | list %}\n    {{ log(logprefix ~ ' tested models (refs): ' + tested_models|join(','), info=True) }}\n    {{ log(logprefix ~ '  selected models for the run: ' + context['context']['selected_resources']|join(','), info=True) }}\n\n    {#\n    -- We set pending on all selected models if they have tests. If not, we set pass.\n    #}\n    {{ log('Only models:') }}\n    {% set only_models = telia_analytics_no.filter_dict_by_attr(graph['nodes'], 'resource_type', 'model') %}\n    {{ log(only_models) }}\n    {#\n    -- We set pending on all models that has test defined (at least one).\n    -- If the model does not have any test defined, we set the tag to true.\n    #}\n    {% set current_tags = {} %}\n    {% for node in context['context']['selected_resources'] -%}\n        {% if node in only_models %}\n            {% if node in tested_models %}\n                {% set tag_value = 'pending' %}\n            {% else %}\n                {% set tag_value = 'true' %}\n            {% endif %}\n            {% set database = only_models[node]['database'] %}\n            {% set schema_name = only_models[node]['schema'] %}\n            {% set table_name = only_models[node]['name'] %}\n            {% set materialized = only_models[node]['config']['materialized'] %}\n            {% set _ = current_tags.update(telia_analytics_no.get_current_tags_in_schema(database, schema_name, current_tags)) %}          \n            {%- set source_relation = adapter.get_relation(\n                database=database,\n                schema=schema_name,\n                identifier=table_name) -%}\n            {% if source_relation %}                \n                {{ log(logprefix ~ '  ..setting '+tag+' on '+schema_name+'.'+table_name + ' to: ' + tag_value, info=True) }}\n                {% if materialized == 'view' %}\n                    {%- call statement('main', fetch_result=True) -%}\n                    alter view {{schema_name}}.{{table_name}} set tag UTIL.{{ tag }} = '{{ tag_value }}'\n                    {%- endcall -%}\n                {% else %}\n                    {%- call statement('main', fetch_result=True) -%}\n                    alter table {{schema_name}}.{{table_name}} set tag UTIL.{{ tag }} = '{{ tag_value }}'\n                    {%- endcall -%}\n                {% endif %}\n            {% else %}\n                {{ log(logprefix ~ '  ..object ' + table_name + ' does not exist so no need to unset tag', info=True)}}\n            {% endif %}\n        {% endif %}\n    {% endfor -%}\n{% endif %}\n\n\n{% if execute and (flags.WHICH == 'test' or flags.WHICH == 'build') %}\n    {{ log(logprefix ~ 'macro start (after dbt test or build)', info=True) }}\n\n    {% set only_tests = telia_analytics_no.filter_dict_by_attr(graph['nodes'], 'resource_type', 'test') %}\n    {{ log('Tests:') }}\n    {{ log(only_tests) }}    \n    {% set selected_tests = context['context']['selected_resources'] %}    \n    {{ log(logprefix ~ \"  selected tests:\" ~ selected_tests|length, info=True) }}\n    {% set only_executed_tests = telia_analytics_no.filter_dict_by_keys(only_tests, selected_tests) %}\n    {{ log(logprefix ~ \"  executed tests:\" ~ only_executed_tests|length, info=True) }}\n\n    {% set tests_depend_on = telia_analytics_no.union_lists_from_dict(only_executed_tests, 'depends_on', 'nodes') %}   \n    {{ log(logprefix ~ tests_depend_on) }}\n    {% set tested_models =  tests_depend_on | unique | list %}\n    {{ log(logprefix ~ '  tested models (refs):' ~ tested_models, info=True) }}\n    {% set passed_tests = results | selectattr('status', 'equalto', 'pass') | list %}\n    {% set failed_tests = results | selectattr('status', 'equalto', 'fail') | list %}\n   \n    {{ log(logprefix ~ ' passed tests:' ~ passed_tests, info=True) }}    \n    {{ log(logprefix ~ ' failed tests:' ~ failed_tests, info=True) }}\n    {% set passed_nodes = passed_tests|map(attribute='node')|map(attribute='depends_on')|map(attribute='nodes')|list|sum(start=[])|unique|list %}\n    {% set failed_nodes = failed_tests|map(attribute='node')|map(attribute='depends_on')|map(attribute='nodes')|list|sum(start=[])|unique|list %}\n    {{ log(logprefix ~ ' passed nodes [' + passed_nodes|join(',') + ']', info=True) }}\n    {{ log(logprefix ~ ' failed nodes [' + failed_nodes|join(',') + ']', info=True) }}\n    {% for tested_model in tested_models %}\n        {% if tested_model.startswith('model.') %}\n            {% set node = graph['nodes'][tested_model] %}\n            {% set database_name = node['database'] %}\n            {% set schema_name = node['schema'] %}\n            {% set table_name = node['name'] %}\n            {% set materialized = node['config']['materialized'] %}        \n            {% if tested_model in failed_nodes %}\n                {% set tag_value = 'false' %}\n            {% else %}            \n                {% set tag_value = 'true' %}\n            {% endif %}\n            {% if tag_value != '' %}\n                {{ log(logprefix ~ '  ..setting '+tag+' on '+schema_name+'.'+table_name + ' to: ' + tag_value, info=True) }}\n                {#\n                -- This is not really needed as Snowflake supports alter table <VIEW> set tag \n                #}\n                {% if materialized == 'view' %}\n                    {%- call statement('main', fetch_result=True) -%}\n                    alter view {{schema_name}}.{{table_name}} set tag UTIL.{{ tag }} = '{{ tag_value }}'\n                    {%- endcall -%}\n                {% else %}\n                    {%- call statement('main', fetch_result=True) -%}\n                    alter table {{schema_name}}.{{table_name}} set tag UTIL.{{ tag }} = '{{ tag_value}}'\n                    {%- endcall -%}\n                {% endif %}\n            {% endif %}\n        {% endif %}        \n    {% endfor %}\n{% endif %}\n{% do telia_analytics_no.parse_run_results(results) %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.telia_analytics_no.filter_dict_by_attr",
                    "macro.telia_analytics_no.union_lists_from_dict",
                    "macro.telia_analytics_no.get_current_tags_in_schema",
                    "macro.dbt.statement",
                    "macro.telia_analytics_no.filter_dict_by_keys",
                    "macro.telia_analytics_no.parse_run_results"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.6213279,
            "supported_languages": null
        },
        "macro.telia_analytics_no.filter_dict_by_attr": {
            "name": "filter_dict_by_attr",
            "resource_type": "macro",
            "package_name": "telia_analytics_no",
            "path": "macros/tags_for_testing.sql",
            "original_file_path": "macros/tags_for_testing.sql",
            "unique_id": "macro.telia_analytics_no.filter_dict_by_attr",
            "macro_sql": "{% macro filter_dict_by_attr(dict_input, attribute_name, attribute_value) %}\n  {% set filtered_dict = {} %}\n\n  {% for key, value in dict_input.items() %}\n    {% if value[attribute_name] == attribute_value %}\n      {% set _ = filtered_dict.update({key: value}) %}\n    {% endif %}\n  {% endfor %}\n  {{ return(filtered_dict) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.621653,
            "supported_languages": null
        },
        "macro.telia_analytics_no.filter_dict_by_keys": {
            "name": "filter_dict_by_keys",
            "resource_type": "macro",
            "package_name": "telia_analytics_no",
            "path": "macros/tags_for_testing.sql",
            "original_file_path": "macros/tags_for_testing.sql",
            "unique_id": "macro.telia_analytics_no.filter_dict_by_keys",
            "macro_sql": "{% macro filter_dict_by_keys(dict_input, keys) %}\n  {% set filtered_dict = {} %}\n  {% for key, value in dict_input.items() %}\n    {% if key in keys %}\n      {% set _ = filtered_dict.update({key: value}) %}\n    {% endif %}\n  {% endfor %}\n  {{ return(filtered_dict) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.621941,
            "supported_languages": null
        },
        "macro.telia_analytics_no.union_lists_from_dict": {
            "name": "union_lists_from_dict",
            "resource_type": "macro",
            "package_name": "telia_analytics_no",
            "path": "macros/tags_for_testing.sql",
            "original_file_path": "macros/tags_for_testing.sql",
            "unique_id": "macro.telia_analytics_no.union_lists_from_dict",
            "macro_sql": "{% macro union_lists_from_dict(dict_input, attribute_name, nested_attr_name) %}\n  {% set result = [] %}\n  {% for key, value in dict_input.items() %}\n    {% if attribute_name in value %}\n      {% if nested_attr_name in value[attribute_name] %}\n        {% for item in value[attribute_name][nested_attr_name] %}\n                {% set _ = result.append(item) %}\n        {% endfor %}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n  {{ return(result) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.62229,
            "supported_languages": null
        },
        "macro.telia_analytics_no.dicts_to_list": {
            "name": "dicts_to_list",
            "resource_type": "macro",
            "package_name": "telia_analytics_no",
            "path": "macros/tags_for_testing.sql",
            "original_file_path": "macros/tags_for_testing.sql",
            "unique_id": "macro.telia_analytics_no.dicts_to_list",
            "macro_sql": "{% macro dicts_to_list(dict_input, attribute_name, nested_attr_name) %}\n  {% set result = [] %}\n  {% for key, value in dict_input.items() %}\n    {% if attribute_name in value %}\n      {% for item in value[attribute_name] %}\n        {% set _ = result.append(item[nested_attr_name]) %}\n      {% endfor %}      \n    {% endif %}\n  {% endfor %}\n  {{ return(result) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.622607,
            "supported_languages": null
        },
        "macro.telia_analytics_no.get_dict_by_attr": {
            "name": "get_dict_by_attr",
            "resource_type": "macro",
            "package_name": "telia_analytics_no",
            "path": "macros/tags_for_testing.sql",
            "original_file_path": "macros/tags_for_testing.sql",
            "unique_id": "macro.telia_analytics_no.get_dict_by_attr",
            "macro_sql": "{% macro get_dict_by_attr(dict_input, attribute_name, attribute_value) %}  \n  {% for key, value in dict_input.items() %}\n    {% if value[attribute_name] == attribute_value %}\n        {{ return(value) }}\n    {% endif %}\n  {% endfor %}\n  {{ return({}) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.622845,
            "supported_languages": null
        },
        "macro.telia_analytics_no.get_current_tags_in_schema": {
            "name": "get_current_tags_in_schema",
            "resource_type": "macro",
            "package_name": "telia_analytics_no",
            "path": "macros/tags_for_testing.sql",
            "original_file_path": "macros/tags_for_testing.sql",
            "unique_id": "macro.telia_analytics_no.get_current_tags_in_schema",
            "macro_sql": "{% macro get_current_tags_in_schema(database, schema, current_tags) %}\n    {% if schema in current_tags %}\n        {{ log('tags already fetched for schema '+schema) }}\n        {{ return(current_tags) }}\n    {% endif %}\n    {%- call statement('set_database', fetch_result=True) -%}\n        USE DATABASE {{database}}\n    {%- endcall -%}\n    {%- call statement('set_schema', fetch_result=True) -%}\n        USE SCHEMA {{schema}}\n    {%- endcall -%}\n    {{ log('need to fetch tags for schema '+schema) }}\n    {%- call statement('main', fetch_result=True) -%}\n        show tags in {{database}}.{{schema}}\n    {%- endcall -%}\n    {%- set tags_by_schema = {schema: load_result('main')['table'].columns.get('name').values()|list} -%}    \n    {{ return(tags_by_schema) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.623359,
            "supported_languages": null
        },
        "macro.telia_analytics_no.starts_with_list": {
            "name": "starts_with_list",
            "resource_type": "macro",
            "package_name": "telia_analytics_no",
            "path": "macros/tags_for_testing.sql",
            "original_file_path": "macros/tags_for_testing.sql",
            "unique_id": "macro.telia_analytics_no.starts_with_list",
            "macro_sql": "{% macro starts_with_list(value, list_of_values) %}\n    {% if list_of_values|length == 0 %}\n        {{ return(false) }}\n    {% endif %}\n    {% for v in list_of_values %}\n        {% if value.startswith(v) %}\n            {{ return(true) }}\n        {% endif %}\n    {% endfor %}\n    {{ return(false) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.623636,
            "supported_languages": null
        },
        "macro.telia_analytics_no.get_selected_models": {
            "name": "get_selected_models",
            "resource_type": "macro",
            "package_name": "telia_analytics_no",
            "path": "macros/tags_for_testing.sql",
            "original_file_path": "macros/tags_for_testing.sql",
            "unique_id": "macro.telia_analytics_no.get_selected_models",
            "macro_sql": "{% macro get_selected_models(only_models) %}\n    {{ log(invocation_args_dict) }}\n    {% set exclude_list = invocation_args_dict['exclude'] | default([]) %}\n    {% set select_list = invocation_args_dict['select'] | default([]) %}\n    {{ log('args: select=[' + select_list | join(',') + '] exlude=[' + exclude_list | join(',') + ']' )}}\n    {% set filtered_nodes = [] %}\n    {% for node in only_models %}\n        {{ log(node) }}\n        {% set node_name = only_models[node]['name'] %}\n        {% set node_path = 'models/' + only_models[node]['path'] %}\n        {{ log('node_path=' + node_path + ' node_name=' + node_name )}}\n        {% set exclude = false %}\n        {% if telia_analytics_no.starts_with_list(node_path, exclude_list) %}\n            {{ log(' -> model path in exclude list') }}\n            {% set exclude = true %}\n        {% endif %}\n        {% if node_name in exclude_list %}\n            {{ log(' -> node name in exclude list') }}\n            {% set exclude = true %}\n        {% endif %}        \n        {% if not telia_analytics_no.starts_with_list(node_path, select_list) %}\n            {% if not node_name in select_list %}\n                {{ log(' -> model path or model name not in select list') }}\n                {% set exclude = true %}\n            {% endif %}\n        {% endif %}\n        {% if not exclude %}\n            {% set _ = filtered_nodes.append(only_models[node]) %}\n        {% endif %}\n        {% if exclude_list|length == 0 and select_list|length == 0 %}\n            {% set _ = filtered_nodes.append(only_models[node]) %}\n        {% endif %}\n    {% endfor %}\n    {{ log('These models are considered based on select and exlude:')}}\n    {{ log(filtered_nodes|map(attribute='name')|list) }}\n    {{ return(filtered_nodes) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.telia_analytics_no.starts_with_list"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.624779,
            "supported_languages": null
        },
        "macro.telia_analytics_no.gdpr_cols_comp_view": {
            "name": "gdpr_cols_comp_view",
            "resource_type": "macro",
            "package_name": "telia_analytics_no",
            "path": "macros/create_compatibility_view.sql",
            "original_file_path": "macros/create_compatibility_view.sql",
            "unique_id": "macro.telia_analytics_no.gdpr_cols_comp_view",
            "macro_sql": "{% macro gdpr_cols_comp_view(relation, query_columns, column_dict) -%}\n  {% if relation.is_dynamic_table -%}\n    {% set relation_type = \"table\" -%}\n  {% else -%}\n    {% set relation_type = relation.type -%}\n  {% endif -%}\n  {% for column_name in query_columns if (\n    column_dict.get(column_name|lower, {}).get('meta', {}).get('gdpr_tags', {}).get('DATA_OBJECT')\n    or\n    column_dict.get(column_name|upper, {}).get('meta', {}).get('gdpr_tags', {}).get('DATA_OBJECT')\n    ) -%}\n    {{- \"\" if not loop.first else \"alter \" ~ relation_type ~ \" \" ~ relation.render() ~\" modify( \" }}\n    {% if column_name|upper in column_dict and column_dict.get(column_name|upper, {}).get('meta', {}).get('gdpr_tags', {}).get('DATA_OBJECT') -%}\n      {% set matched_column = column_name|upper -%}\n    {% elif column_name|lower in column_dict and column_dict.get(column_name|lower, {}).get('meta', {}).get('gdpr_tags', {}).get('DATA_OBJECT') -%}\n      {% set matched_column = column_name|lower -%}\n    {% elif column_name in column_dict and column_dict.get(column_name, {}).get('meta', {}).get('gdpr_tags', {}).get('DATA_OBJECT') -%}\n      {% set matched_column = column_name -%}\n    {% else -%}\n      {% set matched_column = None -%}\n    {%- endif -%}\n    {% if matched_column -%}\n      {% set col_tag = column_dict[matched_column].get('meta').get('gdpr_tags').get('DATA_OBJECT') -%}\n      column \"{{matched_column|upper}}\" set tag GDPR.PUBLIC.DATA_OBJECT = '{{col_tag}}'\n      {{- \", \" if not loop.last else \")\" }}\n    {% else -%}\n      {% set col_tag = '-- NO TAG' %}\n\n    {%- endif -%}    \n  \n  {%- endfor -%}\n  \n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.6263318,
            "supported_languages": null
        },
        "macro.telia_analytics_no.create_compatibility_view": {
            "name": "create_compatibility_view",
            "resource_type": "macro",
            "package_name": "telia_analytics_no",
            "path": "macros/create_compatibility_view.sql",
            "original_file_path": "macros/create_compatibility_view.sql",
            "unique_id": "macro.telia_analytics_no.create_compatibility_view",
            "macro_sql": "{% macro create_compatibility_view(target, src_model) %}\n{# \n#}\n{% if execute %}\n  {#\n   -- Note: the input \"this\"  is a SnowflakeRelation object\n   -- https://docs.getdbt.com/reference/dbt-classes#relation \n  #}\n  {% set logprefix = '=[create_compatibility_views]=['~ src_model.identifier ~']= ' %}    \n  {{ log(logprefix ~ 'macro start', info=True) }}  \n\n  {% set config_exists =  telia_analytics_no.table_exists('DBT_CONFIG', 'UTIL')  %}\n\n  {% if config_exists %}\n    {% call statement('model_exists', fetch_result=True) %}\n        select 1 as model_exists from util.dbt_config\n        where model_name = '{{ this.identifier }}'\n    {% endcall %}\n    {% set model_exists = load_result('model_exists')['data']|length > 0 %}\n\n    {% if model_exists %}\n      {% set sql = 'select * from ' ~ src_model %}\n      {% call statement('create_view', fetch_result=False) %}\n          create or replace view {{src_model.schema}}.{{ target }}\n          as {{ sql }}\n      {% endcall %}\n      {%- set target_relation = api.Relation.create(\n      identifier=target,\n      schema=this.schema,\n      database=this.database,\n      type='view'\n      ) -%}\n      {% do persist_docs(target_relation, model) %}\n      {% set query_columns = get_columns_in_query(sql) %}\n      {% set column_dict = model.get('columns', {}) %}\n      {{ telia_analytics_no.gdpr_cols_comp_view(target_relation, query_columns, column_dict) }}\n\n      {{ log(logprefix ~ ' .. ' + src_model.schema + '.' + target + ' created', info=True) }}\n    {% else %}\n       {{ log(logprefix ~ ' ..' + src_model.identifier + ' is not defined in config', info=True) }}\n    {% endif %}\n\n  {% else %}\n     {{ log(logprefix ~ ' .. DBT config table does not exists so no compatibility view will be created!!!', info=True) }}\n  {% endif %}\n  {{ log(logprefix~'macro done', info=True) }}\n{% endif %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.telia_analytics_no.table_exists",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs",
                    "macro.dbt.get_columns_in_query",
                    "macro.telia_analytics_no.gdpr_cols_comp_view"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.62736,
            "supported_languages": null
        },
        "macro.telia_analytics_no.dynamic_table_set_warehouse": {
            "name": "dynamic_table_set_warehouse",
            "resource_type": "macro",
            "package_name": "telia_analytics_no",
            "path": "macros/dynamic_table_set_warehouse.sql",
            "original_file_path": "macros/dynamic_table_set_warehouse.sql",
            "unique_id": "macro.telia_analytics_no.dynamic_table_set_warehouse",
            "macro_sql": "{% macro dynamic_table_set_warehouse() %}\n    {% set logprefix = '=[dynamic_table_set_warehouse]= ' %}    \n    {{ log(logprefix ~ 'macro start', info=True) }}\n    {% if target.role == 'NGA_DBT_DEV_ROLE' %}\n        {% set warehouse = 'NGA_DBT_DEV_XS_WH' %}\n    {% elif target.role == 'NGA_DBT_QA_ROLE' %}\n        {% set warehouse = 'NGA_DBT_QA_XS_WH' %}\n    {% else %}\n        {% set warehouse = 'NGA_DBT_PROD_XS_WH' %}\n    {% endif %}\n    {{ log(logprefix ~ 'warehouse name for dynamic table: ' ~ warehouse, info=True) }}\n    {{ return(warehouse) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.627847,
            "supported_languages": null
        },
        "macro.telia_analytics_no.materialization_ccdf_build_and_compress_default": {
            "name": "materialization_ccdf_build_and_compress_default",
            "resource_type": "macro",
            "package_name": "telia_analytics_no",
            "path": "macros/ccdf_build_and_compress.sql",
            "original_file_path": "macros/ccdf_build_and_compress.sql",
            "unique_id": "macro.telia_analytics_no.materialization_ccdf_build_and_compress_default",
            "macro_sql": "{% materialization ccdf_build_and_compress, default %}\n  {{ log('Starting custom materialization ccdf build and compress', info=True) }}\n  {% set original_query_tag = set_query_tag() %}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n\n  {% set keepvars = config.get('keep_vars') %}\n  {% set vf = config.get('vf', 'VALID_FROM') %}\n  {% set vt = config.get('vt', 'VALID_TO') %}\n\n  {% set grant_config = config.get('grants') %}\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n  {% call statement('compress') -%}\n    call util.ccdf_compress_history('{{ intermediate_relation.schema.upper() }}.{{ intermediate_relation.identifier.upper() }}', \n    '{{ this.schema.upper() }}.{{ this.identifier.upper() }}', '{{ keepvars.upper() }}', '{{ vf.upper() }}', '{{ vt.upper() }}');\n  {%- endcall %}\n  -- cleanup\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {% do unset_query_tag(original_query_tag) %}\n  {{ return({'relations': [intermediate_relation, target_relation]}) }}\n{% endmaterialization %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.get_create_table_as_sql",
                    "macro.dbt.create_indexes",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs",
                    "macro.dbt_snowflake.unset_query_tag"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.6292899,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.telia_analytics_no.materialization_ccdf_compress_default": {
            "name": "materialization_ccdf_compress_default",
            "resource_type": "macro",
            "package_name": "telia_analytics_no",
            "path": "macros/ccdf_compress.sql",
            "original_file_path": "macros/ccdf_compress.sql",
            "unique_id": "macro.telia_analytics_no.materialization_ccdf_compress_default",
            "macro_sql": "{% materialization ccdf_compress, default %}\n  {{ log('Starting custom materialization ccdf_compress', info=True) }}\n  {% set original_query_tag = set_query_tag() %}\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {% set keepvars = config.get('keep_vars') %}\n  {% set src = sql.strip().split('.') %}\n  {%- set src_relation = adapter.get_relation(\n      database=src[0],\n      schema=src[1],\n      identifier=src[2]) -%}\n  {% set vf = config.get('vf', 'VALID_FROM') %}\n  {% set vt = config.get('vt', 'VALID_TO') %}\n  \n  {%- set source_relation = this.incorporate(type='table') %}\n  -- drop the temp relations if they exist already in the database\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n\n    --sql\n  {% call statement('main') -%} --has to be called always, main needs to exist\n    call util.ccdf_compress_history('{{ src_relation.schema.upper() }}.{{ src_relation.identifier.upper() }}', \n    '{{ this.schema.upper() }}.{{ this.identifier.upper() }}', '{{ keepvars.upper() }}', '{{ vf.upper() }}', '{{ vt.upper() }}');\n  {%- endcall %}\n\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {% do unset_query_tag(original_query_tag) %}\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.create_indexes",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs",
                    "macro.dbt_snowflake.unset_query_tag"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.6307142,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.telia_analytics_no.table_exists": {
            "name": "table_exists",
            "resource_type": "macro",
            "package_name": "telia_analytics_no",
            "path": "macros/snowflake_utils.sql",
            "original_file_path": "macros/snowflake_utils.sql",
            "unique_id": "macro.telia_analytics_no.table_exists",
            "macro_sql": "{% macro table_exists(table_name, schema_name) %}\n    {% set logprefix = '=[table_exists]= ' %}    \n    {{ log(logprefix ~ 'macro start') }}\n    {% call statement('check', fetch_result=True) %}\n        select 1 from information_schema.tables\n        where table_name = upper('{{ table_name }}') and table_schema = upper('{{ schema_name }}')\n    {% endcall %}\n    {% set tbl_exists = load_result('check')['data']|length > 0 %}\n    {{ log(logprefix ~ 'macro end, result: ' ~ tbl_exists) }}\n    {{ return(tbl_exists) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.631225,
            "supported_languages": null
        },
        "macro.telia_analytics_no.delete_from_table": {
            "name": "delete_from_table",
            "resource_type": "macro",
            "package_name": "telia_analytics_no",
            "path": "macros/snowflake_utils.sql",
            "original_file_path": "macros/snowflake_utils.sql",
            "unique_id": "macro.telia_analytics_no.delete_from_table",
            "macro_sql": "{% macro delete_from_table(where_condition) %}\n    {% set tbl_exists = telia_analytics_no.table_exists(this.name, this.schema) %}\n    {% if tbl_exists %}\n        {{ log('Executing: delete from ' ~ this ~ ' ' ~ where_condition , info=True)}}\n        {% call statement('delete', fetch_result=False) %}\n            delete from {{ this }} {{ where_condition }}\n        {% endcall %}\n    {% else %}\n        {{ log('Table ' ~ this.name ~ ' does not exist, skipping delete', info=True) }}\n    {% endif %}    \n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.telia_analytics_no.table_exists",
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.631582,
            "supported_languages": null
        },
        "macro.telia_analytics_no.materialization_scd_default": {
            "name": "materialization_scd_default",
            "resource_type": "macro",
            "package_name": "telia_analytics_no",
            "path": "macros/scd.sql",
            "original_file_path": "macros/scd.sql",
            "unique_id": "macro.telia_analytics_no.materialization_scd_default",
            "macro_sql": "{% materialization scd, default %}\n  {% set original_query_tag = set_query_tag() %}\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {{ log('Fetching variables', info=True) }}\n  {% set key_col = config.get('key_column') %}\n  {% set col_list = config.get('column_list') %}\n  {% set opt = config.get('opt') %}\n\n  {% set grant_config = config.get('grants') %}\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n  {{ log('Running first SQL \\n' + sql, info=True) }}\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n  {{ log('Running compress SQL with \\n' + key_col + '\\n'+ col_list+ '\\n'+ opt, info=True) }}\n  {% call statement('scd') -%}\n    call util.create_scd('{{ intermediate_relation.schema.upper() }}.{{ intermediate_relation.identifier.upper() }}', \n    '{{ this.schema.upper() }}.{{ this.identifier.upper() }}', '{{ key_col.upper() }}', '{{ col_list.upper() }}', '{{ opt.upper() }}');\n  {%- endcall %}\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {% do unset_query_tag(original_query_tag) %}\n  {{ return({'relations': [intermediate_relation, target_relation]}) }}\n{% endmaterialization %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.make_backup_relation",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.get_create_view_as_sql",
                    "macro.dbt.create_indexes",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs",
                    "macro.dbt_snowflake.unset_query_tag"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.63345,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.telia_analytics_no.test_gdpr_tags": {
            "name": "test_gdpr_tags",
            "resource_type": "macro",
            "package_name": "telia_analytics_no",
            "path": "macros/gdpr_tags.sql",
            "original_file_path": "macros/gdpr_tags.sql",
            "unique_id": "macro.telia_analytics_no.test_gdpr_tags",
            "macro_sql": "{% test gdpr_tags (model)%}\n    {{ config(severity=\"error\") }}\n\n    with \n    cols as (\n        select \n            upper(table_name) as table_name,\n            upper(column_name) as column_name \n        from {{ target.database }}.information_schema.columns\n        \n        where table_name = '{{ model.name|upper }}'\n    ),\n    col_tags as (\n        select\n            upper(object_name) as table_name,\n            upper(column_name) as column_name,\n            tag_value\n        from table(\n            {{ target.database }}.information_schema.tag_references_all_columns(\n                '{{ model|upper }}', \n                'table'\n            )\n        )\n        where tag_name = 'DATA_OBJECT'\n    ) \n    select \n        *\n    from cols \n    left join col_tags\n        on \n            cols.column_name = col_tags.column_name \n            and cols.table_name = col_tags.table_name\n    where col_tags.column_name is null\n\n{% endtest %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.634271,
            "supported_languages": null
        },
        "macro.telia_analytics_no.check_gdpr_tags": {
            "name": "check_gdpr_tags",
            "resource_type": "macro",
            "package_name": "telia_analytics_no",
            "path": "macros/gdpr_tags.sql",
            "original_file_path": "macros/gdpr_tags.sql",
            "unique_id": "macro.telia_analytics_no.check_gdpr_tags",
            "macro_sql": "{% macro check_gdpr_tags(results, fail=True) %}\n\n    {{ log(\"Checking GDPR tags\\n\", info=True) }}\n    \n    {% if execute %}\n        \n        {% set all_tables = [] %}\n        {% set tables = ({}) %}\n \n        {% for res in results %}\n            \n            {# Ignore everything expect actual models (could be extended to seeds or only marts/specific schemas, or just remove it) #}\n            {% if res.node.unique_id.startswith('model.') %}\n                {# {{ log(res.node.alias) }} #}\n\n                {% set table = ({}) %}\n                {% do all_tables.append(\"'\"+res.node.name.upper()+\"'\") %}\n                \n                {# {{ log(res.node.name.upper(), info=True) }} #}\n\n                {% set gdpr_tagged_column_count = namespace(value=0) %}\n\n                {# columns object is a dict {name:ColumnInfo} #}\n                {% for column_name, column in res.node.columns.items() %}\n                    {% if column.meta.get('gdpr_tags').get('DATA_OBJECT') is not none %}\n                        {% set gdpr_tagged_column_count.value = gdpr_tagged_column_count.value + 1 %}\n                    {% endif %}\n                {% endfor %}\n\n                {% set gdpr_count = ({'gdpr_tagged_column_count':gdpr_tagged_column_count.value})%}\n                {% do tables.update({ res.node.name.upper(): gdpr_count }) %}\n            \n            {% endif %}\n\n        {% endfor %}\n\n        {# {{ log(\"Checked tables, GDPR tagged column count: \" ~ tables|tojson, info=True)}} #}\n        {% if tables|length > 0 %}\n            {# Count of colums pr table #}\n            {% set query %}  \n\n                select \n                    table_name,\n                    count(*) as column_count\n                from {{ target.database }}.information_schema.columns\n                where table_name in ({{ all_tables|join(\",\") }})\n                group by 1\n            \n            {% endset %}\n\n            {# Run SQL against snowflake, returns agate table #}\n            {% set output = run_query(query) %}\n\n            {# Tables with one or more tags, but not all columns are tagged #}\n            {% set tables_missing_tags = [] %}\n\n            {# Tables with no tags #}\n            {% set tables_no_tags = [] %}\n            \n\n            {% for row in output.rows %}\n\n                {% set gdpr_count = tables.get(row[\"TABLE_NAME\"], {}).get(\"gdpr_tagged_column_count\") %}\n                \n                {% if gdpr_count is not none %}\n                    \n                    {# if table has fewer tagged than total columns, fail or warn #}\n                    {% if  row[\"COLUMN_COUNT\"] > gdpr_count > 0  %}\n                        \n                        {% set msg = row[\"TABLE_NAME\"] ~ \" is missing \" ~ (row[\"COLUMN_COUNT\"] - gdpr_count)|string ~ \" GDPR tags\" %}\n                        {# {{ log(\"WARNING: \" ~ msg, info=True) }} #}\n                        {% do tables_missing_tags.append(msg)%}\n                    \n                    {# table has no gdpr tagged columns, warn #}\n                    {% elif gdpr_count == 0 %}\n                        \n                        {# {% set msg = row[\"TABLE_NAME\"] ~ \" has no GDPR tags\" %} #}\n                        {{ log(msg, info=True) }}\n                        {% do tables_no_tags.append(msg) %}\n                    \n                    {% endif %}\n                \n                {% endif %}\n            {% endfor %}\n            \n            {# Warn untagged tables #}\n            {% if tables_no_tags|length > 0 %}\n                {{ exceptions.warn(\"WARNING: tables with no GDPR tags:\\n\\t - \" ~ tables_no_tags|join(\"\\n\\t- \") ~ \"\\n\" ) }}\n            {% endif %}\n\n\n            {% if tables_missing_tags|length > 0 %}\n                {# Fail in missing tags #}\n                {% if fail==True %}\n                    {{ exceptions.raise_compiler_error(\"ERROR: tables missing some GDPR tags:\\n\\t - \" ~ tables_missing_tags|join(\"\\n\\t - \") ) }}\n                {# Or warn if specified #}\n                {% else %}\n                    {{ exceptions.warn(\"WARNING: tables missing some GDPR tags:\\n\\t - \" ~ tables_missing_tags|join(\"\\n\\t - \" )) }}\n                {% endif %}\n\n            {% endif %}\n\n        {% endif %}\n    {% endif %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.636101,
            "supported_languages": null
        },
        "macro.telia_analytics_no.set_results_and_insert": {
            "name": "set_results_and_insert",
            "resource_type": "macro",
            "package_name": "telia_analytics_no",
            "path": "macros/parse_results.sql",
            "original_file_path": "macros/parse_results.sql",
            "unique_id": "macro.telia_analytics_no.set_results_and_insert",
            "macro_sql": "{% macro set_results_and_insert(result_dict, ref)%}\n    {% set result = {\n                \"status\": result_dict.get(\"status\"),\n                \"model\": result_dict.get(\"node\", {}).get(\"name\"),\n                \"database\": result_dict.get(\"node\", {}).get(\"database\"),\n                \"schema\": result_dict.get(\"node\", {}).get(\"schema\"),\n                \"node_resource_type\": result_dict.get(\"node\", {}).get(\"resource_type\"),\n                \"failures\": result_dict.get(\"failures\") if result_dict.get(\"failures\") is not none else 0,\n                \"refs\": ref.get(\"name\"),\n                \"project\": result_dict.get(\"node\",{}).get(\"package_name\"),\n                \"compiled_code\": result_dict.get(\"node\", {}).get(\"compiled_code\")| replace(\"'\", '\"'),\n                \"raw_compiled_code\": result_dict.get(\"node\", {}).get(\"compiled_code\"),\n                \"execution_ts\": (result_dict.get(\"timing\", []) | selectattr(\"name\", \"equalto\", \"execute\") | list | first | default({}, true)).get(\"started_at\", \"\") | string\n\n            } %}\n    {% if result| length > 0 %}\n        {% set target_schema = 'TESTS_RESULTS' %}\n        {% set target_table = 'DBT_RUN_RESULTS' %}\n        \n        {% set create_table_query %}\n            CREATE TABLE IF NOT EXISTS {{ target_schema }}.{{ target_table }} (\n                status STRING,\n                node STRING,\n                database STRING,\n                schema STRING,\n                node_resource_type STRING,\n                failures INT,\n                refs string,\n                project string,\n                compiled_code STRING,\n                test_results VARIANT,\n                execution_ts STRING,\n                run_ts TIMESTAMP\n            )\n        {% endset %}\n        {% do run_query(create_table_query) %}\n        \n        {% set failed_data = [] %}\n        {% if result.get(\"status\") in [\"fail\", \"warn\"] and result.get(\"node_resource_type\") == \"test\" %}\n                \n                {% set failed_query = \"Select * from ( \" + result.get(\"raw_compiled_code\", \"\") ~ \" ) LIMIT 5\" %}\n                {% set failed_result = run_query(failed_query) %}\n                {% if failed_result and failed_result.columns %}\n                    {% set failed_data = [] %}\n                    {% for row in failed_result.rows %}\n                        {% set row_dict = {} %}\n                        {% for col in failed_result.columns %}\n                            {% do row_dict.update({col.name: row[col.name] | string}) %}\n                        {% endfor %}\n                        {% do failed_data.append(row_dict) %}\n                    {% endfor %}\n                {% endif %}\n\n        {% endif %}\n        {% set insert_query %}\n            INSERT INTO {{ target_schema }}.{{ target_table }} \n            SELECT\n                    '{{ result.get(\"status\")}}',\n                    '{{ result.get(\"model\") }}',\n                    '{{ result.get(\"database\") }}',\n                    '{{ result.get(\"schema\") }}',\n                    '{{ result.get(\"node_resource_type\") }}',\n                    {{ result.get(\"failures\") }},\n                    '{{ result.get(\"refs\") }}',\n                    '{{ result.get(\"project\") }}',\n                    '{{ result.get(\"compiled_code\") }}',\n                    {{failed_data}},\n                    '{{ result.get(\"execution_ts\") }}',\n                    CURRENT_TIMESTAMP(),\n                \n        {% endset %}\n        {% do run_query(insert_query) %}\n            \n    {% endif %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.638425,
            "supported_languages": null
        },
        "macro.telia_analytics_no.parse_run_results": {
            "name": "parse_run_results",
            "resource_type": "macro",
            "package_name": "telia_analytics_no",
            "path": "macros/parse_results.sql",
            "original_file_path": "macros/parse_results.sql",
            "unique_id": "macro.telia_analytics_no.parse_run_results",
            "macro_sql": "{% macro parse_run_results(results) %}\n    {% set logprefix = '=[store_results]= ' %} \n    {{ log(logprefix ~ '  ..started ', info=True) }}\n    {% for result in results %}\n        {% set result_dict = result.to_dict() %}\n        {% if result_dict.get(\"node\", {}).get(\"resource_type\") == \"test\" %}\n            {% for ref in result_dict.get(\"node\", {}).get(\"refs\") %}\n                {% do telia_analytics_no.set_results_and_insert(result_dict, ref) %}\n            {% endfor %}\n        {% else %}\n            {% do telia_analytics_no.set_results_and_insert(result_dict, {}) %}\n        {% endif %}\n    {% endfor %}\n    {{ log(logprefix ~ '  done ', info=True) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.telia_analytics_no.set_results_and_insert"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.638943,
            "supported_languages": null
        },
        "macro.telia_analytics_no.set_warehouse_size": {
            "name": "set_warehouse_size",
            "resource_type": "macro",
            "package_name": "telia_analytics_no",
            "path": "macros/set_warehouse_size.sql",
            "original_file_path": "macros/set_warehouse_size.sql",
            "unique_id": "macro.telia_analytics_no.set_warehouse_size",
            "macro_sql": "{% macro set_warehouse_size(model) %}\n{# \n-- This macro should be called from a dbt_project.yml as pre-hook or from the mode file.\n-- Example of calling it from dbt_project.yml:\n--    models:\n--      analytics:\n--        +materialized: 'table'\n--        pre-hook:\n--          - \"{{ telia_analytics_no.set_warehouse_size(this) }}\"\n-- Example of calling it from a model:\n--   {{ telia_analytics_no.set_warehouse_size(this) }}\n-- \n-- Macro reads the configuration table and sets the warehouse size for the model\n-- If it does not find the table in the configuration table, then the default warehouse is used\n#}\n{% if execute %}\n  {#\n   -- Note: the input \"this\"  is a SnowflakeRelation object\n   -- https://docs.getdbt.com/reference/dbt-classes#relation \n  #}\n  {% call statement('check_metadata_schema', fetch_result=True) %}\n    select schema_name from information_schema.schemata\n    where schema_name = 'META_DATA' and catalog_name = current_database()\n  {% endcall %}\n  {{ log('set warehouse size - optimization override from config table', info=True) }}\n\n  {% set meta_data_exists = load_result('check_metadata_schema')['data'] %}\n\n  {% if meta_data_exists|length == 0 %}\n    {{ log('META_DATA schema does not exists, skipping optimization override', info=True) }}\n    {{ return('') }}\n  {% endif %}\n\n  \n  {% call statement('check_table', fetch_result=True) %}\n    select table_name from information_schema.tables\n    where table_name = 'WH_SCALING_META_DATA__META_DATA_WH_TO_USE' and table_schema = 'META_DATA'\n  {% endcall %}\n\n  {% set wh_scaling = load_result('check_table')['data'] %}\n\n  {% call statement('check_override_table', fetch_result=True) %}\n    select table_name from information_schema.tables\n    where table_name = 'WH_SCALING__META_DATA_MANUAL_WH_OVERRIDE' and table_schema = 'META_DATA'\n  {% endcall %}\n\n  {% set override_table = load_result('check_override_table')['data'] %}\n\n  {% if override_table|length == 0 %}\n    {{ log('Table to manually override WH size is missing. Creating new one.', info=True) }}\n    {% call statement('create_wh_override_table', fetch_result=False) %}\n    create table if not exists meta_data.WH_SCALING__META_DATA_MANUAL_WH_OVERRIDE\n    (\n        pday varchar(12),\n        table_created varchar(200),\n        wh_size int        \n    )\n    {% endcall %}\n  {% endif %}\n\n  {% if wh_scaling|length > 0 %}\n    {{ log('Config table exists, looking for appropriate warehouse', info=True) }}\n      {% call statement('fetchedwh', fetch_result=True) %}\n        --TODO: update this to the actual WH config table\n        set system = 'DBT';\n        set env = case when current_database()='NGA_PROD_DB' then 'PROD' \n          when current_database()='NGA_DB_QA' then 'QA'\n          else 'DEV' end;\n\n        with wh_hier as (\n          select\n              'X-Small' wh_name,\n              1 wh_size,\n              'NGA_' || $system || '_' || $env || '_XS_WH' as actual_name\n          union all\n          select\n              'Small',\n              2,\n              'NGA_' || $system || '_' || $env || '_S_WH' as actual_name\n          union all\n          select\n              'Medium',\n              3,\n              'NGA_' || $system || '_' || $env || '_M_WH' as actual_name\n          union all\n          select\n              'Large',\n              4,\n              'NGA_' || $system || '_' || $env || '_L_WH' as actual_name\n          union all\n          select\n              'X-Large',\n              5,\n              'NGA_' || $system || '_' || $env || '_XL_WH' as actual_name\n          union all\n          select\n              '2X-Large',\n              6,\n              'NGA_' || $system || '_' || $env || '_2XL_WH' as actual_name\n          union all\n          select\n              '3X-Large',\n              7,\n              'NGA_' || $system || '_' || $env || '_3XL_WH' as actual_name\n          union all\n          select\n              '4X-Large',\n              8,\n              'NGA_' || $system || '_' || $env || '_4XL_WH' as actual_name\n          union all\n          select\n              '5X-Large',\n              9,\n              'NGA_' || $system || '_' || $env || '_5XL_WH' as actual_name\n          union all\n          select\n              '6X-Large',\n              10,\n              'NGA_' || $system || '_' || $env || '_6XL_WH' as actual_name\n      ),\n      override as (\n          select distinct\n              a.table_created,\n              a.wh_size new_wh_size,\n              b.actual_name as new_wh_name,\n              1 as priority\n          from\n              meta_data.WH_SCALING__META_DATA_MANUAL_WH_OVERRIDE a\n              left join wh_hier b on a.wh_size = b.wh_size\n          where\n              pday >= CURRENT_DATE\n              and table_created = current_database() || '.{{ model.schema.upper() }}.' || '{{ model.table.upper() }}'\n      ),\n      computed as (\n          select\n              a.*,\n              2 as priority\n          from\n              meta_data.wh_scaling_meta_data__meta_data_wh_to_use a\n          where\n              table_created = current_database() || '.{{ model.schema.upper() }}.' || '{{ model.table.upper() }}'\n      ),\n      default as (\n          select\n              null as table_created,\n              1 as new_wh_size,\n              'NGA_' || $system || '_' || $env || '_XS_WH' as new_wh_name,\n              3 priority\n      )\n      select\n          new_wh_name\n      from\n          (\n              select * from override\n              union all\n              select * from computed\n              union all\n              select * from default\n          ) \n      qualify row_number() over (order by priority) = 1\n      \n      {% endcall %}\n\n      {% set warehouses = load_result('fetchedwh')['data'] %}\n      {% for wh in warehouses %}\n        {% set warehouse = wh[0] %}\n        {{ log('Setting non-default warehouse to ' + warehouse + ' on table ' + model.table, info=True) }}\n        {% call statement('setwh', fetch_result=False) %}\n          use warehouse  {{ warehouse }}\n        {% endcall %}  \n        \n      {% endfor %}\n      {{ return('') }}\n      \n    {% else %}\n      {{ log('Config table does not exists, using default WH',info=True) }}\n      {{ return('') }}\n    {% endif %}\n  {% endif %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.640789,
            "supported_languages": null
        },
        "macro.telia_analytics_no.apply_meta_util_tags": {
            "name": "apply_meta_util_tags",
            "resource_type": "macro",
            "package_name": "telia_analytics_no",
            "path": "macros/apply_meta_util_tags.sql",
            "original_file_path": "macros/apply_meta_util_tags.sql",
            "unique_id": "macro.telia_analytics_no.apply_meta_util_tags",
            "macro_sql": "{% macro apply_meta_util_tags(results) %}\n  {% if execute %}\n    {% set logprefix = '=[apply_meta_util_tags]= ' %}    \n    {{ log(logprefix ~ 'macro start', info=True) }}\n\n    {# \n    -- The tags_by_schema object will act as a local cache of Snowflake tags.\n    -- This means we only need to call \"show tags in <schema>\" once per schema we process.\n    #}\n    {%- set tags_by_schema = {} -%}   \n    {% set config_exists = telia_analytics_no.table_exists('DBT_CONFIG', 'UTIL') %}\n    {% for res in results -%}\n        {% if res.node.resource_type == 'test' %}\n            {{ log(logprefix ~ ' .. skipping test: ' ~ res.node.name, info=True) }}\n        {% else %}\n            {%- set model_database = res.node.database -%}\n            {%- set model_schema = res.node.schema -%}\n            {%- set model_schema_full = model_database+'.'+model_schema -%}\n            {%- set model_alias = res.node.alias -%}\n            {%- set model_materialization = res.node.config.materialized -%}\n            {%- set model_incr_strategy = res.node.config.incremental_strategy -%}\n            {% if model_materialization=='incremental' and not model_incr_strategy%}\n                {%- set model_incr_strategy = 'append' -%}\n            {% endif %}\n\n            {%- call statement('set_database_schema', fetch_result=True) -%}\n                USE {{model_database}}.{{model_schema}}\n            {%- endcall -%}\n\n            {{ log(logprefix ~ ' ..working on model: ' ~ res.node.alias, info=True)}}          \n\n            {{ log(\" .. processing tags for \"+model_schema_full+\".\"+model_alias+\" ..\") }}\n\n            {%- set model_default_tags = \n                {\n                    model_database + '.UTIL.MATERIALIZATION': model_materialization,\n                    model_database + '.UTIL.PRODUCER': 'dbt'\n                }\n            -%}\n            {% do model_default_tags.update({model_database + '.UTIL.INCREMENTAL_STRATEGY': model_incr_strategy}) if model_incr_strategy %}\n            \n            {% if model_database + '.UTIL' not in tags_by_schema.keys() %}\n                {{ log(' ..need to fetch tags for schema UTIL') }}\n                {%- call statement('main', fetch_result=True) -%}\n                    show tags in {{model_database}}.UTIL\n                {%- endcall -%}\n                {%- do tags_by_schema.update({model_database + '.UTIL': load_result('main')['table'].columns.get('name').values()|list}) -%}\n                {{ log(' ..added tags to cache: ' ~ tags_by_schema) }}\n                \n            {% else %}\n                {{ log(' ..already have tag info for schema') }}\n            {% endif %}\n            \n            {% if res.node.meta %}\n                {%- set model_meta = res.node.meta -%}\n            {% else %}\n                {%- set model_meta = res.node.config.meta -%}\n            {% endif%}\n            {% set line -%}\n                node: {{ res.node.unique_id }};\n                model level util tags: {{ model_meta.util_tags}}\n                model default tags: {{ model_default_tags }}\n                materialized: {{ res.node.config.materialized }}\n                database: {{ model_database }}\n                schema: {{ model_schema }}                \n                status: {{ res.status }} \n                message: {{ res.message }}\n                rtype: {{ res.node.resource_type }}\n            {%- endset %}\n            {{ log(line) }}\n            {# \n            -- We need to check if the relation exists, if not we skip the model, because there is nothing to tag\n            -- and the root cause can be that simply the build failed.\n            #}\n            {% set relation = adapter.get_relation(\n                    database = model_database,\n                    schema = model_schema,\n                    identifier = model_alias\n                ) %}\n            {% if relation %}\n                {#\n                -- Uses the tag_references_all_columns table function to fetch existing tags for the table (or view)\n                #}\n                {%- call statement('main', fetch_result=True) -%}\n                    {%- set query -%}\n                        select distinct LEVEL,OBJECT_NAME,null COLUMN_NAME,UPPER(TAG_DATABASE)||'.'|| UPPER(TAG_SCHEMA) ||'.'||UPPER(TAG_NAME) as TAG_NAME, TAG_VALUE from table(information_schema.tag_references_all_columns('{{model_alias}}', 'table')) where level = 'TABLE'\n                        union\n                        select LEVEL,OBJECT_NAME, COLUMN_NAME,UPPER(TAG_DATABASE)||'.'|| UPPER(TAG_SCHEMA) ||'.'||UPPER(TAG_NAME) as TAG_NAME, TAG_VALUE from table(information_schema.tag_references_all_columns('{{model_alias}}', 'table')) where level = 'COLUMN'\n                    {%- endset -%}\n\n                    {{ query.split('\\n') | map('trim') | join('\\n') }}\n                {%- endcall -%}\n                {%- set existing_tags = load_result('main')['data'] -%}\n                \n                {%- set existing_tags_for_table = {} -%}\n                {% for item in existing_tags|selectattr('0','equalto','TABLE') %}\n                    {% do existing_tags_for_table.update({item[3]:item[4]}) %}\n                {% endfor %}\n\n                {%- set desired_tags = model_default_tags -%}\n                {% for table_tag, tag_value in model_meta.get('util_tags', {}).items() %}\n                    -- We check if table_tag is present in tags_by_schema['UTIL']\n                    -- if yes, we set the tag value, if not we skip and log it\n                    {% if table_tag not in tags_by_schema[model_database + '.UTIL'] %}\n                        {{ log(' ..tag '+table_tag+' not found in UTIL schema, skipping', info=True) }}                    \n                    {% else %}\n                        {% do desired_tags.update({model_database + '.UTIL.' + table_tag: tag_value}) %}\n                    {% endif %}\n                {% endfor %}\n                {{ telia_analytics_no.set_table_tags(relation,desired_tags,existing_tags_for_table,logprefix) }}\n\n                {%- set existing_column_tags = {} -%}\n                {% for item in existing_tags|selectattr('0','equalto','COLUMN') %}\n                    {% if item[2] in existing_column_tags %}\n                        {% do existing_column_tags[item[2]].update({item[3]:item[4]}) %}\n                    {% else %}\n                        {% do existing_column_tags.update({item[2]:{item[3]:item[4]}}) %}\n                    {% endif %}\n                {% endfor %}\n\n                {%- set desired_column_tags = {} -%}\n                {% for column in res.node.columns %}\n                    {{ log(' Column [' ~ column|upper ~ '] has util_tags: -> ' ~ res.node.columns[column].meta.util_tags) }} \n                                    \n                    {% for column_tag, value in res.node.columns[column].meta.get('util_tags', {}).items() %}\n                        {% if column_tag not in tags_by_schema[model_database + '.UTIL'] %}\n                            {{ log(' ..tag '+column_tag+' not found in UTIL schema, skipping', info=True) }}                    \n                        {% else %}\n                            {% set col_tag_full = model_database + '.UTIL.' + column_tag %}\n                            {% if column|upper in desired_column_tags %}\n                                {% do desired_column_tags[column|upper].update({col_tag_full: value}) %}\n                            {% else %}\n                                {% do desired_column_tags.update({column|upper:{col_tag_full: value}}) %}\n                            {% endif %}\n                        {% endif %}\n                    {% endfor %}\n                    {% if res.node.columns[column].meta.gdpr_tags %}\n                        {{ log(' Column [' ~ column|upper ~ '] has gdpr_tags: -> ' ~ res.node.columns[column].meta.gdpr_tags) }}\n                        {% if res.node.columns[column].meta.gdpr_tags.DATA_OBJECT %}\n                            {% set desired_tag_value = res.node.columns[column].meta.gdpr_tags.DATA_OBJECT %}\n                            {% if column|upper in desired_column_tags %}\n                                {% do desired_column_tags[column|upper].update({'GDPR.PUBLIC.DATA_OBJECT': desired_tag_value}) %}\n                            {% else %}\n                                {% do desired_column_tags.update({column|upper:{'GDPR.PUBLIC.DATA_OBJECT': desired_tag_value}}) %}\n                            {% endif %}                       \n                        {% endif %}\n                    {% endif %} \n                {% endfor %}\n                {{ telia_analytics_no.set_column_tags(relation, desired_column_tags, existing_column_tags, logprefix) }}\n                {{ log(logprefix ~ \"finished tagging for \" ~ model_alias, info=True) }}\n                {# \n                -- Create GDPR views for models in ANALYTICS, PARTY_ANALYTICS and DATA_SCIENCE schemas\n                #}\n                {{ telia_analytics_no.create_gdpr_views(res.node, config_exists) }}\n            {% else %}\n                {{ log(logprefix ~ ' .. relation not found, skipping model', info=True) }}\n            {% endif %}\n        {% endif %}\n\n\n    {% endfor %}\n    {{ log(logprefix~'macro done', info=True) }}\n\n    {% endif %}\n\n\n    -- Need to return something other than None, since DBT will try to execute it as SQL statement\n    {{ return('') }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.telia_analytics_no.table_exists",
                    "macro.dbt.statement",
                    "macro.telia_analytics_no.set_table_tags",
                    "macro.telia_analytics_no.set_column_tags",
                    "macro.telia_analytics_no.create_gdpr_views"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.646664,
            "supported_languages": null
        },
        "macro.telia_analytics_no.model_contains_util_tag_meta": {
            "name": "model_contains_util_tag_meta",
            "resource_type": "macro",
            "package_name": "telia_analytics_no",
            "path": "macros/apply_meta_util_tags.sql",
            "original_file_path": "macros/apply_meta_util_tags.sql",
            "unique_id": "macro.telia_analytics_no.model_contains_util_tag_meta",
            "macro_sql": "{% macro model_contains_util_tag_meta(model_node) %}\n\t{% if model_node.meta.util_tags %}\n        {{ return(True) }}\n\t{% endif %}\n    {# \n    -- For compatibility with the old results structure\n    #}\n    {% if model_node.config.meta.util_tags %}\n        {{ return(True) }}\n\t{% endif %}    \n    {% for column in model_node.columns %}\n        {{ log('? checking if column is tagged: ' ~ column) }}\n        {% if model_node.columns[column].meta.database_tags %}\n            {{ log('yes') }}\n            {{ return(True) }}\n    \t{% endif %}\n    {% endfor %}    \n    {{ return(False) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.6471,
            "supported_languages": null
        },
        "macro.telia_analytics_no.set_table_tags": {
            "name": "set_table_tags",
            "resource_type": "macro",
            "package_name": "telia_analytics_no",
            "path": "macros/apply_meta_util_tags.sql",
            "original_file_path": "macros/apply_meta_util_tags.sql",
            "unique_id": "macro.telia_analytics_no.set_table_tags",
            "macro_sql": "{% macro set_table_tags(relation, desired_tags, current_tags, logprefix) %}\n    {% if relation.is_dynamic_table -%}\n        {% set relation_type = \"table\" -%}\n    {% else -%}\n        {% set relation_type = relation.type -%}\n    {% endif -%}\n    {{ log(logprefix ~ 'Desired tags: ' ~ desired_tags, info=True) }}\n    {{ log(logprefix ~ 'Current tags: ' ~ current_tags, info=True) }}\n    {% set sql_tag_apply %}\n        {% for tag, value in desired_tags.items() if tag not in current_tags or current_tags.get(tag) != value %}\n            {{- \"\" if not loop.first else \"alter \" ~ relation_type ~ \" \" ~ relation.render() ~\" set tag \" -}}\n            {{- tag ~ \" = '\" ~ value ~ \"'\" -}}\n            {{- \"\" if loop.last else \", \" -}}\n            {% if tag not in current_tags -%}\n                {{ log(logprefix ~ 'Applying tag ' ~ tag ~ ' with value ' ~ value, info=True) }}\n            {% else -%}\n                {{ log(logprefix ~ 'Changing tag (' ~ tag ~ ') value to ' ~ value, info=True) }}\n            {% endif -%}\n        {% endfor %}\n    {% endset %}\n\n    {% do run_query(sql_tag_apply) if sql_tag_apply|trim|length>0%}\n\n    {% set sql_unset_tag %}\n        {% for tag in current_tags if tag not in desired_tags %}\n            {{- \"\" if not loop.first else \"alter \" ~ relation_type ~ \" \" ~ relation.render() ~\" unset tag \" -}}\n            {{- tag -}}\n            {{- \"\" if loop.last else \", \" -}}\n            {{ log(logprefix ~ 'Unsetting tag ' ~ tag, info=True) }}\n        {% endfor %}\n    {% endset %}\n    {% do run_query(sql_unset_tag) if sql_unset_tag|trim|length>0%}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.648191,
            "supported_languages": null
        },
        "macro.telia_analytics_no.set_column_tags": {
            "name": "set_column_tags",
            "resource_type": "macro",
            "package_name": "telia_analytics_no",
            "path": "macros/apply_meta_util_tags.sql",
            "original_file_path": "macros/apply_meta_util_tags.sql",
            "unique_id": "macro.telia_analytics_no.set_column_tags",
            "macro_sql": "{% macro set_column_tags(relation, desired_tags, current_tags, logprefix) %}\n    {% if relation.is_dynamic_table -%}\n        {% set relation_type = \"table\" -%}\n    {% else -%}\n        {% set relation_type = relation.type -%}\n    {% endif -%}\n    {{ log(logprefix ~ 'Desired column tags: \\n' ~ desired_tags|pprint|indent(first=True), info=True) }}\n    {{ log(logprefix ~ 'Current column tags: \\n' ~ current_tags|pprint|indent(first=True), info=True) }}\n    {% set all_cols = (current_tags.keys() | list + desired_tags.keys() | list) | unique %}\n    {% set tag_changes = {'set': [], 'unset': []}%}\n    {% for column in all_cols %}\n        {% set desired_col_tags = desired_tags.get(column, {}) %}\n        {% set current_col_tags = current_tags.get(column, {}) %}\n\n        {% for tag, value in desired_col_tags.items() %}\n            {% if current_col_tags.get(tag) != value %}\n                {% do tag_changes['set'].append({'column': column, 'tag': tag, 'value': value}) %}\n            {% endif %}\n        {% endfor %}\n\n        {% for tag in current_col_tags.keys() %}\n            {% if tag not in desired_col_tags %}\n                {% do tag_changes['unset'].append({'column': column, 'tag': tag}) %}\n            {% endif %}\n        {% endfor %}\n    {% endfor %}\n    {{ log(logprefix ~ 'Processing these tag changes:\\n' ~ tag_changes|pprint|indent(first=True), info=True) }}\n    \n    {% set sql_tag_apply -%}\n        {%- for item in tag_changes['set'] -%}\n            {{- \"\" if not loop.first else \"alter \" ~ relation_type ~ \" \" ~ relation.render() ~\" modify \" -}}\n            {{- log(logprefix ~ 'Processing column ' ~ item['column'] ~ ' - Setting tag (' ~ item['tag'] ~ ') value to ' ~ item['value'], info=True) -}}\n            {{- '\\ncolumn \"' ~ item['column'] ~ '\" set tag ' ~ item['tag'] ~ \" = '\" ~ item['value'] ~ \"'\" -}}  \n            {{- \"\" if loop.last else \", \" -}}\n            {%- endfor %}\n    {%- endset %}\n    {% do run_query(sql_tag_apply) if sql_tag_apply|trim|length>0%}\n    {% set sql_unset_tag %}\n        {%- for item in tag_changes['unset'] -%}\n            {{- \"\" if not loop.first else \"alter \" ~ relation_type ~ \" \" ~ relation.render() ~\" modify \" -}}\n            {{- log(logprefix ~ 'Processing column ' ~ item['column'] ~ ' - Unsetting tag ' ~ item['tag'], info=True) -}}\n            {{- '\\ncolumn \"' ~ item['column'] ~ '\" unset tag ' ~ item['tag']  -}}  \n            {{- \"\" if loop.last else \", \" -}}\n\n            {%- endfor %}\n    {% endset %}\n    {% do run_query(sql_unset_tag) if sql_unset_tag|trim|length>0%}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.649974,
            "supported_languages": null
        },
        "macro.telia_analytics_no.generate_schema_name": {
            "name": "generate_schema_name",
            "resource_type": "macro",
            "package_name": "telia_analytics_no",
            "path": "macros/generate_schema_name.sql",
            "original_file_path": "macros/generate_schema_name.sql",
            "unique_id": "macro.telia_analytics_no.generate_schema_name",
            "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.650209,
            "supported_languages": null
        },
        "macro.telia_analytics_no.materialization_b2b_build_and_compress_default": {
            "name": "materialization_b2b_build_and_compress_default",
            "resource_type": "macro",
            "package_name": "telia_analytics_no",
            "path": "macros/b2b_build_and_compress.sql",
            "original_file_path": "macros/b2b_build_and_compress.sql",
            "unique_id": "macro.telia_analytics_no.materialization_b2b_build_and_compress_default",
            "macro_sql": "{% materialization b2b_build_and_compress, default %}\n  {{ log('Starting custom materialization b2b_build_and_compress', info=True) }}\n  {% set original_query_tag = set_query_tag() %}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n\n  {% set keepvars = config.get('keep_vars') %}\n  {% set vf = config.get('vf', 'VALID_FROM') %}\n  {% set vt = config.get('vt', 'VALID_TO') %}\n  {% set days_between = config.get('days_between', none) %}\n  {% if days_between %}\n    {% set proc_params = \"'\"+\"','\".join([keepvars.upper(), vf.upper(), vt.upper()]) + \"',\" + days_between|string %}\n  {% else %}\n    {% set proc_params = \"'\"+\"','\".join([keepvars.upper(), vf.upper(), vt.upper()]) + \"'\"%}\n  {% endif %}\n\n  {% set grant_config = config.get('grants') %}\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n  \n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n  {% call statement('compress') -%}\n    call util.b2b_compress_history('{{ intermediate_relation.schema.upper() }}.{{ intermediate_relation.identifier.upper() }}', \n    '{{ this.schema.upper() }}.{{ this.identifier.upper() }}', {{ proc_params }});\n  {%- endcall %}\n  -- cleanup\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {% do unset_query_tag(original_query_tag) %}\n  {{ return({'relations': [intermediate_relation, target_relation]}) }}\n{% endmaterialization %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_snowflake.set_query_tag",
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.get_create_table_as_sql",
                    "macro.dbt.create_indexes",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs",
                    "macro.dbt_snowflake.unset_query_tag"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.651988,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.telia_analytics_no.create_gdpr_views": {
            "name": "create_gdpr_views",
            "resource_type": "macro",
            "package_name": "telia_analytics_no",
            "path": "macros/gdpr_utils.sql",
            "original_file_path": "macros/gdpr_utils.sql",
            "unique_id": "macro.telia_analytics_no.create_gdpr_views",
            "macro_sql": "{% macro create_gdpr_views(node, config_exists) %}\n    {% set logprefix = '=[create_gdpr_views]= ' %}    \n    {{ log(logprefix ~ 'macro start', info=True) }}\n    {% if node.schema|upper in ['ANALYTICS', 'PARTY_ANALYTICS', 'DATA_SCIENCE', 'SEMANTIC_LAYER'] %}\n        {% if config_exists %}      \n            {% set ns = namespace(key_column='') %}      \n            {% for column in node.columns %}                \n                {% if column.upper() in ['SUBSCRIBER_KEY', 'CUSTOMER_KEY', 'PARTY_ID'] %}\n                    {% set ns.key_column = column.upper() %}\n                {% endif %}\n            {% endfor %}                      \n        \n            {% call statement('model_exists', fetch_result=True) %}\n                select 1 as model_exists from UTIL.DBT_CONFIG\n                where model_name = '{{ node.name }}'\n            {% endcall %}   \n            {% set model_exists = load_result('model_exists')['data']|length > 0 %}\n            {% if model_exists %}\n\n\n            {% set has_gdpr_tags = telia_analytics_no.check_gdpr_tags_in_meta(node.columns) %}\n            {% if not has_gdpr_tags %}\n                {{ log(logprefix ~ ' .. no GDPR tags found in schema yml, skipping GDPR view creation', info=True) }}\n                {{ return('') }}\n            {% endif %}\n                {%if node.schema|upper == 'SEMANTIC_LAYER' %}\n                    {% set sqlcmd = \"CALL GDPR_UTIL.CREATE_GDPR_VIEWS(CURRENT_DATABASE(), 'ANONYMIZED_SEMANTIC_LAYER', '\" + node.name|upper + \"', '\" + '' + \"', '\" + node.schema|upper + \"', 'dbt');\" %}\n                {% else %}\n                    {% set sqlcmd = \"CALL GDPR_UTIL.CREATE_GDPR_VIEWS(CURRENT_DATABASE(), 'PURPOSE_SPECIFIC', '\" + node.name|upper + \"', '\" + ns.key_column + \"', '\" + node.schema|upper + \"', 'dbt');\" %}\n                {% endif %}             \n                {{ log(logprefix ~ ' .. executing: ' ~ sqlcmd, info=True) }}\n                {% call statement('call_procedure', fetch_result=False) %}\n                    {{ sqlcmd }}\n                {% endcall %}\n                {{ log(logprefix ~ ' .. GDPR views for ' + node.schema|upper + '.' + node.name + ' created', info=True) }}\n            {% else %}\n                {{ log(logprefix ~ ' ..' + node.name + ' is not defined in config', info=True) }}\n                {{ log(logprefix ~ \" .. select * from UTIL.DBT_CONFIG where model_name = '\" + node.name + \"'; returned nothing\", info=True) }}\n            {% endif %}\n              \n        {% else %}\n            {{ log(logprefix ~ ' .. dbt config table does not exists so no GDPR view will be created!', info=True) }}\n        {% endif %}\n    {% else %}\n        {{ log(logprefix ~ ' .. target is not created in GDPR compliant schema, skipping GDPR view creation', info=True) }}\n    {% endif %}\n    {{ log(logprefix ~ 'macro end') }}\n    {{ return('') }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.telia_analytics_no.check_gdpr_tags_in_meta"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.653944,
            "supported_languages": null
        },
        "macro.telia_analytics_no.check_gdpr_tags_in_meta": {
            "name": "check_gdpr_tags_in_meta",
            "resource_type": "macro",
            "package_name": "telia_analytics_no",
            "path": "macros/gdpr_utils.sql",
            "original_file_path": "macros/gdpr_utils.sql",
            "unique_id": "macro.telia_analytics_no.check_gdpr_tags_in_meta",
            "macro_sql": "{% macro check_gdpr_tags_in_meta(columns) %}\n/*\n    This macro checks if there is at least one column in the list of columns that has a GDPR tag in the meta field.\n*/\n    {% for column_name, column in columns.items() %}\n        {% if 'gdpr_tags' in column.meta %}\n            {% if 'DATA_OBJECT' in column.meta.gdpr_tags %}                \n                    {{ return(true) }}                \n            {% endif %}\n        {% endif %}\n    {% endfor %}\n    {{ log(logprefix ~ ' .. no GDPR tags found in schema yml, skipping GDPR view creation', info=True) }}\n    {{ log(logprefix ~ ' .. you should add to the schema.yml a column definition like: \n        columns:\n            - name: <COLUMN_NAME>\n            meta:\n                gdpr_tags:\n                    DATA_OBJECT: 00 - No GDPR\n    ', info=True) }};    \n    {{ return(false) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.6543,
            "supported_languages": null
        },
        "macro.telia_analytics_no.codegen_schema": {
            "name": "codegen_schema",
            "resource_type": "macro",
            "package_name": "telia_analytics_no",
            "path": "macros/util/codegen_schema.sql",
            "original_file_path": "macros/util/codegen_schema.sql",
            "unique_id": "macro.telia_analytics_no.codegen_schema",
            "macro_sql": "{%- macro codegen_schema(model_name) -%}\n\n- name: {{model_name.lower()}}\n  description: 'some table description for {{model_name}}'\n  columns:\n{%- for col in adapter.get_columns_in_relation(ref(model_name)) -%}\n    {% set column = col.column.lower() %}\n    - name: {{column}}\n      description: 'some column description for {{column}}'\n      meta:\n        gdpr_tags:\n          DATA_OBJECT: '00 - No GDPR'\n{% endfor %} \n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1744635193.654581,
            "supported_languages": null
        }
    },
    "docs": {
        "doc.dbt.__overview__": {
            "name": "__overview__",
            "resource_type": "doc",
            "package_name": "dbt",
            "path": "overview.md",
            "original_file_path": "docs/overview.md",
            "unique_id": "doc.dbt.__overview__",
            "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"
        }
    },
    "exposures": {},
    "metrics": {},
    "groups": {},
    "selectors": {},
    "disabled": {},
    "parent_map": {
        "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change": [
            "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_abt_x__abt_main_product_change",
            "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__abt_porting",
            "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__dealer_c",
            "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__operator",
            "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_ps_fokus_x_party_base__agreement",
            "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_ps_fokus_x_party_base__campaign_c",
            "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_ps_fokus_x_party_base__product_c"
        ],
        "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_demographics_x__demography",
            "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_demographics_x__demography_household_link",
            "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_abt_fokus_x_party_base__abt_commitment_benefit",
            "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__abt_porting",
            "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__abt_subscriber_grosschurn",
            "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__abt_subscriber_lifetime",
            "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__account_c",
            "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__contact_info_c",
            "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__operator",
            "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__subscriber_c",
            "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_ip_x_party_base__fok_abt_invoice_detail",
            "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_ps_fokus_x_party_base__agreement",
            "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_ps_fokus_x_party_base__agreement_xtra_commitment_benefit",
            "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_ps_fokus_x_party_base__campaign_c",
            "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_ps_fokus_x_party_base__product_c",
            "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_ps_fokus_x_party_base__subscriber_family_rank_c"
        ],
        "test.ccdf_xtra_ps_fokus_x.abt_extended_subscriber_age_test": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__contact_info_c"
        ],
        "test.ccdf_xtra_ps_fokus_x.abt_product_change_duplicate_test": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
        ],
        "test.ccdf_xtra_ps_fokus_x.abt_product_change_scope_test.1": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_abt_x__abt_main_product_change"
        ],
        "test.ccdf_xtra_ps_fokus_x.abt_product_change_count_test3": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
        ],
        "test.ccdf_xtra_ps_fokus_x.abt_product_change_count_test2": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
        ],
        "test.ccdf_xtra_ps_fokus_x.abt_product_change_count_test1": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
        ],
        "test.ccdf_xtra_ps_fokus_x.abt_product_change_count_test": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
        ],
        "test.ccdf_xtra_ps_fokus_x.abt_product_change_content_test1": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_abt_x__abt_main_product_change"
        ],
        "test.ccdf_xtra_ps_fokus_x.failed_test_test": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
        ],
        "test.ccdf_xtra_ps_fokus_x.abt_extended_subscriber_portout_test": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__abt_porting"
        ],
        "operation.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x-on-run-end-0": [],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_account_key.df2f022f32": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
        ],
        "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_account_key__account_key__source_party_analytics_ccdf_abt_x__abt_main_product_change_.7f5c190a98": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_abt_x__abt_main_product_change"
        ],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_agreement_key.3ea93ffacb": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
        ],
        "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_agreement_key__agreement_key__source_party_analytics_ccdf_abt_x__abt_main_product_change_.c2e2b7bd9d": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_abt_x__abt_main_product_change"
        ],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_pp_price_downgrade_flag.d598c7f294": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
        ],
        "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_pp_price_downgrade_flag__1__0.07157bbdf1": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
        ],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_subscriber_no.59d7071e8c": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
        ],
        "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_subscriber_no__subscriber_no__source_party_analytics_ccdf_x__agreement_.961f090303": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_x__agreement"
        ],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_active_port_out_flag.761663cbff": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
        ],
        "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_active_port_out_flag__1__0.26d38a1712": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
        ],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_gross_flag.11e1ff1c9b": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
        ],
        "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_gross_flag__1__0.1f92bfe2ff": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
        ],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_source_system.dd56706c0e": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
        ],
        "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_source_system__FOK.8878d42a06": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
        ],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_family_flag.0e31903358": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
        ],
        "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_family_flag__1__0.ecdb9644bb": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
        ],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_subscriber_key.0674075c39": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
        ],
        "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_subscriber_key__subscriber_key__source_party_analytics_ccdf_abt_x__abt_main_product_change_.066675be8b": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_abt_x__abt_main_product_change"
        ],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_ban.4fc30360f5": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
        ],
        "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_ban__account_id__source_party_analytics_ccdf_x__agreement_.02333b5ad3": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_x__agreement"
        ],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_pp_price_upgrade_flag.75b58cf7d5": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
        ],
        "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_pp_price_upgrade_flag__1__0.d8855df709": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
        ],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_subscriber_id.03dd8d9676": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
        ],
        "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_subscriber_id__subscriber_id__source_party_analytics_ccdf_x__agreement_.4f1b3b50c1": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_x__agreement"
        ],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_business_unit.45bffd36b4": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
        ],
        "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_business_unit__FOK.b72d97d483": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
        ],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_pp_start_date.8dde1095e1": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
        ],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_churn_flag.e2292c474b": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
        ],
        "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_churn_flag__1__0.a650b17f64": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
        ],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_offer_cd.47e768299c": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
        ],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_pp_end_date.40854a55d8": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
        ],
        "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_prev_family_flag__1__0.9eb95a7abd": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
        ],
        "test.ccdf_xtra_ps_fokus_x.dbt_utils_unique_combination_of_columns_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_AGREEMENT_KEY.e03deecb5d": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
        ],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_account_key.b3a27ca372": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
        ],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_dealer_id.30d953ade1": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
        ],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_discount_price.3471cd6473": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
        ],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_start_date.3fadde670c": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
        ],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_agreement_start_date.fb81eab4af": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
        ],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_event_name.791159c1a0": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
        ],
        "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_event_name__A__C.f881722139": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
        ],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_main_product_name.5c16ed4ee3": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
        ],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_base_price.def39fcd11": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
        ],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_agreement_end_date.ec27bae018": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
        ],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_account_id.f2d5dbf488": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
        ],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_dealer_key.666906429c": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
        ],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_main_agreement_id.9d7a184035": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
        ],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_lifetime.2786611a1c": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
        ],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_no.273ba45fad": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
        ],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_city.bf6995a900": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
        ],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_main_product_key.8da940dbcc": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
        ],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_latest_product_lifetime.f7f29484fb": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
        ],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_line_price.5a4b6e5373": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
        ],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_key.e4a5822c3a": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
        ],
        "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_key__subscriber_key__source_party_analytics_ccdf_x__agreement_.b35a8ab6ad": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_x__agreement"
        ],
        "test.ccdf_xtra_ps_fokus_x.unique_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_key.fbde9fa48a": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
        ],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_ban.6e3ffec0c2": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
        ],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_additional_discount_price.6639f42392": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
        ],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_product_id.724e6155c8": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
        ],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_id.163ebedd88": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
        ],
        "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_id__subscriber_id__source_party_analytics_ccdf_x__agreement_.a2e40c734e": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_x__agreement"
        ],
        "test.ccdf_xtra_ps_fokus_x.unique_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_id.49a89eb6ed": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
        ],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_telia_xstart_50nok_discount_price.ffaebb3203": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
        ],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_product_payment_type.913bc003a0": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
        ],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_event_date.7a681099db": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
        ],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_priceplan_group_code.bb2d85f3bf": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
        ],
        "test.ccdf_xtra_ps_fokus_x.dbt_utils_unique_combination_of_columns_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_SUBSCRIBER_KEY.d1053f16cb": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
        ],
        "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_x__agreement": [],
        "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_x__dealer": [],
        "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_x__abt_porting": [],
        "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_x__campaign": [],
        "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_x__operator": [],
        "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_abt_x__abt_main_product_change": [],
        "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_x__abt_subscriber_grosschurn": [],
        "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_x__subscriber": [],
        "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_demographics_x__demography_household_link": [],
        "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_demographics_x__demography": [],
        "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_x__account": [],
        "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__abt_subscriber_grosschurn": [],
        "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__subscriber_c": [],
        "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__account_c": [],
        "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__contact_info_c": [],
        "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__abt_subscriber_lifetime": [],
        "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_ps_fokus_x_party_base__agreement": [],
        "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_ps_fokus_x_party_base__product_c": [],
        "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__abt_porting": [],
        "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_abt_fokus_x_party_base__abt_commitment_benefit": [],
        "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_ip_x_party_base__fok_abt_invoice_detail": [],
        "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__operator": [],
        "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_ps_fokus_x_party_base__campaign_c": [],
        "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__dealer_c": [],
        "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_ps_fokus_x_party_base__agreement_xtra_commitment_benefit": [],
        "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_ps_fokus_x_party_base__subscriber_family_rank_c": []
    },
    "child_map": {
        "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "test.ccdf_xtra_ps_fokus_x.abt_product_change_content_test1",
            "test.ccdf_xtra_ps_fokus_x.abt_product_change_count_test",
            "test.ccdf_xtra_ps_fokus_x.abt_product_change_count_test1",
            "test.ccdf_xtra_ps_fokus_x.abt_product_change_count_test2",
            "test.ccdf_xtra_ps_fokus_x.abt_product_change_count_test3",
            "test.ccdf_xtra_ps_fokus_x.abt_product_change_duplicate_test",
            "test.ccdf_xtra_ps_fokus_x.abt_product_change_scope_test.1",
            "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_active_port_out_flag__1__0.26d38a1712",
            "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_business_unit__FOK.b72d97d483",
            "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_churn_flag__1__0.a650b17f64",
            "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_family_flag__1__0.ecdb9644bb",
            "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_gross_flag__1__0.1f92bfe2ff",
            "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_pp_price_downgrade_flag__1__0.07157bbdf1",
            "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_pp_price_upgrade_flag__1__0.d8855df709",
            "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_prev_family_flag__1__0.9eb95a7abd",
            "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_source_system__FOK.8878d42a06",
            "test.ccdf_xtra_ps_fokus_x.dbt_utils_unique_combination_of_columns_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_AGREEMENT_KEY.e03deecb5d",
            "test.ccdf_xtra_ps_fokus_x.failed_test_test",
            "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_account_key.df2f022f32",
            "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_active_port_out_flag.761663cbff",
            "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_agreement_key.3ea93ffacb",
            "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_ban.4fc30360f5",
            "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_business_unit.45bffd36b4",
            "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_churn_flag.e2292c474b",
            "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_family_flag.0e31903358",
            "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_gross_flag.11e1ff1c9b",
            "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_offer_cd.47e768299c",
            "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_pp_end_date.40854a55d8",
            "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_pp_price_downgrade_flag.d598c7f294",
            "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_pp_price_upgrade_flag.75b58cf7d5",
            "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_pp_start_date.8dde1095e1",
            "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_source_system.dd56706c0e",
            "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_subscriber_id.03dd8d9676",
            "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_subscriber_key.0674075c39",
            "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_subscriber_no.59d7071e8c",
            "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_account_key__account_key__source_party_analytics_ccdf_abt_x__abt_main_product_change_.7f5c190a98",
            "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_agreement_key__agreement_key__source_party_analytics_ccdf_abt_x__abt_main_product_change_.c2e2b7bd9d",
            "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_ban__account_id__source_party_analytics_ccdf_x__agreement_.02333b5ad3",
            "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_subscriber_id__subscriber_id__source_party_analytics_ccdf_x__agreement_.4f1b3b50c1",
            "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_subscriber_key__subscriber_key__source_party_analytics_ccdf_abt_x__abt_main_product_change_.066675be8b",
            "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_subscriber_no__subscriber_no__source_party_analytics_ccdf_x__agreement_.961f090303"
        ],
        "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber": [
            "test.ccdf_xtra_ps_fokus_x.abt_extended_subscriber_age_test",
            "test.ccdf_xtra_ps_fokus_x.abt_extended_subscriber_portout_test",
            "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_event_name__A__C.f881722139",
            "test.ccdf_xtra_ps_fokus_x.dbt_utils_unique_combination_of_columns_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_SUBSCRIBER_KEY.d1053f16cb",
            "test.ccdf_xtra_ps_fokus_x.failed_test_test",
            "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_account_id.f2d5dbf488",
            "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_account_key.b3a27ca372",
            "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_additional_discount_price.6639f42392",
            "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_agreement_end_date.ec27bae018",
            "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_agreement_start_date.fb81eab4af",
            "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_ban.6e3ffec0c2",
            "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_base_price.def39fcd11",
            "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_city.bf6995a900",
            "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_dealer_id.30d953ade1",
            "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_dealer_key.666906429c",
            "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_discount_price.3471cd6473",
            "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_event_date.7a681099db",
            "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_event_name.791159c1a0",
            "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_latest_product_lifetime.f7f29484fb",
            "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_line_price.5a4b6e5373",
            "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_main_agreement_id.9d7a184035",
            "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_main_product_key.8da940dbcc",
            "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_main_product_name.5c16ed4ee3",
            "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_priceplan_group_code.bb2d85f3bf",
            "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_product_id.724e6155c8",
            "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_product_payment_type.913bc003a0",
            "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_id.163ebedd88",
            "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_key.e4a5822c3a",
            "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_lifetime.2786611a1c",
            "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_no.273ba45fad",
            "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_start_date.3fadde670c",
            "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_telia_xstart_50nok_discount_price.ffaebb3203",
            "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_id__subscriber_id__source_party_analytics_ccdf_x__agreement_.a2e40c734e",
            "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_key__subscriber_key__source_party_analytics_ccdf_x__agreement_.b35a8ab6ad",
            "test.ccdf_xtra_ps_fokus_x.unique_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_id.49a89eb6ed",
            "test.ccdf_xtra_ps_fokus_x.unique_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_key.fbde9fa48a"
        ],
        "test.ccdf_xtra_ps_fokus_x.abt_extended_subscriber_age_test": [],
        "test.ccdf_xtra_ps_fokus_x.abt_product_change_duplicate_test": [],
        "test.ccdf_xtra_ps_fokus_x.abt_product_change_scope_test.1": [],
        "test.ccdf_xtra_ps_fokus_x.abt_product_change_count_test3": [],
        "test.ccdf_xtra_ps_fokus_x.abt_product_change_count_test2": [],
        "test.ccdf_xtra_ps_fokus_x.abt_product_change_count_test1": [],
        "test.ccdf_xtra_ps_fokus_x.abt_product_change_count_test": [],
        "test.ccdf_xtra_ps_fokus_x.abt_product_change_content_test1": [],
        "test.ccdf_xtra_ps_fokus_x.failed_test_test": [],
        "test.ccdf_xtra_ps_fokus_x.abt_extended_subscriber_portout_test": [],
        "operation.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x-on-run-end-0": [],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_account_key.df2f022f32": [],
        "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_account_key__account_key__source_party_analytics_ccdf_abt_x__abt_main_product_change_.7f5c190a98": [],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_agreement_key.3ea93ffacb": [],
        "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_agreement_key__agreement_key__source_party_analytics_ccdf_abt_x__abt_main_product_change_.c2e2b7bd9d": [],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_pp_price_downgrade_flag.d598c7f294": [],
        "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_pp_price_downgrade_flag__1__0.07157bbdf1": [],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_subscriber_no.59d7071e8c": [],
        "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_subscriber_no__subscriber_no__source_party_analytics_ccdf_x__agreement_.961f090303": [],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_active_port_out_flag.761663cbff": [],
        "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_active_port_out_flag__1__0.26d38a1712": [],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_gross_flag.11e1ff1c9b": [],
        "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_gross_flag__1__0.1f92bfe2ff": [],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_source_system.dd56706c0e": [],
        "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_source_system__FOK.8878d42a06": [],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_family_flag.0e31903358": [],
        "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_family_flag__1__0.ecdb9644bb": [],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_subscriber_key.0674075c39": [],
        "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_subscriber_key__subscriber_key__source_party_analytics_ccdf_abt_x__abt_main_product_change_.066675be8b": [],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_ban.4fc30360f5": [],
        "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_ban__account_id__source_party_analytics_ccdf_x__agreement_.02333b5ad3": [],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_pp_price_upgrade_flag.75b58cf7d5": [],
        "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_pp_price_upgrade_flag__1__0.d8855df709": [],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_subscriber_id.03dd8d9676": [],
        "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_subscriber_id__subscriber_id__source_party_analytics_ccdf_x__agreement_.4f1b3b50c1": [],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_business_unit.45bffd36b4": [],
        "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_business_unit__FOK.b72d97d483": [],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_pp_start_date.8dde1095e1": [],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_churn_flag.e2292c474b": [],
        "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_churn_flag__1__0.a650b17f64": [],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_offer_cd.47e768299c": [],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_pp_end_date.40854a55d8": [],
        "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_prev_family_flag__1__0.9eb95a7abd": [],
        "test.ccdf_xtra_ps_fokus_x.dbt_utils_unique_combination_of_columns_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_AGREEMENT_KEY.e03deecb5d": [],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_account_key.b3a27ca372": [],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_dealer_id.30d953ade1": [],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_discount_price.3471cd6473": [],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_start_date.3fadde670c": [],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_agreement_start_date.fb81eab4af": [],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_event_name.791159c1a0": [],
        "test.ccdf_xtra_ps_fokus_x.accepted_values_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_event_name__A__C.f881722139": [],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_main_product_name.5c16ed4ee3": [],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_base_price.def39fcd11": [],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_agreement_end_date.ec27bae018": [],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_account_id.f2d5dbf488": [],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_dealer_key.666906429c": [],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_main_agreement_id.9d7a184035": [],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_lifetime.2786611a1c": [],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_no.273ba45fad": [],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_city.bf6995a900": [],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_main_product_key.8da940dbcc": [],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_latest_product_lifetime.f7f29484fb": [],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_line_price.5a4b6e5373": [],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_key.e4a5822c3a": [],
        "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_key__subscriber_key__source_party_analytics_ccdf_x__agreement_.b35a8ab6ad": [],
        "test.ccdf_xtra_ps_fokus_x.unique_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_key.fbde9fa48a": [],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_ban.6e3ffec0c2": [],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_additional_discount_price.6639f42392": [],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_product_id.724e6155c8": [],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_id.163ebedd88": [],
        "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_id__subscriber_id__source_party_analytics_ccdf_x__agreement_.a2e40c734e": [],
        "test.ccdf_xtra_ps_fokus_x.unique_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_id.49a89eb6ed": [],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_telia_xstart_50nok_discount_price.ffaebb3203": [],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_product_payment_type.913bc003a0": [],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_event_date.7a681099db": [],
        "test.ccdf_xtra_ps_fokus_x.not_null_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_priceplan_group_code.bb2d85f3bf": [],
        "test.ccdf_xtra_ps_fokus_x.dbt_utils_unique_combination_of_columns_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_SUBSCRIBER_KEY.d1053f16cb": [],
        "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_x__agreement": [
            "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_id__subscriber_id__source_party_analytics_ccdf_x__agreement_.a2e40c734e",
            "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber_subscriber_key__subscriber_key__source_party_analytics_ccdf_x__agreement_.b35a8ab6ad",
            "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_ban__account_id__source_party_analytics_ccdf_x__agreement_.02333b5ad3",
            "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_subscriber_id__subscriber_id__source_party_analytics_ccdf_x__agreement_.4f1b3b50c1",
            "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_subscriber_no__subscriber_no__source_party_analytics_ccdf_x__agreement_.961f090303"
        ],
        "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_x__dealer": [],
        "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_x__abt_porting": [],
        "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_x__campaign": [],
        "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_x__operator": [],
        "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_abt_x__abt_main_product_change": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "test.ccdf_xtra_ps_fokus_x.abt_product_change_content_test1",
            "test.ccdf_xtra_ps_fokus_x.abt_product_change_scope_test.1",
            "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_account_key__account_key__source_party_analytics_ccdf_abt_x__abt_main_product_change_.7f5c190a98",
            "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_agreement_key__agreement_key__source_party_analytics_ccdf_abt_x__abt_main_product_change_.c2e2b7bd9d",
            "test.ccdf_xtra_ps_fokus_x.relationships_ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change_subscriber_key__subscriber_key__source_party_analytics_ccdf_abt_x__abt_main_product_change_.066675be8b"
        ],
        "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_x__abt_subscriber_grosschurn": [],
        "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_x__subscriber": [],
        "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_demographics_x__demography_household_link": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
        ],
        "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_demographics_x__demography": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
        ],
        "source.ccdf_xtra_ps_fokus_x.party_analytics.ccdf_x__account": [],
        "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__abt_subscriber_grosschurn": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
        ],
        "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__subscriber_c": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
        ],
        "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__account_c": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
        ],
        "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__contact_info_c": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "test.ccdf_xtra_ps_fokus_x.abt_extended_subscriber_age_test"
        ],
        "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__abt_subscriber_lifetime": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
        ],
        "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_ps_fokus_x_party_base__agreement": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
        ],
        "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_ps_fokus_x_party_base__product_c": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
        ],
        "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__abt_porting": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change",
            "test.ccdf_xtra_ps_fokus_x.abt_extended_subscriber_portout_test"
        ],
        "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_abt_fokus_x_party_base__abt_commitment_benefit": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
        ],
        "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_ip_x_party_base__fok_abt_invoice_detail": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
        ],
        "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__operator": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
        ],
        "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_ps_fokus_x_party_base__campaign_c": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber",
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
        ],
        "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_core_fokus_x_party_base__dealer_c": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_main_product_change"
        ],
        "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_ps_fokus_x_party_base__agreement_xtra_commitment_benefit": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
        ],
        "source.ccdf_xtra_ps_fokus_x.party_base.ccdf_ps_fokus_x_party_base__subscriber_family_rank_c": [
            "model.ccdf_xtra_ps_fokus_x.ccdf_xtra_ps_fokus_x__abt_xtra_extended_subscriber"
        ]
    },
    "group_map": {},
    "saved_queries": {},
    "semantic_models": {},
    "unit_tests": {}
}